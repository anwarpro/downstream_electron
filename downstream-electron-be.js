/*! For license information please see downstream-electron-be.js.LICENSE.txt */
!function(Q,U){if("object"==typeof exports&&"object"==typeof module)module.exports=U(require("@electron/remote"),require("base64-js"),require("biguint-format"),require("electron"),require("flake-idgen"),require("get-folder-size"),require("jsonfile"),require("mkdirp"),require("moment/moment"),require("underscore"),require("url-parse"),require("xmldom"));else if("function"==typeof define&&define.amd)define(["@electron/remote","base64-js","biguint-format","electron","flake-idgen","get-folder-size","jsonfile","mkdirp","moment/moment","underscore","url-parse","xmldom"],U);else{var F="object"==typeof exports?U(require("@electron/remote"),require("base64-js"),require("biguint-format"),require("electron"),require("flake-idgen"),require("get-folder-size"),require("jsonfile"),require("mkdirp"),require("moment/moment"),require("underscore"),require("url-parse"),require("xmldom")):U(Q["@electron/remote"],Q["base64-js"],Q["biguint-format"],Q.electron,Q["flake-idgen"],Q["get-folder-size"],Q.jsonfile,Q.mkdirp,Q["moment/moment"],Q.underscore,Q["url-parse"],Q.xmldom);for(var B in F)("object"==typeof exports?exports:Q)[B]=F[B]}}(global,((__WEBPACK_EXTERNAL_MODULE__7911__,__WEBPACK_EXTERNAL_MODULE__7769__,__WEBPACK_EXTERNAL_MODULE__1637__,__WEBPACK_EXTERNAL_MODULE__7194__,__WEBPACK_EXTERNAL_MODULE__1759__,__WEBPACK_EXTERNAL_MODULE__6838__,__WEBPACK_EXTERNAL_MODULE__3480__,__WEBPACK_EXTERNAL_MODULE__9526__,__WEBPACK_EXTERNAL_MODULE__1908__,__WEBPACK_EXTERNAL_MODULE__4952__,__WEBPACK_EXTERNAL_MODULE__3720__,__WEBPACK_EXTERNAL_MODULE__678__)=>(()=>{var __webpack_modules__={9277:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\n/**\n * @typedef Configuration\n * @property {string=} appDir main directory path, can be any valid path, default is electronApp.getPath(\'userData\')\n * @property {string=} settingsName - name of the folder in main directory path where to store settings\n * @property {string=} publicName - name of the folder in main directory path which will be served over http\n * @property {string=} downloadsName - name of the folder in main directory path and publicName where to store assets\n * @property {string=} offlineDomain - on which domain the content should be served, default is 127.0.0.1\n * @property {number=} offlineContentPortStart - on which port offline content should be served, default is 3010\n * @property {number=} maxOfflineContentPortRange - max range for offline port to on which content can be served\n *   It will try from {offlineContentPortStart} and if taken it will try next until it finds a free one\n * @property {number=} numberOfManifestsInParallel - max number of manifest that can be downloaded at the same time,\n *   the rest will go into queue.\n *   Be reasonable here, as it might slow down your computer, default value is 2. With 10 and very larges manifests\n *   it might go to hundreds of chunks (50 files can be downloaded at the same time per manifest). Also the highger number\n *   doesn\'t mean it will downloads all movies faster. You should find here some balance.\n *   Seems like 2-3 manifests gives the best results, 1 manifest limitation might work better for slower computers.\n * @property {regex | string=} customManifestIdFolderRegex - regex to use to validate custom manifest id - bear in mind that this\n * need to be also a valid folder name.<br>\n * By default it matches any letter or number or unicode characters (regional characters) or "-" or "_" as a first character<br>\n * Then it may have any letter or number or unicode characters (regional characters) or space or any of the following characters:\n * ,.;\'[]{}!@#$%&*()-_=+\n *\n * @property {string=} openingTagForInvalidCustomManifestIdCharacter - when customManifestId is being invalidated\n * against customManifestIdFolderRegex it will raise the error and include the customManifestId with marked invalid characters\n * this is the opening tag to be added before invalid character\n *\n * @property {string=} closingTagForInvalidCustomManifestIdCharacter - when customManifestId is being invalidated\n * against customManifestIdFolderRegex it will raise the error and include the customManifestId with marked invalid characters\n * this is the closing tag to be added after invalid character\n *\n * @namespace DownstreamElectronBE.configuration\n * @description\n * During initialization you can configure your app\n * @example\n * //somewhere in the main process\n * const downstreamElectron = require(\'downstream-electron\');\n * const userSettings = {\n *   appDir: "/Users/admin/myApp",\n *   settingsName: "settings",\n *   publicName: "public",\n *   downloadsName: "movies"\n *   numberOfManifestsInParallel: 3\n * };\n * function createWindow() {\n *   downstreamElectron.init(userSettings);\n *   const win = new BrowserWindow({\n *     width: 1200,\n *     height: 700,\n *     resizable: true,\n *     webPreferences: {\n *       plugins: true,\n *       nodeIntegration: true\n *     }\n *   });\n *   win.loadURL(\'file://index.html\');\n *   win.webContents.openDevTools();\n * }\n * app.on(\'ready\', createWindow);\n */\nvar electronApp = (__webpack_require__(7194).app);\nvar path = __webpack_require__(1017);\nvar settings = {\n  downloadingThreadsRules: {\n    items: [{\n      max: 10,\n      files: 5\n    }, {\n      max: 100,\n      files: 10\n    }, {\n      max: 1000,\n      files: 30\n    }, {\n      max: 100000,\n      files: 50\n    }],\n    threads: [{\n      size: 10,\n      number: 1\n    }, {\n      size: 100,\n      number: 3\n    }, {\n      size: 1000,\n      number: 4\n    }, {\n      size: 100000,\n      number: 5\n    }]\n  },\n  MAX_ERRORS_DOWNLOAD_RETRY: 5,\n  MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY: 100,\n  MAX_ERRORS_DOWNLOAD_CHUNK_RETRY: 5,\n  offlineDomain: "http://127.0.0.1",\n  offlineContentPortStart: 3010,\n  maxOfflineContentPortRange: 3030,\n  numberOfManifestsInParallel: 2,\n  stopOnError: false,\n  stores: {\n    DOWNLOADS: {\n      "LEFT": "left",\n      "DOWNLOADING": "downloading",\n      "DOWNLOADED": "downloaded",\n      "ERRORS": "errors"\n    },\n    STATUS: "status",\n    PARAMS: "params",\n    MANIFEST: "manifest",\n    PERSISTENT: "persistent",\n    DATA: "data"\n  },\n  saveToDisk: true,\n  times: {\n    DOWNLOAD_TIMEOUT: 5000,\n    RETRY_TIMEOUT: 5000\n  },\n  useChunkedEncoding: false,\n  useHeadRequests: true,\n  noCache: false,\n  defaultManifestRequestOptions: {\n    headers: {\n      "Accept": "*/*",\n      // \'Accept-Encoding\': \'gzip, deflate, br\', // gzip doesn\'t work\n      // \'Accept-Language\': \'en-US,en;q=0.8,pl;q=0.6\',\n      // \'Cache-Control\': \'no-cache\',\n      // \'Connection\': \'keep-alive\', // @TODO investigate it\n      // \'Pragma\': \'no-cache\',\n      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Electron/1.8.6 Safari/537.36"\n    },\n    timeout: 5000\n  },\n  // matches any letter or number or unicode characters (regional characters) or "-" or "_" as a start\n  // then it may have any letter or number or unicode characters (regional characters) or space or any of the following characters\n  // ,.;\'[]{}!@#$%&*()-_=+\n  // and is all case insensitive\n  customManifestIdFolderRegex: /^([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\-|\\_){1,1}([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\ |\\,|\\.|\\;|\\\'|\\[|\\]|\\{|\\}|\\!|\\@|\\#|\\$|\\%|\\&|\\*|\\(|\\)|\\-|\\_|\\=|\\+?){0,49}$/i,\n  openingTagForInvalidCustomManifestIdCharacter: \'<span style=\\\'background-color:blue;\\\'>\',\n  closingTagForInvalidCustomManifestIdCharacter: \'</span>\'\n};\nfunction loadUserSettings(jsonSettings) {\n  var appDir = electronApp.getPath("userData");\n  var settingsName = "settings";\n  var publicName = "public";\n  var downloadsName = "movies";\n  if (jsonSettings) {\n    if (jsonSettings.appDir) {\n      appDir = jsonSettings.appDir;\n    }\n    if (jsonSettings.settingsName) {\n      settingsName = jsonSettings.settingsName;\n    }\n    if (jsonSettings.publicName) {\n      publicName = jsonSettings.publicName;\n    }\n    if (jsonSettings.downloadsName) {\n      downloadsName = jsonSettings.downloadsName;\n    }\n    if (jsonSettings.offlineDomain) {\n      settings.offlineDomain = jsonSettings.offlineDomain;\n    }\n    if (jsonSettings.offlineContentPortStart) {\n      settings.offlineContentPortStart = jsonSettings.offlineContentPortStart;\n    }\n    if (jsonSettings.maxOfflineContentPortRange) {\n      settings.maxOfflineContentPortRange = jsonSettings.maxOfflineContentPortRange;\n    }\n    if (jsonSettings.numberOfManifestsInParallel) {\n      settings.numberOfManifestsInParallel = jsonSettings.numberOfManifestsInParallel;\n    }\n    if (jsonSettings.stopOnError !== undefined) {\n      settings.stopOnError = jsonSettings.stopOnError;\n    }\n    if (jsonSettings.customManifestIdFolderRegex) {\n      settings.customManifestIdFolderRegex = jsonSettings.customManifestIdFolderRegex;\n    }\n    if (jsonSettings.openingTagForInvalidCustomManifestIdCharacter) {\n      settings.openingTagForInvalidCustomManifestIdCharacter = jsonSettings.openingTagForInvalidCustomManifestIdCharacter;\n    }\n    if (jsonSettings.closingTagForInvalidCustomManifestIdCharacter) {\n      settings.closingTagForInvalidCustomManifestIdCharacter = jsonSettings.closingTagForInvalidCustomManifestIdCharacter;\n    }\n    if (jsonSettings.useHeadRequests !== undefined) {\n      settings.useHeadRequests = jsonSettings.useHeadRequests;\n    }\n    if (jsonSettings.times && jsonSettings.times.RETRY_TIMEOUT) {\n      settings.times.RETRY_TIMEOUT = jsonSettings.times.RETRY_TIMEOUT;\n    }\n    if (jsonSettings.MAX_ERRORS_DOWNLOAD_RETRY) {\n      settings.MAX_ERRORS_DOWNLOAD_RETRY = jsonSettings.MAX_ERRORS_DOWNLOAD_RETRY;\n    }\n    if (jsonSettings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY) {\n      settings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY = jsonSettings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY;\n    }\n    if (jsonSettings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY) {\n      settings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY = jsonSettings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY;\n    }\n    if (jsonSettings.noCache) {\n      settings.noCache = jsonSettings.noCache;\n    }\n  }\n  appDir = path.join(path.resolve(appDir), "/");\n  var settingsFolder = path.join(path.resolve(appDir + settingsName) + "/", "/");\n  var publicFolderPath = path.join(path.resolve(appDir + publicName) + "/", "/");\n  var downloadsFolderPath = path.join(path.resolve(publicFolderPath + downloadsName) + "/", "/");\n  settings.appDir = appDir;\n  settings.downloadsFolderPath = downloadsFolderPath;\n  settings.downloadsName = downloadsName;\n  settings.publicFolderPath = publicFolderPath;\n  settings.settingsFolder = settingsFolder;\n\n  // console.log(\'appDir:\', appDir);\n}\n\nfunction getSettings() {\n  return settings;\n}\nexports.load = loadUserSettings;\nexports.getSettings = getSettings;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9277\n')},9097:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\n/**\n * @typedef manifestObject\n * @property {Object} video - video representations\n * @property {Object} audio - audio representations\n * @property {Object} text - text representations\n * @property {String} id - manifest id\n */\n\n/**\n * @memberOf DownstreamElectronFE\n * @namespace DownstreamElectronFE.downloads\n */\nvar downloads = {};\n\n/**\n * create a new download, if success the result will contain "id" which should be used for other calls\n * @method create\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestUrl - manifest url\n * @param {string} customManifestId - custom manifest id, if empty, null or \'\'\n * the id will be generated automatically.<br>\n * The manifestId is used to also store information about movie under the same folder so if you overwrite it,\n * it will be also used as a name for folder where movie content will be stored\n * customManifestId will be validated against default regex\n * {@link DownstreamElectronBE.configuration|customManifestIdFolderRegex}\n * @example\n * var url = "http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd";\n * DownstreamElectronFE.downloads.create(url)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * DownstreamElectronFE.downloads.create(url, \'<myCustomId>\')\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.create = __webpack_require__(3678);\n\n/**\n * create a persistent session\n * @method createPersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {PersistentConfig} config - persistent configuration\n * @param {boolean} [forced=false] - replace existing persistent session, if true\n * @example\n * var config = {\n *   licenseUrl: \'https://lic.staging.drmtoday.com/license-proxy-widevine/cenc/\',\n *   serverCertificate: new Uint8Array(<server_certificate>),\n *   customData: {\n *     userId: \'<user_id>\',\n *     sessionId: \'<session_id>\',\n *     merchant: \'<merchant>\'\n *   }\n * };\n * DownstreamElectronFE.downloads.createPersistent(manifestId, config)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.createPersistent = __webpack_require__(6916);\n\n/**\n * Get info about manifest folder\n * @method getFolderInfo\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getFolderInfo()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.getFolderInfo = __webpack_require__(7217);\n\n/**\n * get ids of all downloads\n * @method getList\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getList()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.getList = __webpack_require__(136);\n\n/**\n * get list of all downloads with additional info {@link manifestObject}\n * @method getListWithInfo\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getListWithInfo()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.getListWithInfo = __webpack_require__(7318);\n\n/**\n * get offline link for download which can be used by any player to play movie\n * @method getOfflineLink\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.getOfflineLink(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.getOfflineLink = __webpack_require__(9074);\n\n/**\n * get info for download\n * @method info\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.info(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.info = __webpack_require__(589);\n\n/**\n * removes download\n * @method remove\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.remove(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.remove = __webpack_require__(6128);\n\n/**\n * removes all downloads\n * @method removeAll\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.removeAll()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.removeAll = __webpack_require__(5058);\n\n/**\n * removes all unfinished downloads\n * @method removeAllUnfinished\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.removeAllUnfinished()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.removeAllUnfinished = __webpack_require__(9199);\n\n/**\n * removes persistent information previously stored\n * @method removePersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.removePersistent(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.removePersistent = __webpack_require__(7552);\n\n/**\n * resumes download which could be previously stopped or is broken\n * @method resume\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.resume(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.resume = __webpack_require__(7560);\n\n/**\n * Saves some user data this might be a string or json object.\n * This data will be available as "data" property for info of download\n * @method saveData\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string|json} data - user data\n * @example\n * DownstreamElectronFE.downloads.saveData(manifestId, data)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.saveData = __webpack_require__(9463);\n\n/**\n * saves persistent session identifier\n * @method savePersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string} persistentSessionId - persistent session identifier\n * @example\n * DownstreamElectronFE.downloads.savePersistent(manifestId, persistentSessionId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.savePersistent = __webpack_require__(3880);\n\n/**\n * starts download\n * @method start\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - representations to be downloaded, available options: \'video\', \'audio\', \'text\'.\n * For each option please provide an array of representations id to be downloaded\n * @example\n * DownstreamElectronFE.downloads.start(manifestId, {video: [\'video=400000\', \'video=795000\'], audio: [\'audio=128000\']})\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.start = __webpack_require__(1792);\n\n/**\n * stops download\n * @method stop\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.stop(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.stop = __webpack_require__(647);\n\n/**\n * stops all downloads\n * @method stopAll\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.stopAll()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.stopAll = __webpack_require__(1120);\n\n/**\n * subscribe to download progress\n * @method subscribe\n * @memberOf DownstreamElectronFE.downloads\n * @param {string|array} manifestId - manifest identifier, or the array of the manifests identifier.\n * @param {number} interval - in milliseconds - how often callback onProgress should be invoked\n * @param {function} onProgress - callback to be invoked as often as defined by interval with [stats information]{@link DownloadStats}\n * @param {function} onFinish - callback to be invoked when download is finished\n * @example\n * function onProgress (err, stats) {\n *   if (err) {\n *     console.logs(stats);\n *   }\n * };\n * function onFinish (err, info) {\n *   if (err) {\n *     console.log("error", err);\n *   } else {\n *     console.log("success", info);\n *   }\n * };\n * DownstreamElectronFE.downloads.subscribe(manifestId, 1000, onProgress, onFinish)\n *    .then(\n *      function onSuccess() {console.log("subscribed successfully");},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.subscribe = __webpack_require__(608);\n\n/**\n * removes callbacks from subscribe process\n * @method unsubscribe\n * @memberOf DownstreamElectronFE.downloads\n * @param {string|array} manifestId - manifest identifier, or the array of the manifests identifier.\n * @example\n * DownstreamElectronFE.downloads.unsubscribe(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.unsubscribe = __webpack_require__(6439);\n\n/**\n * update download folder info for manifest id\n * this can be usefule when user has copied download folder\n * @method updateDownloadFolder\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string} downloadFolder - new download folder path\n * @example\n * DownstreamElectronFE.downloads.updateDownloadFolder(manifestId, downloadFolder)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.updateDownloadFolder = __webpack_require__(1052);\n\n/**\n * remove all subscribers\n * @private\n * @method removeSubscribers\n * @memberOf DownstreamElectronFE\n * @example\n * DownstreamElectronFE.removeSubscribers()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\nvar removeSubscribers = __webpack_require__(8105);\nmodule.exports = {\n  downloads: downloads,\n  removeSubscribers: removeSubscribers\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9097\n')},3678:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar Manifest = (__webpack_require__(1269)/* .Manifest */ .G);\nvar translation = __webpack_require__(817);\nvar canCreateManifest = __webpack_require__(5079);\nvar getInvalidDiff = __webpack_require__(7815);\nvar appSettings = __webpack_require__(9277);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestUrl, customManifestId, manifestStr) {\n  var useCustomId = true;\n  if (typeof customManifestId === "undefined" || customManifestId === "" || customManifestId === null) {\n    useCustomId = false;\n  }\n  if (useCustomId) {\n    if (typeof customManifestId !== "undefined" && typeof customManifestId !== "number" && typeof customManifestId !== "string") {\n      onFailure(translation.getError(translation.e.manifests.INVALID_ID, customManifestId));\n      return;\n    }\n    var customManifestIdFolderRegex = appSettings.getSettings().customManifestIdFolderRegex;\n    if (!customManifestId.match(customManifestIdFolderRegex)) {\n      var invalid = getInvalidDiff(customManifestId, customManifestIdFolderRegex, appSettings.getSettings().openingTagForInvalidCustomManifestIdCharacter, appSettings.getSettings().closingTagForInvalidCustomManifestIdCharacter);\n      onFailure(translation.getError(translation.e.manifests.INVALID_ID, invalid));\n      return;\n    }\n  }\n  var manifest = new Manifest(customManifestId);\n  var promise;\n  if (manifestStr) {\n    promise = manifest.loadWithManifest(manifestUrl, manifestStr);\n  } else {\n    promise = manifest.load(manifestUrl);\n  }\n  promise.then(function () {\n    if (useCustomId) {\n      canCreateManifest(customManifestId).then(function () {\n        api.manifestController.cacheManifest(manifest);\n        onSuccess(manifest.getJsonInfo());\n      }, function (err) {\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, customManifestId), err);\n      });\n    } else {\n      api.manifestController.cacheManifest(manifest);\n      onSuccess(manifest.getJsonInfo());\n    }\n  }, function (err) {\n    onFailure(translation.getError(translation.e.manifests.LOADING_FAILED, manifestUrl), err);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDaUIsUUFBUSxDQUFDTyxXQUFXLEVBQUUsQ0FBQztJQUNuQztFQUNGLENBQUMsRUFBRSxVQUFDQyxHQUFHLEVBQUs7SUFDVnhCLFNBQVMsQ0FBQ1IsV0FBVyxDQUFDYyxRQUFRLENBQUNkLFdBQVcsQ0FBQ2UsQ0FBQyxDQUFDQyxTQUFTLENBQUNrQixjQUFjLEVBQUV4QixXQUFXLENBQUMsRUFBRXNCLEdBQUcsQ0FBQztFQUMzRixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9jcmVhdGUuanM/ZWMyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgTWFuaWZlc3QgPSByZXF1aXJlKFwiLi4vLi4vbWFuaWZlc3QvbG9hZGVyL21hbmlmZXN0XCIpLk1hbmlmZXN0O1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKFwiLi4vLi4vdHJhbnNsYXRpb24vaW5kZXhcIik7XG5jb25zdCBjYW5DcmVhdGVNYW5pZmVzdCA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2Nhbi1jcmVhdGUtbWFuaWZlc3RcIik7XG5jb25zdCBnZXRJbnZhbGlkRGlmZiA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2dldC1pbnZhbGlkLWRpZmZcIik7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoXCIuLi8uLi9hcHAtc2V0dGluZ3NcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RVcmwsIGN1c3RvbU1hbmlmZXN0SWQsIG1hbmlmZXN0U3RyKSB7XG4gIHZhciB1c2VDdXN0b21JZCA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBjdXN0b21NYW5pZmVzdElkID09PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgY3VzdG9tTWFuaWZlc3RJZCA9PT0gXCJcIiB8fFxuICAgIGN1c3RvbU1hbmlmZXN0SWQgPT09IG51bGwpIHtcbiAgICB1c2VDdXN0b21JZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHVzZUN1c3RvbUlkKSB7XG4gICAgaWYgKHR5cGVvZiBjdXN0b21NYW5pZmVzdElkICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICB0eXBlb2YgY3VzdG9tTWFuaWZlc3RJZCAhPT0gXCJudW1iZXJcIiAmJlxuICAgICAgdHlwZW9mIGN1c3RvbU1hbmlmZXN0SWQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5JTlZBTElEX0lELCBjdXN0b21NYW5pZmVzdElkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN1c3RvbU1hbmlmZXN0SWRGb2xkZXJSZWdleCA9IGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuY3VzdG9tTWFuaWZlc3RJZEZvbGRlclJlZ2V4O1xuXG4gICAgaWYgKCFjdXN0b21NYW5pZmVzdElkLm1hdGNoKGN1c3RvbU1hbmlmZXN0SWRGb2xkZXJSZWdleCkpIHtcbiAgICAgIGNvbnN0IGludmFsaWQgPSBnZXRJbnZhbGlkRGlmZihcbiAgICAgICAgY3VzdG9tTWFuaWZlc3RJZCxcbiAgICAgICAgY3VzdG9tTWFuaWZlc3RJZEZvbGRlclJlZ2V4LFxuICAgICAgICBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLm9wZW5pbmdUYWdGb3JJbnZhbGlkQ3VzdG9tTWFuaWZlc3RJZENoYXJhY3RlcixcbiAgICAgICAgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5jbG9zaW5nVGFnRm9ySW52YWxpZEN1c3RvbU1hbmlmZXN0SWRDaGFyYWN0ZXIpO1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLklOVkFMSURfSUQsIGludmFsaWQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBsZXQgbWFuaWZlc3QgPSBuZXcgTWFuaWZlc3QoY3VzdG9tTWFuaWZlc3RJZCk7XG4gIGxldCBwcm9taXNlO1xuICBpZiAobWFuaWZlc3RTdHIpIHtcbiAgICBwcm9taXNlID0gbWFuaWZlc3QubG9hZFdpdGhNYW5pZmVzdChtYW5pZmVzdFVybCwgbWFuaWZlc3RTdHIpXG4gIH0gZWxzZSB7XG4gICAgcHJvbWlzZSA9IG1hbmlmZXN0LmxvYWQobWFuaWZlc3RVcmwpO1xuICB9XG5cbiAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICBpZiAodXNlQ3VzdG9tSWQpIHtcbiAgICAgIGNhbkNyZWF0ZU1hbmlmZXN0KGN1c3RvbU1hbmlmZXN0SWQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBhcGkubWFuaWZlc3RDb250cm9sbGVyLmNhY2hlTWFuaWZlc3QobWFuaWZlc3QpO1xuICAgICAgICBvblN1Y2Nlc3MobWFuaWZlc3QuZ2V0SnNvbkluZm8oKSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5GT0xERVJfQUxSRUFEWV9FWElTVFMsIGN1c3RvbU1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5tYW5pZmVzdENvbnRyb2xsZXIuY2FjaGVNYW5pZmVzdChtYW5pZmVzdCk7XG4gICAgICBvblN1Y2Nlc3MobWFuaWZlc3QuZ2V0SnNvbkluZm8oKSk7XG4gICAgfVxuICB9LCAoZXJyKSA9PiB7XG4gICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLkxPQURJTkdfRkFJTEVELCBtYW5pZmVzdFVybCksIGVycik7XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJNYW5pZmVzdCIsInJlcXVpcmUiLCJ0cmFuc2xhdGlvbiIsImNhbkNyZWF0ZU1hbmlmZXN0IiwiZ2V0SW52YWxpZERpZmYiLCJhcHBTZXR0aW5ncyIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdFVybCIsImN1c3RvbU1hbmlmZXN0SWQiLCJtYW5pZmVzdFN0ciIsInVzZUN1c3RvbUlkIiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiSU5WQUxJRF9JRCIsImN1c3RvbU1hbmlmZXN0SWRGb2xkZXJSZWdleCIsImdldFNldHRpbmdzIiwibWF0Y2giLCJpbnZhbGlkIiwib3BlbmluZ1RhZ0ZvckludmFsaWRDdXN0b21NYW5pZmVzdElkQ2hhcmFjdGVyIiwiY2xvc2luZ1RhZ0ZvckludmFsaWRDdXN0b21NYW5pZmVzdElkQ2hhcmFjdGVyIiwibWFuaWZlc3QiLCJwcm9taXNlIiwibG9hZFdpdGhNYW5pZmVzdCIsImxvYWQiLCJ0aGVuIiwibWFuaWZlc3RDb250cm9sbGVyIiwiY2FjaGVNYW5pZmVzdCIsImdldEpzb25JbmZvIiwiZXJyIiwiRk9MREVSX0FMUkVBRFlfRVhJU1RTIiwiTE9BRElOR19GQUlMRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3678\n')},6916:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess /*, onFailure, target, manifestId */) {\n  onSuccess();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkxNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLENBQUMsc0NBQXNDO0VBQzlFQSxTQUFTLEVBQUU7QUFDYixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9jcmVhdGVQZXJzaXN0ZW50LmpzP2VhZGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzIC8qLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCAqLykge1xuICBvblN1Y2Nlc3MoKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6916\n")},7217:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestFolderInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.INFO_FAILED, manifestId), err);\n    } else {\n      onSuccess(info);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIxNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7RUFDeEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLHFCQUFxQixDQUFDRixVQUFVLEVBQUUsVUFBVUcsR0FBRyxFQUFFQyxJQUFJLEVBQUU7SUFDM0UsSUFBSUQsR0FBRyxFQUFFO01BQ1BMLFNBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFRLENBQUNiLFdBQVcsQ0FBQ2MsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLFdBQVcsRUFBRVIsVUFBVSxDQUFDLEVBQUVHLEdBQUcsQ0FBQztJQUN2RixDQUFDLE1BQU07TUFDTE4sU0FBUyxDQUFDTyxJQUFJLENBQUM7SUFDakI7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9mb2xkZXItaW5mby5qcz9lY2MyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RGb2xkZXJJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuSU5GT19GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3MoaW5mbyk7XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0Rm9sZGVySW5mbyIsImVyciIsImluZm8iLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJJTkZPX0ZBSUxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7217\n")},7318:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nmodule.exports = function (api, onSuccess, onFailure, target, full) {\n  api.offlineController.getManifestsListWithInfo(function (err, list) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.LIST_LOADING_FAILED), err);\n    } else {\n      onSuccess(list);\n    }\n  }, full);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMxOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUU7RUFDbEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLHdCQUF3QixDQUFDLFVBQVVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0lBQ2xFLElBQUlELEdBQUcsRUFBRTtNQUNQTCxTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxtQkFBbUIsQ0FBQyxFQUFFTCxHQUFHLENBQUM7SUFDbkYsQ0FBQyxNQUFNO01BQ0xOLFNBQVMsQ0FBQ08sSUFBSSxDQUFDO0lBQ2pCO0VBQ0YsQ0FBQyxFQUFFSixJQUFJLENBQUM7QUFDVixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9nZXQtbGlzdC13aXRoLWluZm8uanM/ZjQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIGZ1bGwpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyhmdW5jdGlvbiAoZXJyLCBsaXN0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLkxJU1RfTE9BRElOR19GQUlMRUQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3MobGlzdCk7XG4gICAgfVxuICB9LCBmdWxsKTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsImZ1bGwiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyIsImVyciIsImxpc3QiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJMSVNUX0xPQURJTkdfRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7318\n")},136:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsList(function (err, list) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.LIST_LOADING_FAILED), err);\n    } else {\n      onSuccess(list);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQU1BLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyxHQUF5QixDQUFDO0FBRXREQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFO0VBQ3BERixHQUFHLENBQUNHLGlCQUFpQixDQUFDQyxnQkFBZ0IsQ0FBQyxVQUFVQyxHQUFHLEVBQUVDLElBQUksRUFBRTtJQUMxRCxJQUFJRCxHQUFHLEVBQUU7TUFDUEgsU0FBUyxDQUFDTixXQUFXLENBQUNXLFFBQVEsQ0FBQ1gsV0FBVyxDQUFDWSxDQUFDLENBQUNDLFNBQVMsQ0FBQ0MsbUJBQW1CLENBQUMsRUFBRUwsR0FBRyxDQUFDO0lBQ25GLENBQUMsTUFBTTtNQUNMSixTQUFTLENBQUNLLElBQUksQ0FBQztJQUNqQjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL2dldC1saXN0LmpzPzNmYjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RzTGlzdChmdW5jdGlvbiAoZXJyLCBsaXN0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLkxJU1RfTE9BRElOR19GQUlMRUQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3MobGlzdCk7XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RzTGlzdCIsImVyciIsImxpc3QiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJMSVNUX0xPQURJTkdfRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///136\n")},9074:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n    } else {\n      onSuccess({\n        offlineLink: api.getOfflinePath(manifestId) + info.manifest.name,\n        persistent: info.persistent\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA3NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7RUFDeEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLGVBQWUsQ0FBQ0YsVUFBVSxFQUFFLFVBQVVHLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0lBQ3JFLElBQUlELEdBQUcsRUFBRTtNQUNQTCxTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRLENBQUMsRUFBRUwsR0FBRyxDQUFDO0lBQ3hFLENBQUMsTUFBTTtNQUNMTixTQUFTLENBQUM7UUFDUlksV0FBVyxFQUFFYixHQUFHLENBQUNjLGNBQWMsQ0FBQ1YsVUFBVSxDQUFDLEdBQUdJLElBQUksQ0FBQ08sUUFBUSxDQUFDQyxJQUFJO1FBQ2hFQyxVQUFVLEVBQUVULElBQUksQ0FBQ1M7TUFDbkIsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9nZXQtb2ZmbGluZS1saW5rLmpzP2Y0YzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuX0dFTkVSQUwpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3Moe1xuICAgICAgICBvZmZsaW5lTGluazogYXBpLmdldE9mZmxpbmVQYXRoKG1hbmlmZXN0SWQpICsgaW5mby5tYW5pZmVzdC5uYW1lLFxuICAgICAgICBwZXJzaXN0ZW50OiBpbmZvLnBlcnNpc3RlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJpbmZvIiwiZ2V0RXJyb3IiLCJlIiwiZG93bmxvYWRzIiwiX0dFTkVSQUwiLCJvZmZsaW5lTGluayIsImdldE9mZmxpbmVQYXRoIiwibWFuaWZlc3QiLCJuYW1lIiwicGVyc2lzdGVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9074\n")},589:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, full) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.INFO_FAILED, manifestId), err);\n    } else {\n      onSuccess(info);\n    }\n  }, full);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQU1BLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyxHQUF5QixDQUFDO0FBRXREQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFO0VBQzlFTCxHQUFHLENBQUNNLGlCQUFpQixDQUFDQyxlQUFlLENBQUNILFVBQVUsRUFBRSxVQUFVSSxHQUFHLEVBQUVDLElBQUksRUFBRTtJQUNyRSxJQUFJRCxHQUFHLEVBQUU7TUFDUE4sU0FBUyxDQUFDTixXQUFXLENBQUNjLFFBQVEsQ0FBQ2QsV0FBVyxDQUFDZSxDQUFDLENBQUNDLFNBQVMsQ0FBQ0MsV0FBVyxFQUFFVCxVQUFVLENBQUMsRUFBRUksR0FBRyxDQUFDO0lBQ3ZGLENBQUMsTUFBTTtNQUNMUCxTQUFTLENBQUNRLElBQUksQ0FBQztJQUNqQjtFQUNGLENBQUMsRUFBRUosSUFBSSxDQUFDO0FBQ1YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvaW5mby5qcz82ZGI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCwgZnVsbCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuSU5GT19GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3MoaW5mbyk7XG4gICAgfVxuICB9LCBmdWxsKTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJmdWxsIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJpbmZvIiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiSU5GT19GQUlMRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///589\n")},9199:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nvar STATUSES = __webpack_require__(8255);\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, results) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n    } else {\n      var promises = [];\n      var manifestIds = [];\n      if (!results.length) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_REMOVED_ALL_UNFINISHED));\n        return;\n      }\n      for (var i = 0, j = results.length; i < j; i++) {\n        var status = results[i].status;\n        var manifestId = results[i].manifestInfo.id;\n        if (status !== STATUSES.FINISHED) {\n          manifestIds.push(manifestId);\n          promises.push(api.downloadsController.removePromise(manifestId));\n        }\n      }\n      Promise.all(promises).then(function () {\n        var promises = [];\n        for (var _i = 0, _j = manifestIds.length; _i < _j; _i++) {\n          promises.push(api.offlineController.removePromise(manifestIds[_i]));\n        }\n        Promise.all(promises).then(function () {\n          api.subscribersController.unsubscribe(manifestIds);\n          api.manifestController.removeFromCache(manifestIds);\n          onSuccess(manifestIds);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n        });\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM7SUFDUjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3JlbW92ZS1hbGwtdW5maW5pc2hlZC5qcz83NzFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgU1RBVFVTRVMgPSByZXF1aXJlKFwiLi4vLi4vZG93bmxvYWRzL3N0YXR1c2VzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8oZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19BTExfVU5GSU5JU0hFRF9GQUlMRUQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICAgIGxldCBtYW5pZmVzdElkcyA9IFtdO1xuICAgICAgaWYgKCFyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuQUxSRUFEWV9SRU1PVkVEX0FMTF9VTkZJTklTSEVEKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgbGV0IHN0YXR1cyA9IHJlc3VsdHNbaV0uc3RhdHVzO1xuICAgICAgICBsZXQgbWFuaWZlc3RJZCA9IHJlc3VsdHNbaV0ubWFuaWZlc3RJbmZvLmlkO1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBTVEFUVVNFUy5GSU5JU0hFRCkge1xuICAgICAgICAgIG1hbmlmZXN0SWRzLnB1c2gobWFuaWZlc3RJZCk7XG4gICAgICAgICAgcHJvbWlzZXMucHVzaChhcGkuZG93bmxvYWRzQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWQpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gbWFuaWZlc3RJZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2goYXBpLm9mZmxpbmVDb250cm9sbGVyLnJlbW92ZVByb21pc2UobWFuaWZlc3RJZHNbaV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmUobWFuaWZlc3RJZHMpO1xuICAgICAgICAgICAgICAgICAgYXBpLm1hbmlmZXN0Q29udHJvbGxlci5yZW1vdmVGcm9tQ2FjaGUobWFuaWZlc3RJZHMpO1xuICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKG1hbmlmZXN0SWRzKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfQUxMX1VORklOSVNIRURfRkFJTEVEKSwgZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfQUxMX1VORklOSVNIRURfRkFJTEVEKSwgZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJTVEFUVVNFUyIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyIsImVyciIsInJlc3VsdHMiLCJnZXRFcnJvciIsImUiLCJkb3dubG9hZHMiLCJSRU1PVklOR19BTExfVU5GSU5JU0hFRF9GQUlMRUQiLCJwcm9taXNlcyIsIm1hbmlmZXN0SWRzIiwibGVuZ3RoIiwiQUxSRUFEWV9SRU1PVkVEX0FMTF9VTkZJTklTSEVEIiwiaSIsImoiLCJzdGF0dXMiLCJtYW5pZmVzdElkIiwibWFuaWZlc3RJbmZvIiwiaWQiLCJGSU5JU0hFRCIsInB1c2giLCJkb3dubG9hZHNDb250cm9sbGVyIiwicmVtb3ZlUHJvbWlzZSIsIlByb21pc2UiLCJhbGwiLCJ0aGVuIiwic3Vic2NyaWJlcnNDb250cm9sbGVyIiwidW5zdWJzY3JpYmUiLCJtYW5pZmVzdENvbnRyb2xsZXIiLCJyZW1vdmVGcm9tQ2FjaGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9199\n")},5058:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, manifests) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n    } else {\n      var manifestIds = manifests.map(function (manifest) {\n        return manifest.manifestInfo.id;\n      });\n      var promises = [];\n      for (var i = 0, j = manifestIds.length; i < j; i++) {\n        promises.push(api.downloadsController.removePromise(manifestIds[i]));\n      }\n      Promise.all(promises).then(function () {\n        api.offlineController.removeAllPromise().then(function () {\n          api.subscribersController.unsubscribeAll();\n          api.manifestController.removeFromCacheAll();\n          onSuccess(manifests);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n        });\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA1OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRTtFQUNwREYsR0FBRyxDQUFDRyxpQkFBaUIsQ0FBQ0Msd0JBQXdCLENBQUMsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUU7SUFDdkUsSUFBSUQsR0FBRyxFQUFFO01BQ1BILFNBQVMsQ0FBQ04sV0FBVyxDQUFDVyxRQUFRLENBQUNYLFdBQVcsQ0FBQ1ksQ0FBQyxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUFDLEVBQUVMLEdBQUcsQ0FBQztJQUNuRixDQUFDLE1BQU07TUFDTCxJQUFNTSxXQUFXLEdBQUdMLFNBQVMsQ0FBQ00sR0FBRyxDQUFDLFVBQVVDLFFBQVEsRUFBRTtRQUNwRCxPQUFPQSxRQUFRLENBQUNDLFlBQVksQ0FBQ0MsRUFBRTtNQUNqQyxDQUFDLENBQUM7TUFDRixJQUFJQyxRQUFRLEdBQUcsRUFBRTtNQUNqQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR1AsV0FBVyxDQUFDUSxNQUFNLEVBQUVGLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtRQUNsREQsUUFBUSxDQUFDSSxJQUFJLENBQUNwQixHQUFHLENBQUNxQixtQkFBbUIsQ0FBQ0MsYUFBYSxDQUFDWCxXQUFXLENBQUNNLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDdEU7TUFDQU0sT0FBTyxDQUFDQyxHQUFHLENBQUNSLFFBQVEsQ0FBQyxDQUNoQlMsSUFBSSxDQUFDLFlBQVk7UUFDaEJ6QixHQUFHLENBQUNHLGlCQUFpQixDQUFDdUIsZ0JBQWdCLEVBQUUsQ0FDbkNELElBQUksQ0FBQyxZQUFZO1VBQ2hCekIsR0FBRyxDQUFDMkIscUJBQXFCLENBQUNDLGNBQWMsRUFBRTtVQUMxQzVCLEdBQUcsQ0FBQzZCLGtCQUFrQixDQUFDQyxrQkFBa0IsRUFBRTtVQUMzQzdCLFNBQVMsQ0FBQ0ssU0FBUyxDQUFDO1FBQ3RCLENBQUMsRUFBRSxVQUFVRCxHQUFHLEVBQUU7VUFDaEJILFNBQVMsQ0FBQ04sV0FBVyxDQUFDVyxRQUFRLENBQUNYLFdBQVcsQ0FBQ1ksQ0FBQyxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUFDLEVBQUVMLEdBQUcsQ0FBQztRQUNuRixDQUFDLENBQUM7TUFDUixDQUFDLEVBQUUsVUFBVUEsR0FBRyxFQUFFO1FBQ2hCSCxTQUFTLENBQUNOLFdBQVcsQ0FBQ1csUUFBUSxDQUFDWCxXQUFXLENBQUNZLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxtQkFBbUIsQ0FBQyxFQUFFTCxHQUFHLENBQUM7TUFDbkYsQ0FBQyxDQUFDO0lBQ1I7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9yZW1vdmUtYWxsLmpzP2Y2NWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvKGZ1bmN0aW9uIChlcnIsIG1hbmlmZXN0cykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19BTExfRkFJTEVEKSwgZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWFuaWZlc3RJZHMgPSBtYW5pZmVzdHMubWFwKGZ1bmN0aW9uIChtYW5pZmVzdCkge1xuICAgICAgICByZXR1cm4gbWFuaWZlc3QubWFuaWZlc3RJbmZvLmlkO1xuICAgICAgfSk7XG4gICAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gbWFuaWZlc3RJZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIHByb21pc2VzLnB1c2goYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIucmVtb3ZlUHJvbWlzZShtYW5pZmVzdElkc1tpXSkpO1xuICAgICAgfVxuICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXBpLm9mZmxpbmVDb250cm9sbGVyLnJlbW92ZUFsbFByb21pc2UoKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmVBbGwoKTtcbiAgICAgICAgICAgICAgICAgIGFwaS5tYW5pZmVzdENvbnRyb2xsZXIucmVtb3ZlRnJvbUNhY2hlQWxsKCk7XG4gICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MobWFuaWZlc3RzKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfQUxMX0ZBSUxFRCksIGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlJFTU9WSU5HX0FMTF9GQUlMRUQpLCBlcnIpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyIsImVyciIsIm1hbmlmZXN0cyIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIlJFTU9WSU5HX0FMTF9GQUlMRUQiLCJtYW5pZmVzdElkcyIsIm1hcCIsIm1hbmlmZXN0IiwibWFuaWZlc3RJbmZvIiwiaWQiLCJwcm9taXNlcyIsImkiLCJqIiwibGVuZ3RoIiwicHVzaCIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJyZW1vdmVQcm9taXNlIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJyZW1vdmVBbGxQcm9taXNlIiwic3Vic2NyaWJlcnNDb250cm9sbGVyIiwidW5zdWJzY3JpYmVBbGwiLCJtYW5pZmVzdENvbnRyb2xsZXIiLCJyZW1vdmVGcm9tQ2FjaGVBbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5058\n")},7552:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar appSettings = __webpack_require__(9277);\nvar translation = __webpack_require__(817);\nvar removeDir = __webpack_require__(6951);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var file = appSettings.getSettings().settingsFolder + manifestId + "/" + appSettings.getSettings().stores.PERSISTENT + ".json";\n      removeDir(file, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_PERSISTENT_FAILED, manifestId), err);\n        } else {\n          onSuccess(info);\n        }\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU1Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBb0IsQ0FBQztBQUNqRCxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUN0RCxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsSUFBdUIsQ0FBQztBQUVsREcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7RUFDeEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLGVBQWUsQ0FBQ0YsVUFBVSxFQUFFLFVBQVVHLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0lBQ3JFLElBQUlELEdBQUcsRUFBRTtNQUNQTCxTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLEVBQUVSLFVBQVUsQ0FBQyxFQUFFRyxHQUFHLENBQUM7SUFDckYsQ0FBQyxNQUFNO01BQ0wsSUFBTU0sSUFBSSxHQUFHbkIsV0FBVyxDQUFDb0IsV0FBVyxFQUFFLENBQUNDLGNBQWMsR0FBR1gsVUFBVSxHQUFHLEdBQUcsR0FBR1YsV0FBVyxDQUFDb0IsV0FBVyxFQUFFLENBQUNFLE1BQU0sQ0FBQ0MsVUFBVSxHQUFHLE9BQU87TUFFaElwQixTQUFTLENBQUNnQixJQUFJLEVBQUUsVUFBVU4sR0FBRyxFQUFFO1FBQzdCLElBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDVyxJQUFJLEtBQUssUUFBUSxFQUFFO1VBQ2hDaEIsU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVEsQ0FBQ2IsV0FBVyxDQUFDYyxDQUFDLENBQUNTLFNBQVMsQ0FBQ0MsMEJBQTBCLEVBQUVoQixVQUFVLENBQUMsRUFBRUcsR0FBRyxDQUFDO1FBQ3RHLENBQUMsTUFBTTtVQUNMTixTQUFTLENBQUNPLElBQUksQ0FBQztRQUNqQjtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxDQUFDO0FBRUosQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvcmVtb3ZlLXBlcnNpc3RlbnQuanM/Nzc1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGFwcFNldHRpbmdzID0gcmVxdWlyZSgnLi4vLi4vYXBwLXNldHRpbmdzJyk7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5jb25zdCByZW1vdmVEaXIgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9yZW1vdmUtZGlyXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyLCBpbmZvKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLk5PVF9GT1VORCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZpbGUgPSBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnNldHRpbmdzRm9sZGVyICsgbWFuaWZlc3RJZCArIFwiL1wiICsgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9yZXMuUEVSU0lTVEVOVCArIFwiLmpzb25cIjtcblxuICAgICAgcmVtb3ZlRGlyKGZpbGUsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciAmJiBlcnIuY29kZSAhPT0gXCJFTk9FTlRcIikge1xuICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19QRVJTSVNURU5UX0ZBSUxFRCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25TdWNjZXNzKGluZm8pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG59O1xuIl0sIm5hbWVzIjpbImFwcFNldHRpbmdzIiwicmVxdWlyZSIsInRyYW5zbGF0aW9uIiwicmVtb3ZlRGlyIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0SW5mbyIsImVyciIsImluZm8iLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJOT1RfRk9VTkQiLCJmaWxlIiwiZ2V0U2V0dGluZ3MiLCJzZXR0aW5nc0ZvbGRlciIsInN0b3JlcyIsIlBFUlNJU1RFTlQiLCJjb2RlIiwiZG93bmxvYWRzIiwiUkVNT1ZJTkdfUEVSU0lTVEVOVF9GQUlMRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7552\n')},6128:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    api.downloadsController.removePromise(manifestId).then(function () {\n      api.offlineController.removePromise(manifestId).then(function () {\n        api.subscribersController.unsubscribe(manifestId);\n        api.manifestController.removeFromCache(manifestId);\n        onSuccess(info);\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_FAILED, manifestId), err);\n      });\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_FAILED, manifestId), err);\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEyOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7RUFDeEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLGVBQWUsQ0FBQ0YsVUFBVSxFQUFFLFVBQVVHLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0lBQ3JFUixHQUFHLENBQUNTLG1CQUFtQixDQUFDQyxhQUFhLENBQUNOLFVBQVUsQ0FBQyxDQUM1Q08sSUFBSSxDQUFDLFlBQVk7TUFDaEJYLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNLLGFBQWEsQ0FBQ04sVUFBVSxDQUFDLENBQzFDTyxJQUFJLENBQUMsWUFBWTtRQUNoQlgsR0FBRyxDQUFDWSxxQkFBcUIsQ0FBQ0MsV0FBVyxDQUFDVCxVQUFVLENBQUM7UUFDakRKLEdBQUcsQ0FBQ2Msa0JBQWtCLENBQUNDLGVBQWUsQ0FBQ1gsVUFBVSxDQUFDO1FBQ2xESCxTQUFTLENBQUNPLElBQUksQ0FBQztNQUNqQixDQUFDLEVBQUUsVUFBVUQsR0FBRyxFQUFFO1FBQ2hCTCxTQUFTLENBQUNOLFdBQVcsQ0FBQ29CLFFBQVEsQ0FBQ3BCLFdBQVcsQ0FBQ3FCLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxlQUFlLEVBQUVmLFVBQVUsQ0FBQyxFQUFFRyxHQUFHLENBQUM7TUFDM0YsQ0FBQyxDQUFDO0lBQ1IsQ0FBQyxFQUFFLFVBQVVBLEdBQUcsRUFBRTtNQUNoQkwsU0FBUyxDQUFDTixXQUFXLENBQUNvQixRQUFRLENBQUNwQixXQUFXLENBQUNxQixDQUFDLENBQUNDLFNBQVMsQ0FBQ0MsZUFBZSxFQUFFZixVQUFVLENBQUMsRUFBRUcsR0FBRyxDQUFDO0lBQzNGLENBQUMsQ0FBQztFQUNSLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3JlbW92ZS5qcz80M2E1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBhcGkuZG93bmxvYWRzQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhcGkub2ZmbGluZUNvbnRyb2xsZXIucmVtb3ZlUHJvbWlzZShtYW5pZmVzdElkKVxuICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci51bnN1YnNjcmliZShtYW5pZmVzdElkKTtcbiAgICAgICAgICAgICAgICBhcGkubWFuaWZlc3RDb250cm9sbGVyLnJlbW92ZUZyb21DYWNoZShtYW5pZmVzdElkKTtcbiAgICAgICAgICAgICAgICBvblN1Y2Nlc3MoaW5mbyk7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfRkFJTEVELCBtYW5pZmVzdElkKSwgZXJyKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfRkFJTEVELCBtYW5pZmVzdElkKSwgZXJyKTtcbiAgICAgICAgfSk7XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RJbmZvIiwiZXJyIiwiaW5mbyIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJyZW1vdmVQcm9taXNlIiwidGhlbiIsInN1YnNjcmliZXJzQ29udHJvbGxlciIsInVuc3Vic2NyaWJlIiwibWFuaWZlc3RDb250cm9sbGVyIiwicmVtb3ZlRnJvbUNhY2hlIiwiZ2V0RXJyb3IiLCJlIiwiZG93bmxvYWRzIiwiUkVNT1ZJTkdfRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6128\n")},7560:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, representations) {\n  api.downloadsController.resume(manifestId, representations, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU2MC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLGVBQWUsRUFBRTtFQUN6RkwsR0FBRyxDQUFDTSxtQkFBbUIsQ0FBQ0MsTUFBTSxDQUFDSCxVQUFVLEVBQUVDLGVBQWUsRUFBRUosU0FBUyxFQUFFQyxTQUFTLENBQUM7QUFDbkYsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvcmVzdW1lLmpzPzgzODkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCwgcmVwcmVzZW50YXRpb25zKSB7XG4gIGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnJlc3VtZShtYW5pZmVzdElkLCByZXByZXNlbnRhdGlvbnMsIG9uU3VjY2Vzcywgb25GYWlsdXJlKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJyZXByZXNlbnRhdGlvbnMiLCJkb3dubG9hZHNDb250cm9sbGVyIiwicmVzdW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7560\n")},9463:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar appSettings = __webpack_require__(9277);\nvar translation = __webpack_require__(817);\nvar FlushItem = __webpack_require__(1789);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, data) {\n  api.offlineController.getManifestInfo(manifestId, function (err) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.DATA, data);\n      flushItem.save().then(function () {\n        onSuccess();\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.SAVING_DATA_FAILED, manifestId), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ2My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBb0IsQ0FBQztBQUNqRCxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUN0RCxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsSUFBNEIsQ0FBQztBQUV2REcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLElBQUksRUFBRTtFQUM5RUwsR0FBRyxDQUFDTSxpQkFBaUIsQ0FBQ0MsZUFBZSxDQUFDSCxVQUFVLEVBQUUsVUFBVUksR0FBRyxFQUFFO0lBQy9ELElBQUlBLEdBQUcsRUFBRTtNQUNQTixTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLEVBQUVSLFVBQVUsQ0FBQyxFQUFFSSxHQUFHLENBQUM7SUFDckYsQ0FBQyxNQUFNO01BQ0wsSUFBTUssU0FBUyxHQUFHLElBQUloQixTQUFTLENBQUNPLFVBQVUsRUFBRVYsV0FBVyxDQUFDb0IsV0FBVyxFQUFFLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxFQUFFWCxJQUFJLENBQUM7TUFDeEZRLFNBQVMsQ0FBQ0ksSUFBSSxFQUFFLENBQ2JDLElBQUksQ0FBQyxZQUFZO1FBQ2hCakIsU0FBUyxFQUFFO01BQ2IsQ0FBQyxFQUFFLFVBQVVPLEdBQUcsRUFBRTtRQUNoQk4sU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVEsQ0FBQ2IsV0FBVyxDQUFDYyxDQUFDLENBQUNTLFNBQVMsQ0FBQ0Msa0JBQWtCLEVBQUVoQixVQUFVLENBQUMsRUFBRUksR0FBRyxDQUFDO01BQzlGLENBQUMsQ0FBQztJQUNOO0VBQ0YsQ0FBQyxDQUFDO0FBRUosQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc2F2ZS1kYXRhLmpzPzgwYjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uLy4uL2FwcC1zZXR0aW5ncycpO1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgRmx1c2hJdGVtID0gcmVxdWlyZShcIi4uLy4uL2Rvd25sb2Fkcy9mbHVzaC1pdGVtXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQsIGRhdGEpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLk5PVF9GT1VORCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZsdXNoSXRlbSA9IG5ldyBGbHVzaEl0ZW0obWFuaWZlc3RJZCwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9yZXMuREFUQSwgZGF0YSk7XG4gICAgICBmbHVzaEl0ZW0uc2F2ZSgpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvblN1Y2Nlc3MoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5TQVZJTkdfREFUQV9GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG59O1xuIl0sIm5hbWVzIjpbImFwcFNldHRpbmdzIiwicmVxdWlyZSIsInRyYW5zbGF0aW9uIiwiRmx1c2hJdGVtIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJkYXRhIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJOT1RfRk9VTkQiLCJmbHVzaEl0ZW0iLCJnZXRTZXR0aW5ncyIsInN0b3JlcyIsIkRBVEEiLCJzYXZlIiwidGhlbiIsImRvd25sb2FkcyIsIlNBVklOR19EQVRBX0ZBSUxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9463\n")},3880:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar appSettings = __webpack_require__(9277);\nvar translation = __webpack_require__(817);\nvar FlushItem = __webpack_require__(1789);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, persistent) {\n  api.offlineController.getManifestInfo(manifestId, function (err) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.PERSISTENT, persistent);\n      flushItem.save().then(function () {\n        onSuccess();\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.SAVING_PERSISTENT_FAILED, manifestId), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg4MC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBb0IsQ0FBQztBQUNqRCxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUN0RCxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsSUFBNEIsQ0FBQztBQUV2REcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRTtFQUNwRkwsR0FBRyxDQUFDTSxpQkFBaUIsQ0FBQ0MsZUFBZSxDQUFDSCxVQUFVLEVBQUUsVUFBVUksR0FBRyxFQUFFO0lBQy9ELElBQUlBLEdBQUcsRUFBRTtNQUNQTixTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLEVBQUVSLFVBQVUsQ0FBQyxFQUFFSSxHQUFHLENBQUM7SUFDckYsQ0FBQyxNQUFNO01BQ0wsSUFBTUssU0FBUyxHQUFHLElBQUloQixTQUFTLENBQUNPLFVBQVUsRUFBRVYsV0FBVyxDQUFDb0IsV0FBVyxFQUFFLENBQUNDLE1BQU0sQ0FBQ0MsVUFBVSxFQUFFWCxVQUFVLENBQUM7TUFDcEdRLFNBQVMsQ0FBQ0ksSUFBSSxFQUFFLENBQ1hDLElBQUksQ0FBQyxZQUFZO1FBQ2hCakIsU0FBUyxFQUFFO01BQ2IsQ0FBQyxFQUFFLFVBQVVPLEdBQUcsRUFBRTtRQUNoQk4sU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVEsQ0FBQ2IsV0FBVyxDQUFDYyxDQUFDLENBQUNTLFNBQVMsQ0FBQ0Msd0JBQXdCLEVBQUVoQixVQUFVLENBQUMsRUFBRUksR0FBRyxDQUFDO01BQ3BHLENBQUMsQ0FBQztJQUNSO0VBQ0YsQ0FBQyxDQUFDO0FBRUosQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc2F2ZS1wZXJzaXN0ZW50LmpzPzcyNTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uLy4uL2FwcC1zZXR0aW5ncycpO1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgRmx1c2hJdGVtID0gcmVxdWlyZShcIi4uLy4uL2Rvd25sb2Fkcy9mbHVzaC1pdGVtXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQsIHBlcnNpc3RlbnQpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLk5PVF9GT1VORCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZsdXNoSXRlbSA9IG5ldyBGbHVzaEl0ZW0obWFuaWZlc3RJZCwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9yZXMuUEVSU0lTVEVOVCwgcGVyc2lzdGVudCk7XG4gICAgICBmbHVzaEl0ZW0uc2F2ZSgpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb25TdWNjZXNzKCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlNBVklOR19QRVJTSVNURU5UX0ZBSUxFRCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxufTtcbiJdLCJuYW1lcyI6WyJhcHBTZXR0aW5ncyIsInJlcXVpcmUiLCJ0cmFuc2xhdGlvbiIsIkZsdXNoSXRlbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwicGVyc2lzdGVudCIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RJbmZvIiwiZXJyIiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiTk9UX0ZPVU5EIiwiZmx1c2hJdGVtIiwiZ2V0U2V0dGluZ3MiLCJzdG9yZXMiLCJQRVJTSVNURU5UIiwic2F2ZSIsInRoZW4iLCJkb3dubG9hZHMiLCJTQVZJTkdfUEVSU0lTVEVOVF9GQUlMRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3880\n")},1792:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nvar canCreateManifest = __webpack_require__(5079);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, representations, downloadFolder) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n  if (!manifest) {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n    return;\n  }\n  function start() {\n    api.downloadsController.storage.getItem(manifestId).then(function (result) {\n      if (result) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STARTED, manifestId));\n      } else {\n        api.downloadsController.start(manifestId, representations, downloadFolder, onSuccess, function (err) {\n          onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n        });\n      }\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n    });\n  }\n  canCreateManifest(manifestId, downloadFolder).then(function () {\n    start();\n  }, function (errors) {\n    errors = errors || [];\n    var movieFolderError = errors[1];\n    if (errors.length) {\n      if (movieFolderError) {\n        // if movie folder has been already created the we can't start as it might be either different folder\n        // or simply the resume should be used\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, manifestId));\n        return;\n      }\n    }\n    // if manifest exists physically on drive that means something is wrong and can't start the manifest\n    // the manifest is saved in method start so this cannot be overwritten here\n    api.offlineController.getManifestDataFile(manifestId, function (data) {\n      if (data) {\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, manifestId));\n      } else {\n        start();\n      }\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b2RzL2Rvd25sb2Fkcy9zdGFydC5qcz8yZDdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoXCIuLi8uLi90cmFuc2xhdGlvbi9pbmRleFwiKTtcbmNvbnN0IGNhbkNyZWF0ZU1hbmlmZXN0ID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvY2FuLWNyZWF0ZS1tYW5pZmVzdFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkLCByZXByZXNlbnRhdGlvbnMsIGRvd25sb2FkRm9sZGVyKSB7XG4gIGNvbnN0IG1hbmlmZXN0ID0gYXBpLm1hbmlmZXN0Q29udHJvbGxlci5nZXRNYW5pZmVzdEJ5SWQobWFuaWZlc3RJZCk7XG4gIGlmICghbWFuaWZlc3QpIHtcbiAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTk9UX0ZPVU5ELCBtYW5pZmVzdElkKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQgKCkge1xuICAgIGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnN0b3JhZ2UuZ2V0SXRlbShtYW5pZmVzdElkKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLkFMUkVBRFlfU1RBUlRFRCwgbWFuaWZlc3RJZCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIuc3RhcnQobWFuaWZlc3RJZCwgcmVwcmVzZW50YXRpb25zLCBkb3dubG9hZEZvbGRlciwgb25TdWNjZXNzLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLl9HRU5FUkFMKSwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLl9HRU5FUkFMKSwgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNhbkNyZWF0ZU1hbmlmZXN0KG1hbmlmZXN0SWQsIGRvd25sb2FkRm9sZGVyKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICBzdGFydCgpO1xuICB9LCBmdW5jdGlvbiAoZXJyb3JzKSB7XG4gICAgZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgIHZhciBtb3ZpZUZvbGRlckVycm9yID0gZXJyb3JzWzFdO1xuICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICBpZiAobW92aWVGb2xkZXJFcnJvcikge1xuICAgICAgICAvLyBpZiBtb3ZpZSBmb2xkZXIgaGFzIGJlZW4gYWxyZWFkeSBjcmVhdGVkIHRoZSB3ZSBjYW4ndCBzdGFydCBhcyBpdCBtaWdodCBiZSBlaXRoZXIgZGlmZmVyZW50IGZvbGRlclxuICAgICAgICAvLyBvciBzaW1wbHkgdGhlIHJlc3VtZSBzaG91bGQgYmUgdXNlZFxuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuRk9MREVSX0FMUkVBRFlfRVhJU1RTLCBtYW5pZmVzdElkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gaWYgbWFuaWZlc3QgZXhpc3RzIHBoeXNpY2FsbHkgb24gZHJpdmUgdGhhdCBtZWFucyBzb21ldGhpbmcgaXMgd3JvbmcgYW5kIGNhbid0IHN0YXJ0IHRoZSBtYW5pZmVzdFxuICAgIC8vIHRoZSBtYW5pZmVzdCBpcyBzYXZlZCBpbiBtZXRob2Qgc3RhcnQgc28gdGhpcyBjYW5ub3QgYmUgb3ZlcndyaXR0ZW4gaGVyZVxuICAgIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdERhdGFGaWxlKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuRk9MREVSX0FMUkVBRFlfRVhJU1RTLCBtYW5pZmVzdElkKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxufTtcbiJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJjYW5DcmVhdGVNYW5pZmVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwicmVwcmVzZW50YXRpb25zIiwiZG93bmxvYWRGb2xkZXIiLCJtYW5pZmVzdCIsIm1hbmlmZXN0Q29udHJvbGxlciIsImdldE1hbmlmZXN0QnlJZCIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIk5PVF9GT1VORCIsInN0YXJ0IiwiZG93bmxvYWRzQ29udHJvbGxlciIsInN0b3JhZ2UiLCJnZXRJdGVtIiwidGhlbiIsInJlc3VsdCIsImRvd25sb2FkcyIsIkFMUkVBRFlfU1RBUlRFRCIsImVyciIsIl9HRU5FUkFMIiwiZXJyb3JzIiwibW92aWVGb2xkZXJFcnJvciIsImxlbmd0aCIsIkZPTERFUl9BTFJFQURZX0VYSVNUUyIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3REYXRhRmlsZSIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1792\n")},1120:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nvar STATUSES = __webpack_require__(8255);\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, results) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.STOPPING_ALL_FAILED), err);\n    } else {\n      var promises = [];\n      var manifestIds = [];\n      for (var i = 0, j = results.length; i < j; i++) {\n        var status = results[i].status;\n        var manifestId = results[i].manifestInfo.id;\n        if (status !== STATUSES.FINISHED) {\n          manifestIds.push(manifestId);\n          promises.push(api.downloadsController.stopPromise(manifestId, true));\n        }\n      }\n      if (manifestIds.length > 0) {\n        Promise.all(promises).then(function () {\n          onSuccess(manifestIds);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.STOPPING_ALL_FAILED), err);\n        });\n      } else {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STOPPED_ALL));\n      }\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyMC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUN0RCxJQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUVwREUsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRTtFQUNwREYsR0FBRyxDQUFDRyxpQkFBaUIsQ0FBQ0Msd0JBQXdCLENBQUMsVUFBVUMsR0FBRyxFQUFFQyxPQUFPLEVBQUU7SUFDckUsSUFBSUQsR0FBRyxFQUFFO01BQ1BILFNBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFRLENBQUNaLFdBQVcsQ0FBQ2EsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUFDLEVBQUVMLEdBQUcsQ0FBQztJQUNuRixDQUFDLE1BQU07TUFDTCxJQUFJTSxRQUFRLEdBQUcsRUFBRTtNQUNqQixJQUFJQyxXQUFXLEdBQUcsRUFBRTtNQUNwQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR1IsT0FBTyxDQUFDUyxNQUFNLEVBQUVGLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtRQUM5QyxJQUFJRyxNQUFNLEdBQUdWLE9BQU8sQ0FBQ08sQ0FBQyxDQUFDLENBQUNHLE1BQU07UUFDOUIsSUFBSUMsVUFBVSxHQUFHWCxPQUFPLENBQUNPLENBQUMsQ0FBQyxDQUFDSyxZQUFZLENBQUNDLEVBQUU7UUFDM0MsSUFBSUgsTUFBTSxLQUFLbkIsUUFBUSxDQUFDdUIsUUFBUSxFQUFFO1VBQ2hDUixXQUFXLENBQUNTLElBQUksQ0FBQ0osVUFBVSxDQUFDO1VBQzVCTixRQUFRLENBQUNVLElBQUksQ0FBQ3JCLEdBQUcsQ0FBQ3NCLG1CQUFtQixDQUFDQyxXQUFXLENBQUNOLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RTtNQUNGO01BQ0EsSUFBSUwsV0FBVyxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzFCUyxPQUFPLENBQUNDLEdBQUcsQ0FBQ2QsUUFBUSxDQUFDLENBQ2hCZSxJQUFJLENBQUMsWUFBWTtVQUNoQnpCLFNBQVMsQ0FBQ1csV0FBVyxDQUFDO1FBQ3hCLENBQUMsRUFBRSxVQUFVUCxHQUFHLEVBQUU7VUFDaEJILFNBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFRLENBQUNaLFdBQVcsQ0FBQ2EsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUFDLEVBQUVMLEdBQUcsQ0FBQztRQUNuRixDQUFDLENBQUM7TUFDUixDQUFDLE1BQU07UUFDTEgsU0FBUyxDQUFDUCxXQUFXLENBQUNZLFFBQVEsQ0FBQ1osV0FBVyxDQUFDYSxDQUFDLENBQUNDLFNBQVMsQ0FBQ2tCLG1CQUFtQixDQUFDLENBQUM7TUFDOUU7SUFDRjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3N0b3AtYWxsLmpzPzc3MGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcbmNvbnN0IFNUQVRVU0VTID0gcmVxdWlyZShcIi4uLy4uL2Rvd25sb2Fkcy9zdGF0dXNlc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvKGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuU1RPUFBJTkdfQUxMX0ZBSUxFRCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgbGV0IG1hbmlmZXN0SWRzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMCwgaiA9IHJlc3VsdHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIGxldCBzdGF0dXMgPSByZXN1bHRzW2ldLnN0YXR1cztcbiAgICAgICAgbGV0IG1hbmlmZXN0SWQgPSByZXN1bHRzW2ldLm1hbmlmZXN0SW5mby5pZDtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gU1RBVFVTRVMuRklOSVNIRUQpIHtcbiAgICAgICAgICBtYW5pZmVzdElkcy5wdXNoKG1hbmlmZXN0SWQpO1xuICAgICAgICAgIHByb21pc2VzLnB1c2goYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIuc3RvcFByb21pc2UobWFuaWZlc3RJZCwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWFuaWZlc3RJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgb25TdWNjZXNzKG1hbmlmZXN0SWRzKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlNUT1BQSU5HX0FMTF9GQUlMRUQpLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuQUxSRUFEWV9TVE9QUEVEX0FMTCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIlNUQVRVU0VTIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvIiwiZXJyIiwicmVzdWx0cyIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIlNUT1BQSU5HX0FMTF9GQUlMRUQiLCJwcm9taXNlcyIsIm1hbmlmZXN0SWRzIiwiaSIsImoiLCJsZW5ndGgiLCJzdGF0dXMiLCJtYW5pZmVzdElkIiwibWFuaWZlc3RJbmZvIiwiaWQiLCJGSU5JU0hFRCIsInB1c2giLCJkb3dubG9hZHNDb250cm9sbGVyIiwic3RvcFByb21pc2UiLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsIkFMUkVBRFlfU1RPUFBFRF9BTEwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1120\n")},647:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.downloadsController.stop(manifestId, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRTtFQUN4RUosR0FBRyxDQUFDSyxtQkFBbUIsQ0FBQ0MsSUFBSSxDQUFDRixVQUFVLEVBQUVILFNBQVMsRUFBRUMsU0FBUyxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3N0b3AuanM/MzQ2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkKSB7XG4gIGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnN0b3AobWFuaWZlc3RJZCwgb25TdWNjZXNzLCBvbkZhaWx1cmUpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJzdG9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///647\n")},608:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nvar Subscriber = __webpack_require__(6137);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestIds, timeout) {\n  if (typeof manifestIds === 'string') {\n    subscribeSingle(api, onSuccess, onFailure, target, manifestIds, timeout);\n  } else {\n    subscribeMany(api, onSuccess, onFailure, target, manifestIds, timeout);\n  }\n};\nfunction subscribeMany(api, onSuccess, onFailure, target, manifestIds, timeout) {\n  var subscriber1, subscriber2, subscribersId;\n  var manifestId = manifestIds.sort().join(',');\n  subscribersId = [];\n  // callbackOnProgress\n  subscriber1 = new Subscriber(function () {\n    return api.downloadsController.downloadStats.getStats(manifestIds);\n  }, api.processSubscriber, target, manifestId, timeout);\n  subscribersId.push(api.subscribersController.addSubscriber(subscriber1));\n\n  // callbackOnFinish\n  subscriber2 = new Subscriber(function () {\n    var result = true;\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      result = result && api.downloadsController.isDownloadFinishedAndSynced(manifestIds[i]);\n    }\n    return result;\n  }, api.processSubscriber, target, manifestId, timeout, true);\n  subscriber2.onFinish(function (callback) {\n    subscriber1.remove();\n    var items = [];\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      items.push(api.offlineController.getManifestInfoPromise(manifestIds[i]));\n    }\n    Promise.all(items).then(function (results) {\n      callback(null, results);\n    }, function (err) {\n      callback(err);\n    });\n  });\n  subscribersId.push(api.subscribersController.addSubscriber(subscriber2));\n  onSuccess(null, subscribersId);\n}\nfunction subscribeSingle(api, onSuccess, onFailure, target, manifestId, timeout) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n  var subscriber1, subscriber2, subscribersId;\n  if (manifest) {\n    subscribersId = [];\n\n    // callbackOnProgress\n    subscriber1 = new Subscriber(function () {\n      return api.downloadsController.downloadStats.getStats(manifestId);\n    }, api.processSubscriber, target, manifestId, timeout);\n    subscribersId.push(api.subscribersController.addSubscriber(subscriber1));\n\n    // callbackOnFinish\n    subscriber2 = new Subscriber(function () {\n      return api.downloadsController.isDownloadFinishedAndSynced(manifestId);\n    }, api.processSubscriber, target, manifestId, timeout, true);\n    subscriber2.onFinish(function (callback) {\n      subscriber1.remove();\n      api.offlineController.getManifestInfo(manifestId, function (err, result) {\n        callback(err, result);\n      });\n    });\n    subscribersId.push(api.subscribersController.addSubscriber(subscriber2));\n    onSuccess(manifest.getJsonInfo(), subscribersId);\n  } else {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///608\n")},6439:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestIds) {\n  if (typeof manifestIds === 'string') {\n    unsubscribeSingle(api, onSuccess, onFailure, target, manifestIds);\n  } else {\n    api.subscribersController.unsubscribe(manifestIds);\n    api.subscribersController.unsubscribe(manifestIds.sort().join(','));\n  }\n};\nfunction unsubscribeSingle(api, onSuccess, onFailure, target, manifestId) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n  if (manifest) {\n    api.subscribersController.unsubscribe(manifestId);\n    onSuccess();\n  } else {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQzOS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUU7RUFDekUsSUFBSSxPQUFPQSxXQUFXLEtBQUssUUFBUSxFQUFFO0lBQ25DQyxpQkFBaUIsQ0FBQ0wsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxXQUFXLENBQUM7RUFDbkUsQ0FBQyxNQUFNO0lBQ0xKLEdBQUcsQ0FBQ00scUJBQXFCLENBQUNDLFdBQVcsQ0FBQ0gsV0FBVyxDQUFDO0lBQ2xESixHQUFHLENBQUNNLHFCQUFxQixDQUFDQyxXQUFXLENBQUNILFdBQVcsQ0FBQ0ksSUFBSSxFQUFFLENBQUNDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNyRTtBQUNGLENBQUM7QUFFRCxTQUFTSixpQkFBaUIsQ0FBRUwsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFTyxVQUFVLEVBQUU7RUFDekUsSUFBTUMsUUFBUSxHQUFHWCxHQUFHLENBQUNZLGtCQUFrQixDQUFDQyxlQUFlLENBQUNILFVBQVUsQ0FBQztFQUNuRSxJQUFJQyxRQUFRLEVBQUU7SUFDWlgsR0FBRyxDQUFDTSxxQkFBcUIsQ0FBQ0MsV0FBVyxDQUFDRyxVQUFVLENBQUM7SUFDakRULFNBQVMsRUFBRTtFQUNiLENBQUMsTUFBTTtJQUNMQyxTQUFTLENBQUNOLFdBQVcsQ0FBQ2tCLFFBQVEsQ0FBQ2xCLFdBQVcsQ0FBQ21CLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLEVBQUVQLFVBQVUsQ0FBQyxDQUFDO0VBQ2hGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3Vuc3Vic2NyaWJlLmpzPzJkODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkcykge1xuICBpZiAodHlwZW9mIG1hbmlmZXN0SWRzID09PSAnc3RyaW5nJykge1xuICAgIHVuc3Vic2NyaWJlU2luZ2xlKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZHMpO1xuICB9IGVsc2Uge1xuICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmUobWFuaWZlc3RJZHMpO1xuICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmUobWFuaWZlc3RJZHMuc29ydCgpLmpvaW4oJywnKSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVuc3Vic2NyaWJlU2luZ2xlIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQpIHtcbiAgY29uc3QgbWFuaWZlc3QgPSBhcGkubWFuaWZlc3RDb250cm9sbGVyLmdldE1hbmlmZXN0QnlJZChtYW5pZmVzdElkKTtcbiAgaWYgKG1hbmlmZXN0KSB7XG4gICAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci51bnN1YnNjcmliZShtYW5pZmVzdElkKTtcbiAgICBvblN1Y2Nlc3MoKTtcbiAgfSBlbHNlIHtcbiAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTk9UX0ZPVU5ELCBtYW5pZmVzdElkKSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZHMiLCJ1bnN1YnNjcmliZVNpbmdsZSIsInN1YnNjcmliZXJzQ29udHJvbGxlciIsInVuc3Vic2NyaWJlIiwic29ydCIsImpvaW4iLCJtYW5pZmVzdElkIiwibWFuaWZlc3QiLCJtYW5pZmVzdENvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEJ5SWQiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJOT1RfRk9VTkQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6439\n")},1052:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, downloadFolder) {\n  api.downloadsController.updateDownloadFolder(manifestId, downloadFolder, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLGNBQWMsRUFBRTtFQUN4RkwsR0FBRyxDQUFDTSxtQkFBbUIsQ0FBQ0Msb0JBQW9CLENBQUNILFVBQVUsRUFBRUMsY0FBYyxFQUFFSixTQUFTLEVBQUVDLFNBQVMsQ0FBQztBQUNoRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy91cGRhdGUtZG93bmxvYWQtZm9sZGVyLmpzPzMyM2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCwgZG93bmxvYWRGb2xkZXIpIHtcbiAgYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIudXBkYXRlRG93bmxvYWRGb2xkZXIobWFuaWZlc3RJZCwgZG93bmxvYWRGb2xkZXIsIG9uU3VjY2Vzcywgb25GYWlsdXJlKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJkb3dubG9hZEZvbGRlciIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJ1cGRhdGVEb3dubG9hZEZvbGRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1052\n")},8105:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, subscribers) {\n  api.subscribersController.removeSubscribersById(subscribers);\n  onSuccess();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEwNS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUU7RUFDekVKLEdBQUcsQ0FBQ0sscUJBQXFCLENBQUNDLHFCQUFxQixDQUFDRixXQUFXLENBQUM7RUFDNURILFNBQVMsRUFBRTtBQUNiLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvcmVtb3ZlLXN1YnNjcmliZXJzLmpzPzUzM2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgc3Vic2NyaWJlcnMpIHtcbiAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci5yZW1vdmVTdWJzY3JpYmVyc0J5SWQoc3Vic2NyaWJlcnMpO1xuICBvblN1Y2Nlc3MoKTtcbn07XG5cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0Iiwic3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVyc0NvbnRyb2xsZXIiLCJyZW1vdmVTdWJzY3JpYmVyc0J5SWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8105\n")},6953:module=>{"use strict";eval("\n\nmodule.exports = {\n  regexpProtocolRemove: /^https{0,1}\\:\\/\\//i\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk1My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsb0JBQW9CLEVBQUU7QUFDeEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvY29uc3RhbnRzLmpzP2Q5OWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWdleHBQcm90b2NvbFJlbW92ZTogL15odHRwc3swLDF9XFw6XFwvXFwvL2lcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlZ2V4cFByb3RvY29sUmVtb3ZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6953\n")},4612:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(4952);\nvar mkdirpPromise = __webpack_require__(5380);\nvar appSettings = __webpack_require__(9277);\nvar translation = __webpack_require__(817);\nvar Download = __webpack_require__(8158);\nvar DownloadsStorageController = __webpack_require__(2381);\nvar downloadUtil = __webpack_require__(957);\nvar DownloadStats = __webpack_require__(2197);\nvar STATUSES = __webpack_require__(8255);\nvar CODES = __webpack_require__(6999);\nvar constants = __webpack_require__(6953);\nvar utilUrl = __webpack_require__(8279);\nvar path = __webpack_require__(1017);\nvar ReadItem = __webpack_require__(3812);\nvar FlushItem = __webpack_require__(1789);\nvar downloadFileUtil = __webpack_require__(2777);\n\n/**\n *\n * @param {ManifestController} manifestController - existing manifest controller\n * @param {OfflineController} offlineController - existing offline controller\n * @constructor\n */\nfunction DownloadsController(manifestController, offlineController) {\n  this._manifestsDownloadOrder = [];\n  this._manifestsDownloadOrderObj = {};\n  this._manifestController = manifestController;\n  this._offlineController = offlineController;\n  this.storage = new DownloadsStorageController();\n  this._offlineController.setDownloadStorage(this.storage);\n  this._names = {\n    downloadInProgress: "downloadInProgress",\n    options: "options",\n    maxDownloadInProgress: "maxDownloadInProgress"\n  };\n  this._STATS_TIME_GENERATION = 1000;\n  this.downloadStats = new DownloadStats(this.storage);\n  _.bindAll(this, "_onDownloadEnd", "_onDownloadError", "isDownloadFinished");\n}\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} videoLinks - video links to be downloaded\n * @param {Array} audioLinks - audio links to be downloaded\n * @param {Array} textLinks - text links to be downloaded\n * @returns {void}\n * @private\n */\nDownloadsController.prototype._addDownloads = function (manifestId, videoLinks, audioLinks, textLinks) {\n  var working = true;\n  this._prepareStartOptions(manifestId, videoLinks, audioLinks, textLinks);\n  while (working) {\n    var ratioAudioVideo = videoLinks.length ? Math.round(audioLinks.length / videoLinks.length) : 1;\n    var ratioTextVideo = videoLinks.length ? Math.round(textLinks.length / videoLinks.length) : 1;\n    this._addNextItemToQueue(manifestId, textLinks, ratioTextVideo);\n    this._addNextItemToQueue(manifestId, audioLinks, ratioAudioVideo);\n    this._addNextItemToQueue(manifestId, videoLinks);\n    working = !!(textLinks.length || videoLinks.length || audioLinks.length);\n  }\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} links - array of links to be downloaded\n * @param {number} nbItems - the rnumber of items to add to the queue\n * @private\n * @returns {void}\n */\nDownloadsController.prototype._addNextItemToQueue = function (manifestId, links, nbItems) {\n  var link;\n  if (!nbItems) {\n    nbItems = 1;\n  }\n  if (links.length) {\n    while (nbItems > 0) {\n      link = links.shift();\n      link.manifestId = manifestId;\n      this.storage.left.push(manifestId, link);\n      nbItems--;\n    }\n  }\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {boolean} asFirst - to force to download manifest without wiating in queue\n * @returns {boolean} - status if operation was successfully\n * @private\n */\nDownloadsController.prototype._downloadOrderAddManifest = function (manifestId, asFirst) {\n  if (!this._downloadOrderManifestExists(manifestId)) {\n    this._manifestsDownloadOrderObj[manifestId] = true;\n    if (asFirst) {\n      this._manifestsDownloadOrder.unshift(manifestId);\n    } else {\n      this._manifestsDownloadOrder.push(manifestId);\n    }\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n *\n * @param {number} nextManifestPositionInArray - index number from array _manifestsDownloadOrder\n * @returns {manifestId} - manifest identifier\n * @private\n */\nDownloadsController.prototype._downloadOrderGetManifestId = function (nextManifestPositionInArray) {\n  return this._manifestsDownloadOrder[nextManifestPositionInArray];\n};\n\n/**\n *\n * @param {manifestId} manifestId -  manifest identifier\n * @returns {number} index number from array _manifestsDownloadOrder\n * @private\n */\nDownloadsController.prototype._indexOfManifest = function (manifestId) {\n  return this._manifestsDownloadOrder.indexOf(manifestId);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} - if manifest has been already added to the queue\n * @private\n */\nDownloadsController.prototype._downloadOrderManifestExists = function (manifestId) {\n  return this._manifestsDownloadOrderObj[manifestId];\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - status if manifest has been removed from queue\n * @private\n */\nDownloadsController.prototype._downloadOrderRemoveManifest = function (manifestId) {\n  var found = false,\n    i,\n    j;\n  delete this._manifestsDownloadOrderObj[manifestId];\n  for (i = 0, j = this._manifestsDownloadOrder.length; i < j; i++) {\n    if (this._manifestsDownloadOrder[i] === manifestId) {\n      this._manifestsDownloadOrder.splice(i, 1);\n      found = true;\n      break;\n    }\n  }\n  return found;\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when download finishes with success\n * @param {function} onFailure - callback to be invoked when download failed\n * @private\n * @returns {void}\n */\nDownloadsController.prototype._finish = function (manifestId, onSuccess, onFailure) {\n  this.downloadStats.refresh();\n  this._downloadOrderRemoveManifest(manifestId);\n  if (!this._manifestsDownloadOrder.length) {\n    this.downloadStats.stop();\n  }\n  this.storage.removeItem(manifestId).then(onSuccess, onFailure);\n};\n\n/**\n *\n * @param {object} link - link object which consist remote and local url\n * @private\n * @returns {string} - unique hash for download file based on local and remote url\n */\nDownloadsController.prototype._getDownloadHash = function (link) {\n  return link.remoteUrl + "-" + link.localUrl;\n};\n\n/**\n *\n * @param {Download} download - download class to be marked either with success or with error\n * @private\n * @returns {void}\n */\nDownloadsController.prototype._markDownloadItem = function (download) {\n  var self = this;\n  var manifestId = download.manifestId;\n  var downloadHash = self._getDownloadHash(download);\n  var syncStorageKeys = [];\n  var lastItem;\n  download.events.removeListener("end", self._onDownloadEnd);\n  download.events.removeListener("error", self._onDownloadError);\n\n  //refreshing stats for last time - to have correct stats for subscribers progress before it is removed\n  if (self.storage.downloading.count(manifestId) === 1 && self.storage.left.count(manifestId) === 0) {\n    this.downloadStats.refresh();\n    lastItem = true;\n  }\n  if (download.status === STATUSES.FINISHED) {\n    self.storage.downloaded.push(manifestId, download);\n    syncStorageKeys.push(this.storage.stores.DOWNLOADS.DOWNLOADED);\n  } else {\n    self.storage.errors.push(manifestId, download);\n  }\n  self.storage.downloading.removeItem(manifestId, downloadHash);\n  if (self.isDownloadFinished(manifestId)) {\n    if (self.storage.errors.count(manifestId) === 0) {\n      self.storage.status.setItem(manifestId, "status", STATUSES.FINISHED);\n    } else {\n      self.storage.status.setItem(manifestId, "status", STATUSES.ERROR);\n    }\n    syncStorageKeys.push(this.storage.stores.STATUS);\n  }\n  self.storage.sync(manifestId, syncStorageKeys).then(function () {\n    self.storage.params.decrease(manifestId, self._names.downloadInProgress);\n    if (lastItem) {\n      self._finish(manifestId, function () {\n        self.startQueue();\n        console.info("FINISHED", manifestId);\n      }, function () {\n        self.startQueue();\n      });\n    } else {\n      self.startQueue();\n    }\n  }, function (err) {\n    console.error("ERROR", err);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when stop has been successfully\n * @param {function} onFailure - callback to be invoked when stop failed\n * @param {string} status - the status\n * @param {string} statusDetails - adds details about status (on errors for example)\n * @returns {void}\n */\nDownloadsController.prototype._stopWithStatus = function (manifestId, onSuccess, onFailure, status, statusDetails) {\n  var self = this;\n  self._downloadOrderRemoveManifest(manifestId);\n  self.storage.getItem(manifestId).then(function (result) {\n    if (!result) {\n      onFailure(translation.getError(translation.e.downloads.ALREADY_STOPPED, manifestId));\n      return;\n    }\n    var itemsToStop = self.storage.downloading.getKeys(manifestId);\n    var itemToStop;\n    console.info("STOPPING", manifestId, itemsToStop.length);\n    var promises = [];\n    for (var i = 0, j = itemsToStop.length; i < j; i++) {\n      itemToStop = self.storage.downloading.getItem(manifestId, itemsToStop[i]);\n      itemToStop.events.removeListener("end", self._onDownloadEnd);\n      itemToStop.events.removeListener("error", self._onDownloadError);\n      promises.push(itemToStop.stopPromise());\n    }\n    self.storage.status.setItem(manifestId, "status", status);\n    if (statusDetails) {\n      self.storage.status.setItem(manifestId, "details", statusDetails);\n    }\n    promises.push(self.storage.sync(manifestId, [self.storage.stores.DOWNLOADS.DOWNLOADED, self.storage.stores.STATUS]));\n    Promise.all(promises).then(function () {\n      self._finish(manifestId, onSuccess, onFailure);\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.STOPPING_FAILED, manifestId), err);\n    });\n  }, function (err) {\n    onFailure(translation.getError(translation.e.downloads.STOPPING_FAILED, manifestId), err);\n  });\n};\n/**\n * @param {Download} download - Download Class\n * @param {object} err - error object\n * @returns {void}\n * @private\n */\nDownloadsController.prototype._onDownloadError = function (download, err) {\n  console.error("ERROR", download.remoteUrl, err);\n  this._markDownloadItem(download);\n  if (err === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR || err === downloadFileUtil.errors.ERR_NETWORK_IO_SUSPENDED || appSettings.getSettings().stopOnError) {\n    // stop downloading => cannot write or network suspended\n    var status = err === downloadFileUtil.errors.ERR_NETWORK_IO_SUSPENDED ? STATUSES.STOPPED : STATUSES.ERROR;\n    this._stopWithStatus(download.manifestId, function () {\n      console.error(\'stopped\', status);\n    }, function (failure) {\n      console.info(failure);\n    }, status, err);\n  }\n};\n\n/**\n *\n * @param {Download} download - Download Class\n * @returns {void}\n * @private\n */\nDownloadsController.prototype._onDownloadEnd = function (download) {\n  // console.log("FINISHED", download.remoteUrl, download.localUrl);\n  this._markDownloadItem(download);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} videoLinks - video links to be downloaded\n * @param {Array} audioLinks - audio links to be downloaded\n * @param {Array} textLinks - text links to be downloaded\n * @returns {void}\n * @private\n */\nDownloadsController.prototype._prepareStartOptions = function (manifestId, videoLinks, audioLinks, textLinks) {\n  var count = videoLinks.length + audioLinks.length + textLinks.length;\n  console.info("ADDING ->>> ", manifestId + ",", count, "fragments");\n  var options = {};\n  this.storage.params.setItem(manifestId, this._names.downloadInProgress, 0);\n  var maxDownloadInProgress;\n  var threadRules = appSettings.getSettings().downloadingThreadsRules;\n  for (var i = 0, j = threadRules.items.length; i < j; i++) {\n    if (count <= threadRules.items[i].max) {\n      options[threadRules.threadName] = threadRules.items[i].threads;\n      maxDownloadInProgress = threadRules.items[i].files;\n      break;\n    }\n  }\n  this.storage.params.setItem(manifestId, this._names.options, options);\n  this.storage.params.setItem(manifestId, this._names.maxDownloadInProgress, maxDownloadInProgress);\n\n  //download order can help to stop download one manifest and download another or download them in parallel\n  this._downloadOrderAddManifest(manifestId);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - if download is finished\n */\nDownloadsController.prototype.isDownloadFinished = function (manifestId) {\n  return !this.storage.left.count(manifestId) && !this.storage.downloading.count(manifestId);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - if download is finished and synced (info written on disk)\n */\nDownloadsController.prototype.isDownloadFinishedAndSynced = function (manifestId) {\n  return !this.storage.left.count(manifestId) && !this.storage.downloading.count(manifestId) && !this.storage.keyExists(manifestId);\n};\nDownloadsController.prototype.getDownloading = function (manifestId, localFile) {\n  var items = this.storage.downloading.getItems(manifestId);\n  if (!items) {\n    return null;\n  }\n  for (var link in items) {\n    if (items.hasOwnProperty(link)) {\n      var download = items[link];\n      var downloadPath = path.normalize(download.localUrl);\n      var local = path.normalize(localFile);\n      if (downloadPath === local) {\n        return download;\n      }\n    }\n  }\n  return null;\n};\nDownloadsController.prototype.waitForDownload = function (download, callback) {\n  var _onDownloadEnd;\n  var _onDownloadError;\n  var removeListener = function removeListener(download) {\n    download.events.removeListener("end", _onDownloadEnd);\n    download.events.removeListener("error", _onDownloadError);\n  };\n  _onDownloadEnd = function _onDownloadEnd(download) {\n    removeListener(download);\n    callback();\n  };\n  _onDownloadError = function _onDownloadError(download, err) {\n    removeListener(download);\n    callback(err);\n  };\n  download.events.on("end", _onDownloadEnd);\n  download.events.on("error", _onDownloadError);\n};\n\n/**\n* Perform a seek - this changes order of fragment download for a manifest\n* @param {string} manifestId - manifest identifier\n* @param {string} localFile - local file\n* @param {function} callback - callback to get result\n* @returns {void}\n*/\nDownloadsController.prototype.performSeek = function (manifestId, localFile, callback) {\n  var self = this;\n  var download;\n  download = self.getDownloading(manifestId, localFile);\n  if (download) {\n    self.waitForDownload(download, callback);\n    return;\n  }\n  var items = self.storage.left.getItems(manifestId);\n  if (!items) {\n    callback(\'No download found\');\n    return;\n  }\n  var index = items.findIndex(function (download) {\n    var downloadPath = path.normalize(download.localUrl);\n    var local = path.normalize(localFile);\n    return downloadPath === local;\n  });\n  if (index > -1) {\n    var part1 = items.slice(0, index);\n    var part2 = items.slice(index);\n    self.storage.left.clear(manifestId);\n    self.storage.left.concat(manifestId, part2);\n    self.storage.left.concat(manifestId, part1);\n    items = self.storage.left.getItems(manifestId);\n    self.startQueue(self._indexOfManifest(manifestId), true);\n    download = self.getDownloading(manifestId, localFile);\n    if (download) {\n      self.waitForDownload(download, callback);\n    } else {\n      // if not queued, return an error\n      callback(\'No download found\');\n    }\n  } else {\n    callback(\'No download found\');\n  }\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - object containing video, audio and text representations ids\n * @param {string} downloadFolder - download folder for video. If undefined, then default download folder is used\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @param {boolean} fromResumed - if start has been called from resume api method\n * @param {string} oldstatus - if from resumed, then indicates the old status of download\n * @returns {void}\n */\nDownloadsController.prototype.start = function (manifestId, representations, downloadFolder, onSuccess, onFailure, fromResumed, oldstatus) {\n  var self = this;\n  this.downloadStats.start();\n  var manifest = this._manifestController.getManifestById(manifestId);\n  if (!manifest) {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n    return;\n  }\n  representations = representations || {};\n  var video = representations.video || [];\n  if (!Array.isArray(video)) {\n    video = [video];\n  }\n  var audio = representations.audio || [];\n  if (!Array.isArray(audio)) {\n    audio = [audio];\n  }\n  var text = representations.text || [];\n  if (!Array.isArray(text)) {\n    text = [text];\n  }\n  var videoR = manifest.getVideoRepresentations();\n  var audioR = manifest.getAudioRepresentations();\n  var textR = manifest.getTextRepresentations();\n  var localDownloadFolder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n  if (downloadFolder) {\n    localDownloadFolder = path.resolve(downloadFolder);\n  }\n  var localPath = path.resolve(localDownloadFolder + "/" + manifestId + "/");\n  var manifestUrl = manifest.getManifestUrl();\n  var manifestName = manifest.getManifestName();\n  function getManifestBaseUrl(xml, manifestUrlDomain) {\n    var manifestBaseUrl;\n    var MPD = xml.getElementsByTagName("MPD")[0];\n    if (MPD) {\n      for (var i = 0, j = MPD.childNodes.length; i < j; i++) {\n        if (MPD.childNodes[i].nodeName === "BaseURL") {\n          manifestBaseUrl = MPD.childNodes[i].textContent;\n          if (!manifestBaseUrl.match(constants.regexpProtocolRemove)) {\n            manifestBaseUrl = utilUrl.joinPath(manifestUrlDomain, manifestBaseUrl);\n          }\n          break;\n        }\n      }\n    }\n    if (!manifestBaseUrl) {\n      manifestBaseUrl = manifestUrlDomain;\n    }\n    return manifestBaseUrl;\n  }\n  Promise.all([this._offlineController.getManifestInfoPromise(manifestId, true), this.storage.getItem(manifestId), mkdirpPromise(localPath)]).then(function (results) {\n    var info = results[0];\n    var storageItem = results[1];\n    if (storageItem && !self.isDownloadFinished(manifestId)) {\n      if (fromResumed) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_RESUMED, manifestId));\n      } else {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STARTED, manifestId));\n      }\n      return;\n    }\n\n    //collect Links - start\n    if (info.manifest.video) {\n      video = _.union(video, info.manifest.video);\n    }\n    if (info.manifest.audio) {\n      audio = _.union(audio, info.manifest.audio);\n    }\n    if (info.manifest.text) {\n      text = _.union(text, info.manifest.text);\n    }\n    var downloaded = info.downloadedFiles || [];\n    var downloadedHash = {};\n    for (var i = 0, j = downloaded.length; i < j; i++) {\n      downloadedHash[downloaded[i].localUrl] = downloaded[i];\n    }\n    var remotePath = getManifestBaseUrl(manifest.manifestXML.xml, manifest.url_domain);\n    var videoLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, video, videoR, downloadedHash);\n    var audioLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, audio, audioR, downloadedHash);\n    var textLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, text, textR, downloadedHash);\n    var allvideoLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, video, videoR);\n    var allaudioLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, audio, audioR);\n    var alltextLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, text, textR);\n    var allFiles = allvideoLinks.concat(allaudioLinks, alltextLinks);\n\n    //collect Links - end\n\n    self.storage.createIfNotExists(manifestId).then(function () {\n      self.storage.manifest.setItem(manifestId, "ts", new Date().getTime());\n      self.storage.manifest.setItem(manifestId, "url", manifestUrl);\n      self.storage.manifest.setItem(manifestId, "name", manifestName);\n      self.storage.manifest.setItem(manifestId, "video", video);\n      self.storage.manifest.setItem(manifestId, "audio", audio);\n      self.storage.manifest.setItem(manifestId, "text", text);\n      self.storage.manifest.setItem(manifestId, "files", allFiles);\n      self.storage.manifest.setItem(manifestId, "folder", localDownloadFolder);\n      self.storage.downloaded.clear(manifestId);\n      self.storage.downloaded.concat(manifestId, downloaded);\n      self.storage.errors.clear(manifestId);\n      if (!fromResumed) {\n        // do not initialise state of manifest is start is from resume\n        // state must stay the last one\n        self.storage.status.setItem(manifestId, "status", STATUSES.CREATED);\n      } else {\n        // init status with last status\n        self.storage.status.setItem(manifestId, "status", oldstatus);\n      }\n      Promise.all([self.storage.sync(manifestId, [self.storage.stores.MANIFEST, self.storage.stores.STATUS]), self._manifestController.saveOriginalManifestOnceOnly(manifestId), self._manifestController.saveManifestWithChosenRepresentations(manifestId, {\n        video: video,\n        audio: audio,\n        text: text\n      }, localPath)]).then(function () {\n        self._addDownloads(manifestId, videoLinks, audioLinks, textLinks);\n        if (self._indexOfManifest(manifestId) > appSettings.getSettings().numberOfManifestsInParallel - 1) {\n          self.storage.status.setItem(manifestId, "status", STATUSES.QUEUED);\n        } else {\n          self.storage.status.setItem(manifestId, "status", STATUSES.STARTED);\n        }\n        self.storage.status.setItem(manifestId, "left", self.storage.left.count(manifestId));\n        self.storage.sync(manifestId, [self.storage.stores.DOWNLOADS.DOWNLOADED, self.storage.stores.STATUS]).then(function () {\n          self.downloadStats.refresh();\n          if (self.isDownloadFinished(manifestId)) {\n            self.storage.status.setItem(manifestId, "status", STATUSES.FINISHED);\n            self.storage.sync(manifestId, self.storage.stores.STATUS).then(function () {\n              self._finish(manifestId, onSuccess, onFailure);\n            }, onFailure);\n          } else {\n            self.downloadStats.start();\n            self.startQueue();\n            onSuccess();\n          }\n        }, onFailure);\n      }, onFailure);\n    }, onFailure);\n  }, onFailure);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - object containing video, audio and text representations ids\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @returns {void}\n */\nDownloadsController.prototype.resume = function (manifestId, representations, onSuccess, onFailure) {\n  var self = this;\n  this._offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.RESUMING_FAILED, manifestId), err);\n    } else {\n      var folder = info.manifest.folder;\n      if (!folder) {\n        // use default download folder path\n        folder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n      }\n      self.start(manifestId, representations, folder, onSuccess, onFailure, true, info.status);\n    }\n  });\n};\n\n/**\n * Update download folder path\n * @param {string} manifestId - manifest identifier\n * @param {string} downloadFolder - new download folder\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @returns {void}\n */\nDownloadsController.prototype.updateDownloadFolder = function (manifestId, downloadFolder, onSuccess, onFailure) {\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST)]).then(function (results) {\n    var manifestSettings = results[0];\n    if (!manifestSettings) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n    manifestSettings.folder = downloadFolder;\n    var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.MANIFEST, manifestSettings);\n    flushItem.save().then(function () {\n      onSuccess();\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.SAVING_DATA_FAILED, manifestId), err);\n    });\n  }, function (err) {\n    onFailure(translation.getError(translation.e.downloads.UPDATE_DOWNLOAD_FOLDER_FAILED, manifestId), err);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when stop has been successfully\n * @param {function} onFailure - callback to be invoked when stop failed\n * @returns {void}\n */\nDownloadsController.prototype.stop = function (manifestId, onSuccess, onFailure) {\n  this._stopWithStatus(manifestId, onSuccess, onFailure, STATUSES.STOPPED);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {boolean} ignoreStopped - don\'t fail if download has been already stopped\n * @returns {Promise} - promise\n */\nDownloadsController.prototype.stopPromise = function (manifestId, ignoreStopped) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.stop(manifestId, resolve, function (err) {\n      if (err) {\n        if (ignoreStopped && err.code === CODES.ERRORS.STOPPED) {\n          resolve();\n          return;\n        }\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} - promise\n */\nDownloadsController.prototype.removePromise = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.stopPromise(manifestId).then(function () {\n      self.storage.removeItem(manifestId).then(resolve, reject);\n    }, function (err) {\n      //already stopped, continue\n      if (err && err.code === CODES.ERRORS.STOPPED) {\n        self.storage.removeItem(manifestId).then(resolve, reject);\n      } else {\n        reject(err);\n      }\n    });\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} link - object link to be downloaded\n * @private\n * @returns {void}\n */\nDownloadsController.prototype._addLinkToDownload = function (manifestId, link) {\n  var self = this;\n  var params = Object.assign({}, link);\n  var download = new Download(params, self.storage.params.getItem(manifestId, self._names.options));\n  var downloadHash = self._getDownloadHash(link);\n  self.storage.downloading.setItem(manifestId, downloadHash, download);\n  self.storage.status.setItem(manifestId, "left", self.storage.left.count(manifestId) + self.storage.errors.count(manifestId));\n  self.storage.sync(manifestId, self.storage.stores.STATUS);\n  download.events.on("end", self._onDownloadEnd);\n  download.events.on("error", self._onDownloadError);\n  download.start();\n  return download;\n};\n\n/**\n *\n * @param {number} [nextManifestPositionInArray] - index from array to decide which manifest should be downloaded next\n *   (queue)\n * @param {boolean} forceDownload true to force next download to be queued\n * @returns {void}\n */\nDownloadsController.prototype.startQueue = function (nextManifestPositionInArray, forceDownload) {\n  var count, downloadsInProgress, link, manifestId, maxDownloads;\n  if (typeof nextManifestPositionInArray === "undefined") {\n    nextManifestPositionInArray = 0;\n  }\n  manifestId = this._downloadOrderGetManifestId(nextManifestPositionInArray);\n  if (manifestId && this.isDownloadFinished(manifestId)) {\n    // the manifest id will be removed from queue, wait next time. Thus, do not change status\n    return;\n  }\n  if (nextManifestPositionInArray >= appSettings.getSettings().numberOfManifestsInParallel) {\n    if (manifestId) {\n      this.storage.status.setItem(manifestId, "status", STATUSES.QUEUED);\n    }\n    return;\n  } else {\n    this.storage.status.setItem(manifestId, "status", STATUSES.STARTED);\n  }\n  if (!manifestId) {\n    count = 0;\n    var i, j, items;\n    items = this.storage.getKeys();\n    for (i = 0, j = items.length; i < j; i++) {\n      count += this.storage.params.count(items[i], this._names.downloadInProgress);\n    }\n    if (count === 0) {\n      this.downloadStats.stop();\n    }\n    return;\n  }\n  downloadsInProgress = this.storage.params.getItem(manifestId, this._names.downloadInProgress);\n  maxDownloads = this.storage.params.getItem(manifestId, this._names.maxDownloadInProgress);\n  if (downloadsInProgress < maxDownloads - 1 || forceDownload) {\n    link = this.storage.left.shift(manifestId);\n    if (link) {\n      this.storage.params.increase(manifestId, this._names.downloadInProgress);\n      this._addLinkToDownload(manifestId, link);\n    } else {\n      //check next manifest\n      nextManifestPositionInArray++;\n    }\n    this.startQueue(nextManifestPositionInArray);\n  } else if (appSettings.getSettings().numberOfManifestsInParallel > 1 && nextManifestPositionInArray < appSettings.getSettings().numberOfManifestsInParallel) {\n    nextManifestPositionInArray++;\n    this.startQueue(nextManifestPositionInArray);\n  }\n};\nmodule.exports = DownloadsController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4612\n')},2381:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(4952);\nvar appSettings = __webpack_require__(9277);\nvar ArrayStorage = __webpack_require__(9567);\nvar ArrayStorageBridge = __webpack_require__(8048);\nvar FlushItem = __webpack_require__(1789);\nvar Storage = __webpack_require__(1396);\nvar StorageBridge = __webpack_require__(3890);\nvar SyncItem = __webpack_require__(6716);\n\n/**\n *\n * @constructor\n */\nfunction DownloadsStorageController() {\n  this.stores = appSettings.getSettings().stores;\n  this._items = {};\n  this._syncItems = [];\n  this._FLUSH_TIME = 50; //in miliseconds\n  this._flushThrottled = _.throttle(this._flush, this._FLUSH_TIME, {\n    leading: false\n  });\n  this._createDummyStorageBridge();\n}\n\n/**\n *\n * @private\n * @param {string} manifestId - manifest identifier\n * @param {string} key - key identifier\n * @returns {void}\n */\nDownloadsStorageController.prototype._createArrayStorage = function (manifestId, key) {\n  if (!this[key]) {\n    this._createArrayStorageBridge(key);\n  }\n  this._items[manifestId][key] = new ArrayStorage();\n};\n\n/**\n *\n * @private\n * @param {string} key - key identifier\n * @returns {void}\n */\nDownloadsStorageController.prototype._createArrayStorageBridge = function (key) {\n  this[key] = new ArrayStorageBridge(this, key);\n};\nDownloadsStorageController.prototype._createDummyStorageBridge = function () {\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.LEFT);\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.DOWNLOADED);\n  this._createStorageBridge(this.stores.DOWNLOADS.DOWNLOADING);\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.ERRORS);\n  this._createStorageBridge(this.stores.PARAMS);\n  this._createStorageBridge(this.stores.MANIFEST);\n  this._createStorageBridge(this.stores.STATUS);\n};\n\n/**\n *\n * @private\n * @param {string} manifestId - manifest identifier\n * @param {string} key - key identifier\n * @returns {void}\n */\nDownloadsStorageController.prototype._createStorage = function (manifestId, key) {\n  if (!this[key]) {\n    this._createStorageBridge(key);\n  }\n  this._items[manifestId][key] = new Storage();\n};\n\n/**\n *\n * @private\n * @param {string} key - key identifier\n * @returns {void}\n */\nDownloadsStorageController.prototype._createStorageBridge = function (key) {\n  this[key] = new StorageBridge(this, key);\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownloadsStorageController.prototype._flush = function () {\n  var self = this;\n  var items = this._syncItems.splice(0, this._syncItems.length);\n  var flushItem, flushItems, i, item, j, k, l, manifestId, storageKey, storageKeys, storagesToFlush;\n  storagesToFlush = {};\n  function getItems(manifestId, storageKey) {\n    if (self._items[manifestId] && self._items[manifestId][storageKey]) {\n      return self._items[manifestId][storageKey].getItems();\n    } else {\n      return [];\n    }\n  }\n\n  //collect information which storages needs to be saved\n  for (i = 0, j = items.length; i < j; i++) {\n    item = items[i];\n    storagesToFlush[item.manifestId] = storagesToFlush[item.manifestId] || {};\n    for (k = 0, l = item.storageKeys.length; k < l; k++) {\n      storagesToFlush[item.manifestId][item.storageKeys[k]] = true;\n    }\n  }\n  flushItems = [];\n\n  //create flush items - promises that needs to be resolved together in parallel\n  for (manifestId in storagesToFlush) {\n    storageKeys = storagesToFlush[manifestId];\n    for (storageKey in storageKeys) {\n      try {\n        flushItem = new FlushItem(manifestId, storageKey, getItems(manifestId, storageKey));\n        flushItems.push(flushItem.save());\n      } catch (e) {\n        console.error("ERROR", storageKey);\n      }\n    }\n  }\n  Promise.all(flushItems).then(function () {\n    var i, j;\n    for (i = 0, j = items.length; i < j; i++) {\n      items[i].resolve();\n    }\n  }, function () {\n    var i, j;\n    for (i = 0, j = items.length; i < j; i++) {\n      items[i].reject();\n    }\n  });\n};\n\n/**\n *\n * @private\n * @param {Array} [storageKey] storage key\n * @returns {Array} keys for all storages\n */\nDownloadsStorageController.prototype._getAllStorageKeys = function (storageKey) {\n  var keys = [];\n  storageKey = storageKey || this.stores;\n  for (var key in storageKey) {\n    if (storageKey.hasOwnProperty(key)) {\n      if (typeof storageKey[key] === "string") {\n        //params don\'t need to be stored to disk\n        if (key !== this.stores.PARAMS) {\n          keys.push(storageKey[key]);\n        }\n      } else {\n        keys = keys.concat(this._getAllStorageKeys(storageKey[key]));\n      }\n    }\n  }\n  return keys;\n};\n\n/**\n *\n * @private\n * @param {string} storageKey storage key identifier\n * @param {string} bridgeMethodName method name to be called\n * @param {string} manifestId - manifest identifier\n * @returns {*} items\n */\nDownloadsStorageController.prototype._itemAction = function (storageKey, bridgeMethodName, manifestId) {\n  var args = [],\n    i,\n    j;\n\n  //collect all other parameters except those already listed\n  for (i = 3, j = arguments.length; i < j; i++) {\n    args.push(arguments[i]);\n  }\n  if (this._items[manifestId] && this._items[manifestId][storageKey] && this._items[manifestId][storageKey][bridgeMethodName]) {\n    return this._items[manifestId][storageKey][bridgeMethodName].apply(this._items[manifestId][storageKey], args);\n  } else {\n    //if manifest still exists\n    if (this._items[manifestId]) {\n      console.error("ERROR", manifestId, storageKey, bridgeMethodName, args);\n    }\n    return undefined;\n  }\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} [storageKeys] storage keys that will be cleared\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.clear = function (manifestId, storageKeys) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    storageKeys = storageKeys || self._getAllStorageKeys();\n    if (self._items[manifestId]) {\n      for (var i = 0, j = storageKeys.length; i < j; i++) {\n        var storage = self._items[manifestId][storageKeys[i]];\n        if (storage) {\n          storage.clear();\n        }\n      }\n    }\n    delete self._items[manifestId];\n    self.sync(manifestId, storageKeys).then(resolve, reject);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.create = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self._items[manifestId] = {};\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.LEFT);\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.DOWNLOADED);\n    self._createStorage(manifestId, self.stores.DOWNLOADS.DOWNLOADING);\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.ERRORS);\n    self._createStorage(manifestId, self.stores.PARAMS);\n    self._createStorage(manifestId, self.stores.MANIFEST);\n    self._createStorage(manifestId, self.stores.STATUS);\n    self.sync(manifestId, [self.stores.DOWNLOADS.DOWNLOADED, self.stores.MANIFEST, self.stores.STATUS]).then(resolve, reject);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.createIfNotExists = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.getItem(manifestId).then(function (result) {\n      if (result) {\n        resolve();\n      } else {\n        self.create(manifestId).then(resolve, reject);\n      }\n    }, reject);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.getItem = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve) {\n    resolve(self._items[manifestId]);\n  });\n};\n\n/**\n *\n * @returns {string[]} keys of all items\n */\nDownloadsStorageController.prototype.getKeys = function () {\n  return Object.keys(this._items);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} if certain manifest id exists\n */\nDownloadsStorageController.prototype.keyExists = function (manifestId) {\n  return !!this._items[manifestId];\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.removeItem = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve) {\n    delete self._items[manifestId];\n    resolve();\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} [storageKeys] storage keys that will be synced\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.sync = function (manifestId, storageKeys) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (typeof storageKeys === "undefined") {\n      reject("Storage key is missing");\n      return;\n    }\n    if (typeof storageKeys === "string") {\n      storageKeys = [storageKeys];\n    }\n    if (appSettings.getSettings().saveToDisk) {\n      self._syncItems.push(new SyncItem(resolve, reject, manifestId, storageKeys));\n      self._flushThrottled();\n    } else {\n      resolve();\n    }\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.syncAll = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (appSettings.getSettings().saveToDisk) {\n      var storageKeys = self._getAllStorageKeys();\n      self._syncItems.push(new SyncItem(resolve, reject, manifestId, storageKeys));\n      self._flushThrottled();\n    } else {\n      resolve();\n    }\n  });\n};\nmodule.exports = DownloadsStorageController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2381\n')},42:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar XMLSerializer = (__webpack_require__(678).XMLSerializer);\nvar appSettings = __webpack_require__(9277);\nvar parseManifestWithChoosenRepresentations = __webpack_require__(4803);\nvar downloadFileUtil = __webpack_require__(2777);\nvar saveFile = __webpack_require__(1349);\nvar translation = __webpack_require__(817);\n\n/**\n *\n * @constructor\n */\nfunction ManifestController() {\n  this._manifests = {};\n}\n\n/**\n *\n * @param {object} manifest manifest object\n * @returns {void}\n */\nManifestController.prototype.cacheManifest = function (manifest) {\n  this._manifests[manifest.id] = manifest;\n};\n\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {*} manifests\n */\nManifestController.prototype.getManifests = function (manifestIds) {\n  var selectedManifests;\n  if (typeof manifestIds === "undefined") {\n    selectedManifests = this._manifests;\n  } else if (typeof manifestIds === "number" || typeof manifestIds === "string") {\n    selectedManifests = [this._manifests[String(manifestIds)]];\n  } else {\n    selectedManifests = [];\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      if (this._manifests[manifestIds[i]]) {\n        selectedManifests.push(this._manifests[manifestIds[i]]);\n      }\n    }\n  }\n  return selectedManifests;\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} manifest\n */\nManifestController.prototype.getManifestById = function (manifestId) {\n  if (typeof manifestId === "number" || typeof manifestId === "string") {\n    return this._manifests[String(manifestId)];\n  }\n};\n\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {Array} manifests infomrations\n */\nManifestController.prototype.getManifestsInfo = function (manifestIds) {\n  var manifests = [];\n  var selectedManifests = this.getManifests(manifestIds);\n  for (var i = 0, j = selectedManifests.length; i < j; i++) {\n    manifests.push(selectedManifests[i].getJsonInfo());\n  }\n  return manifests;\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {string} local path for manifest files\n */\nManifestController.prototype.getOriginalManifestLocalPath = function (manifestId) {\n  return appSettings.getSettings().settingsFolder + manifestId + "/";\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} manifest info\n */\nManifestController.prototype.getManifestInfoById = function (manifestId) {\n  var manifest = this.getManifestById(manifestId);\n  if (manifest) {\n    return manifest.getJsonInfo();\n  }\n};\n\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {void}\n */\nManifestController.prototype.removeFromCache = function (manifestIds) {\n  if (typeof manifestIds === "number" || typeof manifestIds === "string") {\n    manifestIds = [String(manifestIds)];\n  }\n  manifestIds = manifestIds || [];\n  for (var i = 0, j = manifestIds.length; i < j; i++) {\n    delete this._manifests[manifestIds[i]];\n  }\n};\nManifestController.prototype.removeFromCacheAll = function () {\n  this._manifests = [];\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nManifestController.prototype.saveOriginalManifestOnceOnly = function (manifestId) {\n  var localPath = this.getOriginalManifestLocalPath(manifestId);\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var manifest = self.getManifestById(manifestId);\n    if (!manifest) {\n      reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n    downloadFileUtil.checkForLocalFile(localPath + manifest.getManifestName(), function (exists) {\n      if (exists) {\n        resolve();\n      } else {\n        var xmlSerializer = new XMLSerializer();\n        var manifestString;\n        try {\n          manifestString = xmlSerializer.serializeToString(manifest.getManifestXML());\n        } catch (err) {\n          reject(err);\n          return;\n        }\n        saveFile(localPath, manifest.getManifestName(), manifestString, function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      }\n    });\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations representations to be saved\n * @param {string} downloadFolder - folder where all fragments are downloaded\n * @returns {Promise} promise\n */\nManifestController.prototype.saveManifestWithChosenRepresentations = function (manifestId, representations, downloadFolder) {\n  var localPath = downloadFolder;\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var manifest = self.getManifestById(manifestId);\n    if (!manifest) {\n      reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n    var manifestString;\n    try {\n      manifestString = parseManifestWithChoosenRepresentations(manifest, representations);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n    saveFile(localPath, manifest.getManifestName(), manifestString, function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\nmodule.exports = ManifestController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n')},7094:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar path = __webpack_require__(1017);\nvar getSize = __webpack_require__(6838);\nvar rmdir = __webpack_require__(6951);\nvar appSettings = __webpack_require__(9277);\nvar ReadItem = __webpack_require__(3812);\nvar dirList = __webpack_require__(8494);\nvar Manifest = (__webpack_require__(1269)/* .Manifest */ .G);\nvar STATUSES = __webpack_require__(8255);\n\n/**\n *\n * @param {ManifestController} manifestController - reference to existing manifest controller\n * @constructor\n */\nfunction OfflineController(manifestController) {\n  this._manifestController = manifestController;\n}\n\n/**\n *\n * @param {Function} callback - function to be called when list is ready\n * @returns {void}\n */\nOfflineController.prototype.getManifestsList = function (callback) {\n  dirList(appSettings.getSettings().settingsFolder, true, false).then(function (settingsFolderList) {\n    var manifestList = [];\n    for (var i = 0, j = settingsFolderList.length; i < j; i++) {\n      manifestList.push(settingsFolderList[i]);\n    }\n    callback(null, manifestList);\n  }, function (err) {\n    callback(err);\n  });\n};\n\n/**\n *\n * @param {Function} callback - function to be called when list with info is ready\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {void}\n */\nOfflineController.prototype.getManifestsListWithInfo = function (callback, full) {\n  var self = this;\n  this.getManifestsList(function (err, list) {\n    if (err) {\n      callback(err);\n    } else {\n      var infoP = [];\n      for (var i = 0, j = list.length; i < j; i++) {\n        infoP.push(self.getManifestInfoPromise(list[i], full));\n      }\n      Promise.all(infoP).then(function (results) {\n        var newResults = [];\n        for (var _i = 0, _j = results.length; _i < _j; _i++) {\n          if (results[_i]) {\n            newResults.push(results[_i]);\n          }\n        }\n        callback(null, newResults);\n      }, function (err) {\n        callback(err);\n      });\n    }\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - function to be called when info for manifest is ready\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {void}\n */\nOfflineController.prototype.getManifestInfo = function (manifestId, callback, full) {\n  var self = this;\n  function addManifestInfoAndContinue(info) {\n    var manifestName = info.manifest.name;\n    var manifestUrl = info.manifest.url;\n    var manifestLocalUrl = path.resolve(appSettings.getSettings().settingsFolder + "/" + manifestId + "/" + manifestName);\n    var manifest = self._manifestController.getManifestById(manifestId);\n    if (manifest) {\n      info.manifestInfo = manifest.getJsonInfo();\n      callback(null, info);\n    } else {\n      manifest = new Manifest(manifestId);\n      manifest.loadFromLocal(manifestLocalUrl, manifestUrl).then(function () {\n        self._manifestController.cacheManifest(manifest);\n        info.manifestInfo = manifest.getJsonInfo();\n        callback(null, info);\n      }, function (err) {\n        if (err && err.code === "ENOENT") {\n          callback();\n        } else {\n          callback(err);\n        }\n      });\n    }\n  }\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST), new ReadItem(manifestId, appSettings.getSettings().stores.DOWNLOADS.DOWNLOADED), new ReadItem(manifestId, appSettings.getSettings().stores.STATUS), new ReadItem(manifestId, appSettings.getSettings().stores.PERSISTENT), new ReadItem(manifestId, appSettings.getSettings().stores.DATA)]).then(function (results) {\n    var info = {};\n    var manifestSettings = results[0] || {};\n    var downloaded = results[1] || [];\n    var status = results[2] || {};\n    var persistent = results[3] || \'\';\n    var data = results[4] || \'\';\n    info.status = status.status || STATUSES.BROKEN;\n    info.details = status.details || undefined;\n    if (!self.downloadStorage.keyExists(manifestId) && info.status === STATUSES.STARTED) {\n      info.status = STATUSES.BROKEN;\n    }\n    info.manifest = manifestSettings;\n    if (info.manifest.files) {\n      info.manifest.totalFiles = info.manifest.files.length;\n      if (full === false) {\n        delete info.manifest.files;\n      }\n    }\n    info.left = status.left || 0;\n    info.persistent = persistent;\n    info.downloaded = downloaded.length;\n    if (full) {\n      info.downloadedFiles = downloaded;\n    }\n    info.data = data;\n    addManifestInfoAndContinue(info);\n  }, callback);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - function to be called when info for manifest is ready\n * @returns {void}\n */\nOfflineController.prototype.getManifestFolderInfo = function (manifestId, callback) {\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST)]).then(function (results) {\n    var info = {};\n    var manifestSettings = results[0] || {};\n    var downloadFolder = manifestSettings.folder;\n    if (!downloadFolder) {\n      // try to serve from default download folder\n      downloadFolder = appSettings.getSettings().downloadsFolderPath;\n    }\n    var videoFolder = path.join(downloadFolder, manifestId);\n    info.folder = videoFolder;\n\n    // get size of folder\n    getSize(videoFolder, function (err, size) {\n      if (err) {\n        info.size = 0;\n      } else {\n        info.size = size;\n      }\n      callback(null, info);\n    });\n  }, callback);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {Promise} - promise\n */\nOfflineController.prototype.getManifestInfoPromise = function (manifestId, full) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.getManifestInfo(manifestId, function (err, result) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    }, full);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - callback with resolved info data about manifest - if such exists\n * @returns {void}\n */\nOfflineController.prototype.getManifestDataFile = function (manifestId, callback) {\n  new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST).then(function (data) {\n    callback(data);\n  }, function () {\n    callback();\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} onSuccess - callback to be invoked when remove has been successfully\n * @param {Function} onFailure - callback to be invoked when remove failed\n * @returns {void}\n */\nOfflineController.prototype.remove = function (manifestId, onSuccess, onFailure) {\n  var settingsFolder = appSettings.getSettings().settingsFolder + manifestId;\n  this.getManifestDataFile(manifestId, function (info) {\n    if (!info) {\n      // no manifest data found for manifest, the download has not been started => just remove settings\n      rmdir(settingsFolder, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(err);\n        } else {\n          onSuccess();\n        }\n      });\n    } else {\n      var folder = info.folder;\n      if (!folder) {\n        // use default download folder path\n        folder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n      }\n      var downloadsFolder = folder + \'/\' + manifestId;\n      rmdir(downloadsFolder, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(err);\n        } else {\n          rmdir(settingsFolder, function (err) {\n            if (err && err.code !== "ENOENT") {\n              onFailure(err);\n            } else {\n              onSuccess();\n            }\n          });\n        }\n      });\n    }\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} - promise\n */\nOfflineController.prototype.removePromise = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.remove(manifestId, resolve, reject);\n  });\n};\n\n/**\n *\n * @returns {Promise} - promise\n */\nOfflineController.prototype.removeAllPromise = function () {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var settingsFolder = appSettings.getSettings().settingsFolder;\n    self.getManifestsList(function (err, list) {\n      if (err) {\n        reject(err);\n      } else {\n        var removeP = [];\n        for (var i = 0, j = list.length; i < j; i++) {\n          removeP.push(self.removePromise(list[i]));\n        }\n        Promise.all(removeP).then(function () {\n          rmdir(settingsFolder, function (err) {\n            if (err && err.code !== "ENOENT") {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        }, function (err) {\n          reject(err);\n        });\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} onSuccess - callback to be invoked when restore has been successfully\n * @param {Function} onFailure - callback to be invoked when restore failed\n * @returns {void}\n */\nOfflineController.prototype.restoreLocalManifest = function (manifestId, onSuccess, onFailure) {\n  var self = this;\n  this.getManifestInfo(manifestId, function (err, info) {\n    var representations = {};\n    representations.video = info.manifest.video;\n    representations.audio = info.manifest.audio;\n    representations.text = info.manifest.text;\n    self._manifestController.saveManifestWithChosenRepresentations(manifestId, representations).then(onSuccess, onFailure);\n  });\n};\n\n/**\n *\n * @param {DownloadsStorageController} storage - downloads storage controller\n * @returns {void}\n */\nOfflineController.prototype.setDownloadStorage = function (storage) {\n  this.downloadStorage = storage;\n};\nmodule.exports = OfflineController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzA5NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsSUFBTSxDQUFDO0FBQzVCLElBQU1DLE9BQU8sR0FBR0QsbUJBQU8sQ0FBQyxJQUFpQixDQUFDO0FBQzFDLElBQU1FLEtBQUssR0FBR0YsbUJBQU8sQ0FBQyxJQUFvQixDQUFDO0FBRTNDLElBQU1HLFdBQVcsR0FBR0gsbUJBQU8sQ0FBQyxJQUFpQixDQUFDO0FBQzlDLElBQU1JLFFBQVEsR0FBR0osbUJBQU8sQ0FBQyxJQUF3QixDQUFDO0FBQ2xELElBQU1LLE9BQU8sR0FBR0wsbUJBQU8sQ0FBQyxJQUFrQixDQUFDO0FBQzNDLElBQU1NLFFBQVEsR0FBR04sNkNBQStDO0FBQ2hFLElBQU1PLFFBQVEsR0FBR1AsbUJBQU8sQ0FBQyxJQUF1QixDQUFDOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU1EsaUJBQWlCLENBQUVDLGtCQUFrQixFQUFFO0VBQzlDLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUdELGtCQUFrQjtBQUMvQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FELGlCQUFpQixDQUFDRyxTQUFTLENBQUNDLGdCQUFnQixHQUFHLFVBQVVDLFFBQVEsRUFBRTtFQUNqRVIsT0FBTyxDQUFDRixXQUFXLENBQUNXLFdBQVcsRUFBRSxDQUFDQyxjQUFjLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUMzREMsSUFBSSxDQUFDLFVBQVVDLGtCQUFrQixFQUFFO0lBQ3BDLElBQUlDLFlBQVksR0FBRyxFQUFFO0lBQ3JCLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUMsQ0FBQyxHQUFHSCxrQkFBa0IsQ0FBQ0ksTUFBTSxFQUFFRixDQUFDLEdBQUdDLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7TUFDekRELFlBQVksQ0FBQ0ksSUFBSSxDQUFDTCxrQkFBa0IsQ0FBQ0UsQ0FBQyxDQUFDLENBQUM7SUFDMUM7SUFDQU4sUUFBUSxDQUFDLElBQUksRUFBRUssWUFBWSxDQUFDO0VBQzlCLENBQUMsRUFBRSxVQUFVSyxHQUFHLEVBQUU7SUFDaEJWLFFBQVEsQ0FBQ1UsR0FBRyxDQUFDO0VBQ2YsQ0FBQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQWYsaUJBQWlCLENBQUNHLFNBQVMsQ0FBQ2Esd0JBQXdCLEdBQUcsVUFBVVgsUUFBUSxFQUFFWSxJQUFJLEVBQUU7RUFDL0UsSUFBTUMsSUFBSSxHQUFHLElBQUk7RUFDakIsSUFBSSxDQUFDZCxnQkFBZ0IsQ0FBQyxVQUFVVyxHQUFHLEVBQUVJLElBQUksRUFBRTtJQUN6QyxJQUFJSixHQUFHLEVBQUU7TUFDUFYsUUFBUSxDQUFDVSxHQUFHLENBQUM7SUFDZixDQUFDLE1BQU07TUFDTCxJQUFJSyxLQUFLLEdBQUcsRUFBRTtNQUNkLEtBQUssSUFBSVQsQ0FBQyxHQUFHLENBQUMsRUFBRUMsQ0FBQyxHQUFHTyxJQUFJLENBQUNOLE1BQU0sRUFBRUYsQ0FBQyxHQUFHQyxDQUFDLEVBQUVELENBQUMsRUFBRSxFQUFFO1FBQzNDUyxLQUFLLENBQUNOLElBQUksQ0FBQ0ksSUFBSSxDQUFDRyxzQkFBc0IsQ0FBQ0YsSUFBSSxDQUFDUixDQUFDLENBQUMsRUFBRU0sSUFBSSxDQUFDLENBQUM7TUFDeEQ7TUFDQUssT0FBTyxDQUFDQyxHQUFHLENBQUNILEtBQUssQ0FBQyxDQUFDWixJQUFJLENBQUMsVUFBVWdCLE9BQU8sRUFBRTtRQUN6QyxJQUFJQyxVQUFVLEdBQUcsRUFBRTtRQUNuQixLQUFLLElBQUlkLEVBQUMsR0FBRyxDQUFDLEVBQUVDLEVBQUMsR0FBR1ksT0FBTyxDQUFDWCxNQUFNLEVBQUVGLEVBQUMsR0FBR0MsRUFBQyxFQUFFRCxFQUFDLEVBQUUsRUFBRTtVQUM5QyxJQUFJYSxPQUFPLENBQUNiLEVBQUMsQ0FBQyxFQUFFO1lBQ2RjLFVBQVUsQ0FBQ1gsSUFBSSxDQUFDVSxPQUFPLENBQUNiLEVBQUMsQ0FBQyxDQUFDO1VBQzdCO1FBQ0Y7UUFDQU4sUUFBUSxDQUFDLElBQUksRUFBRW9CLFVBQVUsQ0FBQztNQUM1QixDQUFDLEVBQUUsVUFBVVYsR0FBRyxFQUFFO1FBQ2hCVixRQUFRLENBQUNVLEdBQUcsQ0FBQztNQUNmLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBZixpQkFBaUIsQ0FBQ0csU0FBUyxDQUFDdUIsZUFBZSxHQUFHLFVBQVVDLFVBQVUsRUFBRXRCLFFBQVEsRUFBRVksSUFBSSxFQUFFO0VBQ2xGLElBQU1DLElBQUksR0FBRyxJQUFJO0VBRWpCLFNBQVNVLDBCQUEwQixDQUFFQyxJQUFJLEVBQUU7SUFDekMsSUFBTUMsWUFBWSxHQUFHRCxJQUFJLENBQUNFLFFBQVEsQ0FBQ0MsSUFBSTtJQUN2QyxJQUFNQyxXQUFXLEdBQUdKLElBQUksQ0FBQ0UsUUFBUSxDQUFDRyxHQUFHO0lBQ3JDLElBQU1DLGdCQUFnQixHQUFHNUMsSUFBSSxDQUFDNkMsT0FBTyxDQUFDekMsV0FBVyxDQUFDVyxXQUFXLEVBQUUsQ0FBQ0MsY0FBYyxHQUFHLEdBQUcsR0FBR29CLFVBQVUsR0FBRyxHQUFHLEdBQUdHLFlBQVksQ0FBQztJQUV2SCxJQUFJQyxRQUFRLEdBQUdiLElBQUksQ0FBQ2hCLG1CQUFtQixDQUFDbUMsZUFBZSxDQUFDVixVQUFVLENBQUM7SUFDbkUsSUFBSUksUUFBUSxFQUFFO01BQ1pGLElBQUksQ0FBQ1MsWUFBWSxHQUFHUCxRQUFRLENBQUNRLFdBQVcsRUFBRTtNQUMxQ2xDLFFBQVEsQ0FBQyxJQUFJLEVBQUV3QixJQUFJLENBQUM7SUFDdEIsQ0FBQyxNQUFNO01BQ0xFLFFBQVEsR0FBRyxJQUFJakMsUUFBUSxDQUFDNkIsVUFBVSxDQUFDO01BQ25DSSxRQUFRLENBQUNTLGFBQWEsQ0FBQ0wsZ0JBQWdCLEVBQUVGLFdBQVcsQ0FBQyxDQUFDekIsSUFBSSxDQUFDLFlBQVk7UUFDckVVLElBQUksQ0FBQ2hCLG1CQUFtQixDQUFDdUMsYUFBYSxDQUFDVixRQUFRLENBQUM7UUFDaERGLElBQUksQ0FBQ1MsWUFBWSxHQUFHUCxRQUFRLENBQUNRLFdBQVcsRUFBRTtRQUMxQ2xDLFFBQVEsQ0FBQyxJQUFJLEVBQUV3QixJQUFJLENBQUM7TUFDdEIsQ0FBQyxFQUFFLFVBQVVkLEdBQUcsRUFBRTtRQUNoQixJQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQzJCLElBQUksS0FBSyxRQUFRLEVBQUU7VUFDaENyQyxRQUFRLEVBQUU7UUFDWixDQUFDLE1BQU07VUFDTEEsUUFBUSxDQUFDVSxHQUFHLENBQUM7UUFDZjtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0Y7RUFFQU8sT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FDVixJQUFJM0IsUUFBUSxDQUFDK0IsVUFBVSxFQUFFaEMsV0FBVyxDQUFDVyxXQUFXLEVBQUUsQ0FBQ3FDLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDLEVBQ25FLElBQUloRCxRQUFRLENBQUMrQixVQUFVLEVBQUVoQyxXQUFXLENBQUNXLFdBQVcsRUFBRSxDQUFDcUMsTUFBTSxDQUFDRSxTQUFTLENBQUNDLFVBQVUsQ0FBQyxFQUMvRSxJQUFJbEQsUUFBUSxDQUFDK0IsVUFBVSxFQUFFaEMsV0FBVyxDQUFDVyxXQUFXLEVBQUUsQ0FBQ3FDLE1BQU0sQ0FBQ0ksTUFBTSxDQUFDLEVBQ2pFLElBQUluRCxRQUFRLENBQUMrQixVQUFVLEVBQUVoQyxXQUFXLENBQUNXLFdBQVcsRUFBRSxDQUFDcUMsTUFBTSxDQUFDSyxVQUFVLENBQUMsRUFDckUsSUFBSXBELFFBQVEsQ0FBQytCLFVBQVUsRUFBRWhDLFdBQVcsQ0FBQ1csV0FBVyxFQUFFLENBQUNxQyxNQUFNLENBQUNNLElBQUksQ0FBQyxDQUNoRSxDQUFDLENBQUN6QyxJQUFJLENBQUMsVUFBVWdCLE9BQU8sRUFBRTtJQUN6QixJQUFJSyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsSUFBTXFCLGdCQUFnQixHQUFHMUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV6QyxJQUFNMkIsVUFBVSxHQUFHM0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7SUFDbkMsSUFBTTRCLE1BQU0sR0FBRzVCLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsSUFBTTZCLFVBQVUsR0FBRzdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFO0lBQ25DLElBQU04QixJQUFJLEdBQUc5QixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtJQUU3QkssSUFBSSxDQUFDdUIsTUFBTSxHQUFHQSxNQUFNLENBQUNBLE1BQU0sSUFBSXJELFFBQVEsQ0FBQ3dELE1BQU07SUFDOUMxQixJQUFJLENBQUMyQixPQUFPLEdBQUdKLE1BQU0sQ0FBQ0ksT0FBTyxJQUFJQyxTQUFTO0lBQzFDLElBQUksQ0FBQ3ZDLElBQUksQ0FBQ3dDLGVBQWUsQ0FBQ0MsU0FBUyxDQUFDaEMsVUFBVSxDQUFDLElBQUlFLElBQUksQ0FBQ3VCLE1BQU0sS0FBS3JELFFBQVEsQ0FBQzZELE9BQU8sRUFBRTtNQUNuRi9CLElBQUksQ0FBQ3VCLE1BQU0sR0FBR3JELFFBQVEsQ0FBQ3dELE1BQU07SUFDL0I7SUFDQTFCLElBQUksQ0FBQ0UsUUFBUSxHQUFHbUIsZ0JBQWdCO0lBQ2hDLElBQUlyQixJQUFJLENBQUNFLFFBQVEsQ0FBQzhCLEtBQUssRUFBRTtNQUN2QmhDLElBQUksQ0FBQ0UsUUFBUSxDQUFDK0IsVUFBVSxHQUFHakMsSUFBSSxDQUFDRSxRQUFRLENBQUM4QixLQUFLLENBQUNoRCxNQUFNO01BQ3JELElBQUlJLElBQUksS0FBSyxLQUFLLEVBQUU7UUFDbEIsT0FBT1ksSUFBSSxDQUFDRSxRQUFRLENBQUM4QixLQUFLO01BQzVCO0lBQ0Y7SUFDQWhDLElBQUksQ0FBQ2tDLElBQUksR0FBR1gsTUFBTSxDQUFDVyxJQUFJLElBQUksQ0FBQztJQUM1QmxDLElBQUksQ0FBQ3dCLFVBQVUsR0FBR0EsVUFBVTtJQUM1QnhCLElBQUksQ0FBQ3NCLFVBQVUsR0FBR0EsVUFBVSxDQUFDdEMsTUFBTTtJQUNuQyxJQUFJSSxJQUFJLEVBQUU7TUFDUlksSUFBSSxDQUFDbUMsZUFBZSxHQUFHYixVQUFVO0lBQ25DO0lBQ0F0QixJQUFJLENBQUN5QixJQUFJLEdBQUdBLElBQUk7SUFDaEIxQiwwQkFBMEIsQ0FBQ0MsSUFBSSxDQUFDO0VBRWxDLENBQUMsRUFBRXhCLFFBQVEsQ0FBQztBQUNkLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FMLGlCQUFpQixDQUFDRyxTQUFTLENBQUM4RCxxQkFBcUIsR0FBRyxVQUFVdEMsVUFBVSxFQUFFdEIsUUFBUSxFQUFFO0VBQ2xGaUIsT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FDVixJQUFJM0IsUUFBUSxDQUFDK0IsVUFBVSxFQUFFaEMsV0FBVyxDQUFDVyxXQUFXLEVBQUUsQ0FBQ3FDLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDLENBQ3BFLENBQUMsQ0FBQ3BDLElBQUksQ0FBQyxVQUFVZ0IsT0FBTyxFQUFFO0lBQ3pCLElBQUlLLElBQUksR0FBRyxDQUFDLENBQUM7SUFDYixJQUFNcUIsZ0JBQWdCLEdBQUcxQixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpDLElBQUkwQyxjQUFjLEdBQUdoQixnQkFBZ0IsQ0FBQ2lCLE1BQU07SUFDNUMsSUFBSSxDQUFDRCxjQUFjLEVBQUU7TUFDbkI7TUFDQUEsY0FBYyxHQUFHdkUsV0FBVyxDQUFDVyxXQUFXLEVBQUUsQ0FBQzhELG1CQUFtQjtJQUNoRTtJQUNBLElBQUlDLFdBQVcsR0FBRzlFLElBQUksQ0FBQytFLElBQUksQ0FBQ0osY0FBYyxFQUFFdkMsVUFBVSxDQUFDO0lBRXZERSxJQUFJLENBQUNzQyxNQUFNLEdBQUdFLFdBQVc7O0lBRXpCO0lBQ0E1RSxPQUFPLENBQUM0RSxXQUFXLEVBQUUsVUFBQ3RELEdBQUcsRUFBRXdELElBQUksRUFBSztNQUNsQyxJQUFJeEQsR0FBRyxFQUFFO1FBQ1BjLElBQUksQ0FBQzBDLElBQUksR0FBRyxDQUFDO01BQ2YsQ0FBQyxNQUFNO1FBQ0wxQyxJQUFJLENBQUMwQyxJQUFJLEdBQUdBLElBQUk7TUFDbEI7TUFDQWxFLFFBQVEsQ0FBQyxJQUFJLEVBQUV3QixJQUFJLENBQUM7SUFDdEIsQ0FBQyxDQUFDO0VBRUosQ0FBQyxFQUFFeEIsUUFBUSxDQUFDO0FBQ2QsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUwsaUJBQWlCLENBQUNHLFNBQVMsQ0FBQ2tCLHNCQUFzQixHQUFHLFVBQVVNLFVBQVUsRUFBRVYsSUFBSSxFQUFFO0VBQy9FLElBQU1DLElBQUksR0FBRyxJQUFJO0VBQ2pCLE9BQU8sSUFBSUksT0FBTyxDQUFDLFVBQVVjLE9BQU8sRUFBRW9DLE1BQU0sRUFBRTtJQUM1Q3RELElBQUksQ0FBQ1EsZUFBZSxDQUFDQyxVQUFVLEVBQUUsVUFBVVosR0FBRyxFQUFFMEQsTUFBTSxFQUFFO01BQ3RELElBQUkxRCxHQUFHLEVBQUU7UUFDUHlELE1BQU0sQ0FBQ3pELEdBQUcsQ0FBQztNQUNiLENBQUMsTUFBTTtRQUNMcUIsT0FBTyxDQUFDcUMsTUFBTSxDQUFDO01BQ2pCO0lBQ0YsQ0FBQyxFQUFFeEQsSUFBSSxDQUFDO0VBQ1YsQ0FBQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQWpCLGlCQUFpQixDQUFDRyxTQUFTLENBQUN1RSxtQkFBbUIsR0FBRyxVQUFVL0MsVUFBVSxFQUFFdEIsUUFBUSxFQUFFO0VBQ2hGLElBQUlULFFBQVEsQ0FBQytCLFVBQVUsRUFBRWhDLFdBQVcsQ0FBQ1csV0FBVyxFQUFFLENBQUNxQyxNQUFNLENBQUNDLFFBQVEsQ0FBQyxDQUFDcEMsSUFBSSxDQUFDLFVBQVU4QyxJQUFJLEVBQUU7SUFDdkZqRCxRQUFRLENBQUNpRCxJQUFJLENBQUM7RUFDaEIsQ0FBQyxFQUFFLFlBQVk7SUFDYmpELFFBQVEsRUFBRTtFQUNaLENBQUMsQ0FBQztBQUNKLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUwsaUJBQWlCLENBQUNHLFNBQVMsQ0FBQ3dFLE1BQU0sR0FBRyxVQUFVaEQsVUFBVSxFQUFFaUQsU0FBUyxFQUFFQyxTQUFTLEVBQUU7RUFDL0UsSUFBTXRFLGNBQWMsR0FBR1osV0FBVyxDQUFDVyxXQUFXLEVBQUUsQ0FBQ0MsY0FBYyxHQUFHb0IsVUFBVTtFQUM1RSxJQUFJLENBQUMrQyxtQkFBbUIsQ0FBRS9DLFVBQVUsRUFBRSxVQUFVRSxJQUFJLEVBQUU7SUFDcEQsSUFBSSxDQUFDQSxJQUFJLEVBQUU7TUFDVDtNQUNBbkMsS0FBSyxDQUFDYSxjQUFjLEVBQUUsVUFBVVEsR0FBRyxFQUFFO1FBQ25DLElBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDMkIsSUFBSSxLQUFLLFFBQVEsRUFBRTtVQUNoQ21DLFNBQVMsQ0FBQzlELEdBQUcsQ0FBQztRQUNoQixDQUFDLE1BQU07VUFDTDZELFNBQVMsRUFBRTtRQUNiO01BQ0YsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxNQUFNO01BQ0wsSUFBSVQsTUFBTSxHQUFHdEMsSUFBSSxDQUFDc0MsTUFBTTtNQUN4QixJQUFJLENBQUNBLE1BQU0sRUFBRTtRQUNYO1FBQ0FBLE1BQU0sR0FBSTVFLElBQUksQ0FBQzZDLE9BQU8sQ0FBQ3pDLFdBQVcsQ0FBQ1csV0FBVyxFQUFFLENBQUM4RCxtQkFBbUIsQ0FBQztNQUN2RTtNQUNBLElBQU1VLGVBQWUsR0FBR1gsTUFBTSxHQUFHLEdBQUcsR0FBR3hDLFVBQVU7TUFDakRqQyxLQUFLLENBQUNvRixlQUFlLEVBQUUsVUFBVS9ELEdBQUcsRUFBRTtRQUNwQyxJQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQzJCLElBQUksS0FBSyxRQUFRLEVBQUU7VUFDaENtQyxTQUFTLENBQUM5RCxHQUFHLENBQUM7UUFDaEIsQ0FBQyxNQUFNO1VBQ0xyQixLQUFLLENBQUNhLGNBQWMsRUFBRSxVQUFVUSxHQUFHLEVBQUU7WUFDbkMsSUFBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUMyQixJQUFJLEtBQUssUUFBUSxFQUFFO2NBQ2hDbUMsU0FBUyxDQUFDOUQsR0FBRyxDQUFDO1lBQ2hCLENBQUMsTUFBTTtjQUNMNkQsU0FBUyxFQUFFO1lBQ2I7VUFDRixDQUFDLENBQUM7UUFDSjtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E1RSxpQkFBaUIsQ0FBQ0csU0FBUyxDQUFDNEUsYUFBYSxHQUFHLFVBQVVwRCxVQUFVLEVBQUU7RUFDaEUsSUFBTVQsSUFBSSxHQUFHLElBQUk7RUFDakIsT0FBTyxJQUFJSSxPQUFPLENBQUMsVUFBVWMsT0FBTyxFQUFFb0MsTUFBTSxFQUFFO0lBQzVDdEQsSUFBSSxDQUFDeUQsTUFBTSxDQUFDaEQsVUFBVSxFQUFFUyxPQUFPLEVBQUVvQyxNQUFNLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBeEUsaUJBQWlCLENBQUNHLFNBQVMsQ0FBQzZFLGdCQUFnQixHQUFHLFlBQVk7RUFDekQsSUFBTTlELElBQUksR0FBRyxJQUFJO0VBQ2pCLE9BQU8sSUFBSUksT0FBTyxDQUFDLFVBQVVjLE9BQU8sRUFBRW9DLE1BQU0sRUFBRTtJQUM1QyxJQUFNakUsY0FBYyxHQUFHWixXQUFXLENBQUNXLFdBQVcsRUFBRSxDQUFDQyxjQUFjO0lBRS9EVyxJQUFJLENBQUNkLGdCQUFnQixDQUFDLFVBQVVXLEdBQUcsRUFBRUksSUFBSSxFQUFFO01BQ3pDLElBQUlKLEdBQUcsRUFBRTtRQUNQeUQsTUFBTSxDQUFDekQsR0FBRyxDQUFDO01BQ2IsQ0FBQyxNQUFNO1FBQ0wsSUFBSWtFLE9BQU8sR0FBRyxFQUFFO1FBQ2hCLEtBQUssSUFBSXRFLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR08sSUFBSSxDQUFDTixNQUFNLEVBQUVGLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtVQUMzQ3NFLE9BQU8sQ0FBQ25FLElBQUksQ0FBQ0ksSUFBSSxDQUFDNkQsYUFBYSxDQUFDNUQsSUFBSSxDQUFDUixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNDO1FBQ0FXLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDMEQsT0FBTyxDQUFDLENBQUN6RSxJQUFJLENBQUMsWUFBWTtVQUNwQ2QsS0FBSyxDQUFDYSxjQUFjLEVBQUUsVUFBVVEsR0FBRyxFQUFFO1lBQ25DLElBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDMkIsSUFBSSxLQUFLLFFBQVEsRUFBRTtjQUNoQzhCLE1BQU0sQ0FBQ3pELEdBQUcsQ0FBQztZQUNiLENBQUMsTUFBTTtjQUNMcUIsT0FBTyxFQUFFO1lBQ1g7VUFDRixDQUFDLENBQUM7UUFDSixDQUFDLEVBQUUsVUFBVXJCLEdBQUcsRUFBRTtVQUNoQnlELE1BQU0sQ0FBQ3pELEdBQUcsQ0FBQztRQUNiLENBQUMsQ0FBQztNQUNKO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FmLGlCQUFpQixDQUFDRyxTQUFTLENBQUMrRSxvQkFBb0IsR0FBRyxVQUFVdkQsVUFBVSxFQUFFaUQsU0FBUyxFQUFFQyxTQUFTLEVBQUU7RUFDN0YsSUFBTTNELElBQUksR0FBRyxJQUFJO0VBQ2pCLElBQUksQ0FBQ1EsZUFBZSxDQUFDQyxVQUFVLEVBQUUsVUFBVVosR0FBRyxFQUFFYyxJQUFJLEVBQUU7SUFDcEQsSUFBSXNELGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDeEJBLGVBQWUsQ0FBQ0MsS0FBSyxHQUFHdkQsSUFBSSxDQUFDRSxRQUFRLENBQUNxRCxLQUFLO0lBQzNDRCxlQUFlLENBQUNFLEtBQUssR0FBR3hELElBQUksQ0FBQ0UsUUFBUSxDQUFDc0QsS0FBSztJQUMzQ0YsZUFBZSxDQUFDRyxJQUFJLEdBQUd6RCxJQUFJLENBQUNFLFFBQVEsQ0FBQ3VELElBQUk7SUFDekNwRSxJQUFJLENBQUNoQixtQkFBbUIsQ0FBQ3FGLHFDQUFxQyxDQUFDNUQsVUFBVSxFQUFFd0QsZUFBZSxDQUFDLENBQ3RGM0UsSUFBSSxDQUFDb0UsU0FBUyxFQUFFQyxTQUFTLENBQUM7RUFDakMsQ0FBQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E3RSxpQkFBaUIsQ0FBQ0csU0FBUyxDQUFDcUYsa0JBQWtCLEdBQUcsVUFBVUMsT0FBTyxFQUFFO0VBQ2xFLElBQUksQ0FBQy9CLGVBQWUsR0FBRytCLE9BQU87QUFDaEMsQ0FBQztBQUVEQyxNQUFNLENBQUNDLE9BQU8sR0FBRzNGLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvY29udHJvbGxlcnMvb2ZmbGluZS1jb250cm9sbGVyLmpzP2U2YmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBnZXRTaXplID0gcmVxdWlyZShcImdldC1mb2xkZXItc2l6ZVwiKTtcbmNvbnN0IHJtZGlyID0gcmVxdWlyZShcIi4uL3V0aWwvcmVtb3ZlLWRpclwiKTtcblxuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKFwiLi4vYXBwLXNldHRpbmdzXCIpO1xuY29uc3QgUmVhZEl0ZW0gPSByZXF1aXJlKFwiLi4vZG93bmxvYWRzL3JlYWQtaXRlbVwiKTtcbmNvbnN0IGRpckxpc3QgPSByZXF1aXJlKFwiLi4vdXRpbC9kaXItbGlzdFwiKTtcbmNvbnN0IE1hbmlmZXN0ID0gcmVxdWlyZShcIi4uL21hbmlmZXN0L2xvYWRlci9tYW5pZmVzdFwiKS5NYW5pZmVzdDtcbmNvbnN0IFNUQVRVU0VTID0gcmVxdWlyZShcIi4uL2Rvd25sb2Fkcy9zdGF0dXNlc1wiKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtNYW5pZmVzdENvbnRyb2xsZXJ9IG1hbmlmZXN0Q29udHJvbGxlciAtIHJlZmVyZW5jZSB0byBleGlzdGluZyBtYW5pZmVzdCBjb250cm9sbGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gT2ZmbGluZUNvbnRyb2xsZXIgKG1hbmlmZXN0Q29udHJvbGxlcikge1xuICB0aGlzLl9tYW5pZmVzdENvbnRyb2xsZXIgPSBtYW5pZmVzdENvbnRyb2xsZXI7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gbGlzdCBpcyByZWFkeVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbk9mZmxpbmVDb250cm9sbGVyLnByb3RvdHlwZS5nZXRNYW5pZmVzdHNMaXN0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIGRpckxpc3QoYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zZXR0aW5nc0ZvbGRlciwgdHJ1ZSwgZmFsc2UpXG4gICAgLnRoZW4oZnVuY3Rpb24gKHNldHRpbmdzRm9sZGVyTGlzdCkge1xuICAgIGxldCBtYW5pZmVzdExpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IHNldHRpbmdzRm9sZGVyTGlzdC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIG1hbmlmZXN0TGlzdC5wdXNoKHNldHRpbmdzRm9sZGVyTGlzdFtpXSk7XG4gICAgfVxuICAgIGNhbGxiYWNrKG51bGwsIG1hbmlmZXN0TGlzdCk7XG4gIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBjYWxsYmFjayhlcnIpXG4gIH0pO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBsaXN0IHdpdGggaW5mbyBpcyByZWFkeVxuICogQHBhcmFtIHtCb29sZWFufSBmdWxsIC0gaWYgZG93bmxvYWRlZCBpbmZvIHNob3VsZCBjb250YWluIGFsbCBpdGVtcyBvciBvbmx5IHRoZSBsZW5ndGhcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5PZmZsaW5lQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBmdWxsKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICB0aGlzLmdldE1hbmlmZXN0c0xpc3QoZnVuY3Rpb24gKGVyciwgbGlzdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBpbmZvUCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBsaXN0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICBpbmZvUC5wdXNoKHNlbGYuZ2V0TWFuaWZlc3RJbmZvUHJvbWlzZShsaXN0W2ldLCBmdWxsKSlcbiAgICAgIH1cbiAgICAgIFByb21pc2UuYWxsKGluZm9QKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgIGxldCBuZXdSZXN1bHRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0c1tpXSkge1xuICAgICAgICAgICAgbmV3UmVzdWx0cy5wdXNoKHJlc3VsdHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhudWxsLCBuZXdSZXN1bHRzKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gaW5mbyBmb3IgbWFuaWZlc3QgaXMgcmVhZHlcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZnVsbCAtIGlmIGRvd25sb2FkZWQgaW5mbyBzaG91bGQgY29udGFpbiBhbGwgaXRlbXMgb3Igb25seSB0aGUgbGVuZ3RoXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuT2ZmbGluZUNvbnRyb2xsZXIucHJvdG90eXBlLmdldE1hbmlmZXN0SW5mbyA9IGZ1bmN0aW9uIChtYW5pZmVzdElkLCBjYWxsYmFjaywgZnVsbCkge1xuICBjb25zdCBzZWxmID0gdGhpcztcblxuICBmdW5jdGlvbiBhZGRNYW5pZmVzdEluZm9BbmRDb250aW51ZSAoaW5mbykge1xuICAgIGNvbnN0IG1hbmlmZXN0TmFtZSA9IGluZm8ubWFuaWZlc3QubmFtZTtcbiAgICBjb25zdCBtYW5pZmVzdFVybCA9IGluZm8ubWFuaWZlc3QudXJsO1xuICAgIGNvbnN0IG1hbmlmZXN0TG9jYWxVcmwgPSBwYXRoLnJlc29sdmUoYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zZXR0aW5nc0ZvbGRlciArIFwiL1wiICsgbWFuaWZlc3RJZCArIFwiL1wiICsgbWFuaWZlc3ROYW1lKTtcblxuICAgIGxldCBtYW5pZmVzdCA9IHNlbGYuX21hbmlmZXN0Q29udHJvbGxlci5nZXRNYW5pZmVzdEJ5SWQobWFuaWZlc3RJZCk7XG4gICAgaWYgKG1hbmlmZXN0KSB7XG4gICAgICBpbmZvLm1hbmlmZXN0SW5mbyA9IG1hbmlmZXN0LmdldEpzb25JbmZvKCk7XG4gICAgICBjYWxsYmFjayhudWxsLCBpbmZvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWFuaWZlc3QgPSBuZXcgTWFuaWZlc3QobWFuaWZlc3RJZCk7XG4gICAgICBtYW5pZmVzdC5sb2FkRnJvbUxvY2FsKG1hbmlmZXN0TG9jYWxVcmwsIG1hbmlmZXN0VXJsKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5fbWFuaWZlc3RDb250cm9sbGVyLmNhY2hlTWFuaWZlc3QobWFuaWZlc3QpO1xuICAgICAgICBpbmZvLm1hbmlmZXN0SW5mbyA9IG1hbmlmZXN0LmdldEpzb25JbmZvKCk7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGluZm8pO1xuICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyICYmIGVyci5jb2RlID09PSBcIkVOT0VOVFwiKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBQcm9taXNlLmFsbChbXG4gICAgbmV3IFJlYWRJdGVtKG1hbmlmZXN0SWQsIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc3RvcmVzLk1BTklGRVNUKSxcbiAgICBuZXcgUmVhZEl0ZW0obWFuaWZlc3RJZCwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9yZXMuRE9XTkxPQURTLkRPV05MT0FERUQpLFxuICAgIG5ldyBSZWFkSXRlbShtYW5pZmVzdElkLCBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnN0b3Jlcy5TVEFUVVMpLFxuICAgIG5ldyBSZWFkSXRlbShtYW5pZmVzdElkLCBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnN0b3Jlcy5QRVJTSVNURU5UKSxcbiAgICBuZXcgUmVhZEl0ZW0obWFuaWZlc3RJZCwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9yZXMuREFUQSksXG4gIF0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICBsZXQgaW5mbyA9IHt9O1xuICAgIGNvbnN0IG1hbmlmZXN0U2V0dGluZ3MgPSByZXN1bHRzWzBdIHx8IHt9O1xuXG4gICAgY29uc3QgZG93bmxvYWRlZCA9IHJlc3VsdHNbMV0gfHwgW107XG4gICAgY29uc3Qgc3RhdHVzID0gcmVzdWx0c1syXSB8fCB7fTtcbiAgICBjb25zdCBwZXJzaXN0ZW50ID0gcmVzdWx0c1szXSB8fCAnJztcbiAgICBjb25zdCBkYXRhID0gcmVzdWx0c1s0XSB8fCAnJztcblxuICAgIGluZm8uc3RhdHVzID0gc3RhdHVzLnN0YXR1cyB8fCBTVEFUVVNFUy5CUk9LRU47XG4gICAgaW5mby5kZXRhaWxzID0gc3RhdHVzLmRldGFpbHMgfHwgdW5kZWZpbmVkO1xuICAgIGlmICghc2VsZi5kb3dubG9hZFN0b3JhZ2Uua2V5RXhpc3RzKG1hbmlmZXN0SWQpICYmIGluZm8uc3RhdHVzID09PSBTVEFUVVNFUy5TVEFSVEVEKSB7XG4gICAgICBpbmZvLnN0YXR1cyA9IFNUQVRVU0VTLkJST0tFTjtcbiAgICB9XG4gICAgaW5mby5tYW5pZmVzdCA9IG1hbmlmZXN0U2V0dGluZ3M7XG4gICAgaWYgKGluZm8ubWFuaWZlc3QuZmlsZXMpIHtcbiAgICAgIGluZm8ubWFuaWZlc3QudG90YWxGaWxlcyA9IGluZm8ubWFuaWZlc3QuZmlsZXMubGVuZ3RoO1xuICAgICAgaWYgKGZ1bGwgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlbGV0ZSBpbmZvLm1hbmlmZXN0LmZpbGVzO1xuICAgICAgfVxuICAgIH1cbiAgICBpbmZvLmxlZnQgPSBzdGF0dXMubGVmdCB8fCAwO1xuICAgIGluZm8ucGVyc2lzdGVudCA9IHBlcnNpc3RlbnQ7XG4gICAgaW5mby5kb3dubG9hZGVkID0gZG93bmxvYWRlZC5sZW5ndGg7XG4gICAgaWYgKGZ1bGwpIHtcbiAgICAgIGluZm8uZG93bmxvYWRlZEZpbGVzID0gZG93bmxvYWRlZDtcbiAgICB9XG4gICAgaW5mby5kYXRhID0gZGF0YTtcbiAgICBhZGRNYW5pZmVzdEluZm9BbmRDb250aW51ZShpbmZvKTtcblxuICB9LCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gaW5mbyBmb3IgbWFuaWZlc3QgaXMgcmVhZHlcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5PZmZsaW5lQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0TWFuaWZlc3RGb2xkZXJJbmZvID0gZnVuY3Rpb24gKG1hbmlmZXN0SWQsIGNhbGxiYWNrKSB7XG4gIFByb21pc2UuYWxsKFtcbiAgICBuZXcgUmVhZEl0ZW0obWFuaWZlc3RJZCwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9yZXMuTUFOSUZFU1QpLFxuICBdKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgbGV0IGluZm8gPSB7fTtcbiAgICBjb25zdCBtYW5pZmVzdFNldHRpbmdzID0gcmVzdWx0c1swXSB8fCB7fTtcblxuICAgIGxldCBkb3dubG9hZEZvbGRlciA9IG1hbmlmZXN0U2V0dGluZ3MuZm9sZGVyO1xuICAgIGlmICghZG93bmxvYWRGb2xkZXIpIHtcbiAgICAgIC8vIHRyeSB0byBzZXJ2ZSBmcm9tIGRlZmF1bHQgZG93bmxvYWQgZm9sZGVyXG4gICAgICBkb3dubG9hZEZvbGRlciA9IGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuZG93bmxvYWRzRm9sZGVyUGF0aFxuICAgIH1cbiAgICBsZXQgdmlkZW9Gb2xkZXIgPSBwYXRoLmpvaW4oZG93bmxvYWRGb2xkZXIsIG1hbmlmZXN0SWQpO1xuXG4gICAgaW5mby5mb2xkZXIgPSB2aWRlb0ZvbGRlcjtcblxuICAgIC8vIGdldCBzaXplIG9mIGZvbGRlclxuICAgIGdldFNpemUodmlkZW9Gb2xkZXIsIChlcnIsIHNpemUpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgaW5mby5zaXplID0gMFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5mby5zaXplID0gc2l6ZTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIGluZm8pO1xuICAgIH0pO1xuXG4gIH0sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtCb29sZWFufSBmdWxsIC0gaWYgZG93bmxvYWRlZCBpbmZvIHNob3VsZCBjb250YWluIGFsbCBpdGVtcyBvciBvbmx5IHRoZSBsZW5ndGhcbiAqIEByZXR1cm5zIHtQcm9taXNlfSAtIHByb21pc2VcbiAqL1xuT2ZmbGluZUNvbnRyb2xsZXIucHJvdG90eXBlLmdldE1hbmlmZXN0SW5mb1Byb21pc2UgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgZnVsbCkge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZWxmLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9LCBmdWxsKVxuICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBjYWxsYmFjayB3aXRoIHJlc29sdmVkIGluZm8gZGF0YSBhYm91dCBtYW5pZmVzdCAtIGlmIHN1Y2ggZXhpc3RzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuT2ZmbGluZUNvbnRyb2xsZXIucHJvdG90eXBlLmdldE1hbmlmZXN0RGF0YUZpbGUgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgY2FsbGJhY2spIHtcbiAgbmV3IFJlYWRJdGVtKG1hbmlmZXN0SWQsIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc3RvcmVzLk1BTklGRVNUKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgY2FsbGJhY2soZGF0YSk7XG4gIH0sIGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjaygpO1xuICB9KVxufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblN1Y2Nlc3MgLSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gcmVtb3ZlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseVxuICogQHBhcmFtIHtGdW5jdGlvbn0gb25GYWlsdXJlIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHJlbW92ZSBmYWlsZWRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5PZmZsaW5lQ29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG1hbmlmZXN0SWQsIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIGNvbnN0IHNldHRpbmdzRm9sZGVyID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zZXR0aW5nc0ZvbGRlciArIG1hbmlmZXN0SWQ7XG4gIHRoaXMuZ2V0TWFuaWZlc3REYXRhRmlsZSggbWFuaWZlc3RJZCwgZnVuY3Rpb24gKGluZm8pIHtcbiAgICBpZiAoIWluZm8pIHtcbiAgICAgIC8vIG5vIG1hbmlmZXN0IGRhdGEgZm91bmQgZm9yIG1hbmlmZXN0LCB0aGUgZG93bmxvYWQgaGFzIG5vdCBiZWVuIHN0YXJ0ZWQgPT4ganVzdCByZW1vdmUgc2V0dGluZ3NcbiAgICAgIHJtZGlyKHNldHRpbmdzRm9sZGVyLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICBvbkZhaWx1cmUoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvblN1Y2Nlc3MoKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGZvbGRlciA9IGluZm8uZm9sZGVyO1xuICAgICAgaWYgKCFmb2xkZXIpIHtcbiAgICAgICAgLy8gdXNlIGRlZmF1bHQgZG93bmxvYWQgZm9sZGVyIHBhdGhcbiAgICAgICAgZm9sZGVyID0gIHBhdGgucmVzb2x2ZShhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLmRvd25sb2Fkc0ZvbGRlclBhdGgpO1xuICAgICAgfVxuICAgICAgY29uc3QgZG93bmxvYWRzRm9sZGVyID0gZm9sZGVyICsgJy8nICsgbWFuaWZlc3RJZDtcbiAgICAgIHJtZGlyKGRvd25sb2Fkc0ZvbGRlciwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyICYmIGVyci5jb2RlICE9PSBcIkVOT0VOVFwiKSB7XG4gICAgICAgICAgb25GYWlsdXJlKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm1kaXIoc2V0dGluZ3NGb2xkZXIsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICAgICAgb25GYWlsdXJlKGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvblN1Y2Nlc3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pXG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHtQcm9taXNlfSAtIHByb21pc2VcbiAqL1xuT2ZmbGluZUNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZVByb21pc2UgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCkge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZWxmLnJlbW92ZShtYW5pZmVzdElkLCByZXNvbHZlLCByZWplY3QpO1xuICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSAtIHByb21pc2VcbiAqL1xuT2ZmbGluZUNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZUFsbFByb21pc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IHNldHRpbmdzRm9sZGVyID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zZXR0aW5nc0ZvbGRlcjtcblxuICAgIHNlbGYuZ2V0TWFuaWZlc3RzTGlzdChmdW5jdGlvbiAoZXJyLCBsaXN0KSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHJlbW92ZVAgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBsaXN0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgIHJlbW92ZVAucHVzaChzZWxmLnJlbW92ZVByb21pc2UobGlzdFtpXSkpXG4gICAgICAgIH1cbiAgICAgICAgUHJvbWlzZS5hbGwocmVtb3ZlUCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcm1kaXIoc2V0dGluZ3NGb2xkZXIsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblN1Y2Nlc3MgLSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gcmVzdG9yZSBoYXMgYmVlbiBzdWNjZXNzZnVsbHlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uRmFpbHVyZSAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiByZXN0b3JlIGZhaWxlZFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbk9mZmxpbmVDb250cm9sbGVyLnByb3RvdHlwZS5yZXN0b3JlTG9jYWxNYW5pZmVzdCA9IGZ1bmN0aW9uIChtYW5pZmVzdElkLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgdGhpcy5nZXRNYW5pZmVzdEluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVyciwgaW5mbykge1xuICAgIGxldCByZXByZXNlbnRhdGlvbnMgPSB7fTtcbiAgICByZXByZXNlbnRhdGlvbnMudmlkZW8gPSBpbmZvLm1hbmlmZXN0LnZpZGVvO1xuICAgIHJlcHJlc2VudGF0aW9ucy5hdWRpbyA9IGluZm8ubWFuaWZlc3QuYXVkaW87XG4gICAgcmVwcmVzZW50YXRpb25zLnRleHQgPSBpbmZvLm1hbmlmZXN0LnRleHQ7XG4gICAgc2VsZi5fbWFuaWZlc3RDb250cm9sbGVyLnNhdmVNYW5pZmVzdFdpdGhDaG9zZW5SZXByZXNlbnRhdGlvbnMobWFuaWZlc3RJZCwgcmVwcmVzZW50YXRpb25zKVxuICAgICAgICAudGhlbihvblN1Y2Nlc3MsIG9uRmFpbHVyZSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtEb3dubG9hZHNTdG9yYWdlQ29udHJvbGxlcn0gc3RvcmFnZSAtIGRvd25sb2FkcyBzdG9yYWdlIGNvbnRyb2xsZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5PZmZsaW5lQ29udHJvbGxlci5wcm90b3R5cGUuc2V0RG93bmxvYWRTdG9yYWdlID0gZnVuY3Rpb24gKHN0b3JhZ2UpIHtcbiAgdGhpcy5kb3dubG9hZFN0b3JhZ2UgPSBzdG9yYWdlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPZmZsaW5lQ29udHJvbGxlcjtcbiJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImdldFNpemUiLCJybWRpciIsImFwcFNldHRpbmdzIiwiUmVhZEl0ZW0iLCJkaXJMaXN0IiwiTWFuaWZlc3QiLCJTVEFUVVNFUyIsIk9mZmxpbmVDb250cm9sbGVyIiwibWFuaWZlc3RDb250cm9sbGVyIiwiX21hbmlmZXN0Q29udHJvbGxlciIsInByb3RvdHlwZSIsImdldE1hbmlmZXN0c0xpc3QiLCJjYWxsYmFjayIsImdldFNldHRpbmdzIiwic2V0dGluZ3NGb2xkZXIiLCJ0aGVuIiwic2V0dGluZ3NGb2xkZXJMaXN0IiwibWFuaWZlc3RMaXN0IiwiaSIsImoiLCJsZW5ndGgiLCJwdXNoIiwiZXJyIiwiZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvIiwiZnVsbCIsInNlbGYiLCJsaXN0IiwiaW5mb1AiLCJnZXRNYW5pZmVzdEluZm9Qcm9taXNlIiwiUHJvbWlzZSIsImFsbCIsInJlc3VsdHMiLCJuZXdSZXN1bHRzIiwiZ2V0TWFuaWZlc3RJbmZvIiwibWFuaWZlc3RJZCIsImFkZE1hbmlmZXN0SW5mb0FuZENvbnRpbnVlIiwiaW5mbyIsIm1hbmlmZXN0TmFtZSIsIm1hbmlmZXN0IiwibmFtZSIsIm1hbmlmZXN0VXJsIiwidXJsIiwibWFuaWZlc3RMb2NhbFVybCIsInJlc29sdmUiLCJnZXRNYW5pZmVzdEJ5SWQiLCJtYW5pZmVzdEluZm8iLCJnZXRKc29uSW5mbyIsImxvYWRGcm9tTG9jYWwiLCJjYWNoZU1hbmlmZXN0IiwiY29kZSIsInN0b3JlcyIsIk1BTklGRVNUIiwiRE9XTkxPQURTIiwiRE9XTkxPQURFRCIsIlNUQVRVUyIsIlBFUlNJU1RFTlQiLCJEQVRBIiwibWFuaWZlc3RTZXR0aW5ncyIsImRvd25sb2FkZWQiLCJzdGF0dXMiLCJwZXJzaXN0ZW50IiwiZGF0YSIsIkJST0tFTiIsImRldGFpbHMiLCJ1bmRlZmluZWQiLCJkb3dubG9hZFN0b3JhZ2UiLCJrZXlFeGlzdHMiLCJTVEFSVEVEIiwiZmlsZXMiLCJ0b3RhbEZpbGVzIiwibGVmdCIsImRvd25sb2FkZWRGaWxlcyIsImdldE1hbmlmZXN0Rm9sZGVySW5mbyIsImRvd25sb2FkRm9sZGVyIiwiZm9sZGVyIiwiZG93bmxvYWRzRm9sZGVyUGF0aCIsInZpZGVvRm9sZGVyIiwiam9pbiIsInNpemUiLCJyZWplY3QiLCJyZXN1bHQiLCJnZXRNYW5pZmVzdERhdGFGaWxlIiwicmVtb3ZlIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwiZG93bmxvYWRzRm9sZGVyIiwicmVtb3ZlUHJvbWlzZSIsInJlbW92ZUFsbFByb21pc2UiLCJyZW1vdmVQIiwicmVzdG9yZUxvY2FsTWFuaWZlc3QiLCJyZXByZXNlbnRhdGlvbnMiLCJ2aWRlbyIsImF1ZGlvIiwidGV4dCIsInNhdmVNYW5pZmVzdFdpdGhDaG9zZW5SZXByZXNlbnRhdGlvbnMiLCJzZXREb3dubG9hZFN0b3JhZ2UiLCJzdG9yYWdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7094\n')},9256:module=>{"use strict";eval('\n\n/**\n *\n * @constructor\n */\nfunction SubscribersController() {\n  this._subscribers = {};\n}\n\n/**\n *\n * @param {Subscriber} subscriber - subscriber\n * @returns {void}\n */\nSubscribersController.prototype.addSubscriber = function (subscriber) {\n  var id = subscriber.getId();\n  this._subscribers[id] = subscriber;\n  return id;\n};\n\n/**\n *\n * @param {Array|String} subscribersId - subscriber identifier\n * @returns {void}\n */\nSubscribersController.prototype.removeSubscribersById = function (subscribersId) {\n  if (typeof subscribersId === "string") {\n    subscribersId = [subscribersId];\n  }\n  for (var i = 0, j = subscribersId.length; i < j; i++) {\n    if (this._subscribers[subscribersId[i]]) {\n      this._subscribers[subscribersId[i]].remove();\n      delete this._subscribers[subscribersId[i]];\n    }\n  }\n};\n\n/**\n *\n * Remove all subscribers for certain manifest based on any subscriberId that belongs to this manifest\n * @param {Array|String} subscriberId - subscriber identifier\n * @returns {void}\n */\nSubscribersController.prototype.removeAllManifestSubscribersById = function (subscriberId) {\n  var subscriber = subscriberId && this._subscribers[subscriberId];\n  if (subscriber) {\n    this.unsubscribe(subscriber.getManifestId());\n  }\n};\n\n/**\n *\n * @param {Array|String} manifestIds - manifest or manifests identifier\n * @returns {void}\n */\nSubscribersController.prototype.unsubscribe = function (manifestIds) {\n  var subscribersId = [];\n  var manifestIdsHash = {};\n  if (typeof manifestIds === "string") {\n    manifestIds = [manifestIds];\n  }\n  manifestIds = manifestIds || [];\n  for (var i = 0, j = manifestIds.length; i < j; i++) {\n    manifestIdsHash[manifestIds[i]] = true;\n  }\n  for (var key in this._subscribers) {\n    if (this._subscribers.hasOwnProperty(key)) {\n      if (manifestIdsHash[this._subscribers[key].getManifestId()]) {\n        subscribersId.push(key);\n      }\n    }\n  }\n  this.removeSubscribersById(subscribersId);\n};\n\n/**\n * @returns {void}\n */\nSubscribersController.prototype.unsubscribeAll = function () {\n  for (var key in this._subscribers) {\n    if (this._subscribers.hasOwnProperty(key)) {\n      this._subscribers[key].remove();\n    }\n  }\n  this._subscribers = {};\n};\nmodule.exports = SubscribersController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXFCLENBQUNFLFNBQVMsQ0FBQ29CLGNBQWMsR0FBRyxZQUFZO0VBQzNELEtBQUssSUFBSUgsR0FBRyxJQUFJLElBQUksQ0FBQ2xCLFlBQVksRUFBRTtJQUNqQyxJQUFJLElBQUksQ0FBQ0EsWUFBWSxDQUFDbUIsY0FBYyxDQUFDRCxHQUFHLENBQUMsRUFBRTtNQUN6QyxJQUFJLENBQUNsQixZQUFZLENBQUNrQixHQUFHLENBQUMsQ0FBQ1AsTUFBTSxFQUFFO0lBQ2pDO0VBQ0Y7RUFDQSxJQUFJLENBQUNYLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUVEc0IsTUFBTSxDQUFDQyxPQUFPLEdBQUd4QixxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2NvbnRyb2xsZXJzL3N1YnNjcmliZXJzLWNvbnRyb2xsZXIuanM/YTg0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdWJzY3JpYmVyc0NvbnRyb2xsZXIgKCkge1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IHt9O1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge1N1YnNjcmliZXJ9IHN1YnNjcmliZXIgLSBzdWJzY3JpYmVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3Vic2NyaWJlcnNDb250cm9sbGVyLnByb3RvdHlwZS5hZGRTdWJzY3JpYmVyID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgY29uc3QgaWQgPSBzdWJzY3JpYmVyLmdldElkKCk7XG4gIHRoaXMuX3N1YnNjcmliZXJzW2lkXSA9IHN1YnNjcmliZXI7XG4gIHJldHVybiBpZDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBzdWJzY3JpYmVyc0lkIC0gc3Vic2NyaWJlciBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3Vic2NyaWJlcnNDb250cm9sbGVyLnByb3RvdHlwZS5yZW1vdmVTdWJzY3JpYmVyc0J5SWQgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcnNJZCkge1xuICBpZiAodHlwZW9mIHN1YnNjcmliZXJzSWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICBzdWJzY3JpYmVyc0lkID0gW3N1YnNjcmliZXJzSWRdO1xuICB9XG4gIGZvciAobGV0IGkgPSAwLCBqID0gc3Vic2NyaWJlcnNJZC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaWJlcnNbc3Vic2NyaWJlcnNJZFtpXV0pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmliZXJzW3N1YnNjcmliZXJzSWRbaV1dLnJlbW92ZSgpO1xuICAgICAgZGVsZXRlKHRoaXMuX3N1YnNjcmliZXJzW3N1YnNjcmliZXJzSWRbaV1dKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIFJlbW92ZSBhbGwgc3Vic2NyaWJlcnMgZm9yIGNlcnRhaW4gbWFuaWZlc3QgYmFzZWQgb24gYW55IHN1YnNjcmliZXJJZCB0aGF0IGJlbG9uZ3MgdG8gdGhpcyBtYW5pZmVzdFxuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IHN1YnNjcmliZXJJZCAtIHN1YnNjcmliZXIgaWRlbnRpZmllclxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXJzQ29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlQWxsTWFuaWZlc3RTdWJzY3JpYmVyc0J5SWQgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcklkKSB7XG4gIGxldCBzdWJzY3JpYmVyID0gc3Vic2NyaWJlcklkICYmIHRoaXMuX3N1YnNjcmliZXJzW3N1YnNjcmliZXJJZF07XG4gIGlmIChzdWJzY3JpYmVyKSB7XG4gICAgdGhpcy51bnN1YnNjcmliZShzdWJzY3JpYmVyLmdldE1hbmlmZXN0SWQoKSk7XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBtYW5pZmVzdElkcyAtIG1hbmlmZXN0IG9yIG1hbmlmZXN0cyBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3Vic2NyaWJlcnNDb250cm9sbGVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChtYW5pZmVzdElkcykge1xuICBsZXQgc3Vic2NyaWJlcnNJZCA9IFtdO1xuICBsZXQgbWFuaWZlc3RJZHNIYXNoID0ge307XG4gIGlmICh0eXBlb2YgbWFuaWZlc3RJZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICBtYW5pZmVzdElkcyA9IFttYW5pZmVzdElkc107XG4gIH1cbiAgbWFuaWZlc3RJZHMgPSBtYW5pZmVzdElkcyB8fCBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSBtYW5pZmVzdElkcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBtYW5pZmVzdElkc0hhc2hbbWFuaWZlc3RJZHNbaV1dID0gdHJ1ZTtcbiAgfVxuXG4gIGZvciAobGV0IGtleSBpbiB0aGlzLl9zdWJzY3JpYmVycykge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpYmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBpZiAobWFuaWZlc3RJZHNIYXNoW3RoaXMuX3N1YnNjcmliZXJzW2tleV0uZ2V0TWFuaWZlc3RJZCgpXSkge1xuICAgICAgICBzdWJzY3JpYmVyc0lkLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnJlbW92ZVN1YnNjcmliZXJzQnlJZChzdWJzY3JpYmVyc0lkKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXJzQ29udHJvbGxlci5wcm90b3R5cGUudW5zdWJzY3JpYmVBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAobGV0IGtleSBpbiB0aGlzLl9zdWJzY3JpYmVycykge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpYmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpYmVyc1trZXldLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuICB0aGlzLl9zdWJzY3JpYmVycyA9IHt9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdWJzY3JpYmVyc0NvbnRyb2xsZXI7XG4iXSwibmFtZXMiOlsiU3Vic2NyaWJlcnNDb250cm9sbGVyIiwiX3N1YnNjcmliZXJzIiwicHJvdG90eXBlIiwiYWRkU3Vic2NyaWJlciIsInN1YnNjcmliZXIiLCJpZCIsImdldElkIiwicmVtb3ZlU3Vic2NyaWJlcnNCeUlkIiwic3Vic2NyaWJlcnNJZCIsImkiLCJqIiwibGVuZ3RoIiwicmVtb3ZlIiwicmVtb3ZlQWxsTWFuaWZlc3RTdWJzY3JpYmVyc0J5SWQiLCJzdWJzY3JpYmVySWQiLCJ1bnN1YnNjcmliZSIsImdldE1hbmlmZXN0SWQiLCJtYW5pZmVzdElkcyIsIm1hbmlmZXN0SWRzSGFzaCIsImtleSIsImhhc093blByb3BlcnR5IiwicHVzaCIsInVuc3Vic2NyaWJlQWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9256\n')},6999:module=>{"use strict";eval("\n\nvar codes = {\n  GENERAL: -1,\n  ERRORS: {\n    INTERNAL_ERROR: 1,\n    BROKEN: 11,\n    FINISHED: 12,\n    UNFINISHED: 13,\n    STOPPED: 14,\n    CREATED: 15,\n    MISSING: 16,\n    RESUMED: 17,\n    STARTED: 18,\n    LOADING: 19,\n    REMOVED: 20,\n    INFO: 21,\n    EXISTS: 22,\n    NOT_FOUND: 100\n  }\n};\nmodule.exports = codes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk5OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxLQUFLLEdBQUc7RUFDWkMsT0FBTyxFQUFFLENBQUMsQ0FBQztFQUNYQyxNQUFNLEVBQUU7SUFDTkMsY0FBYyxFQUFFLENBQUM7SUFDakJDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRSxFQUFFO0lBQ2RDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLElBQUksRUFBRSxFQUFFO0lBQ1JDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFNBQVMsRUFBRTtFQUNiO0FBQ0YsQ0FBQztBQUNEQyxNQUFNLENBQUNDLE9BQU8sR0FBR2xCLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2Rvd25sb2Fkcy9jb2Rlcy5qcz84ZWMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgY29kZXMgPSB7XG4gIEdFTkVSQUw6IC0xLFxuICBFUlJPUlM6IHtcbiAgICBJTlRFUk5BTF9FUlJPUjogMSxcbiAgICBCUk9LRU46IDExLFxuICAgIEZJTklTSEVEOiAxMixcbiAgICBVTkZJTklTSEVEOiAxMyxcbiAgICBTVE9QUEVEOiAxNCxcbiAgICBDUkVBVEVEOiAxNSxcbiAgICBNSVNTSU5HOiAxNixcbiAgICBSRVNVTUVEOiAxNyxcbiAgICBTVEFSVEVEOiAxOCxcbiAgICBMT0FESU5HOiAxOSxcbiAgICBSRU1PVkVEOiAyMCxcbiAgICBJTkZPOiAyMSxcbiAgICBFWElTVFM6IDIyLFxuICAgIE5PVF9GT1VORDogMTAwLFxuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlcztcblxuIl0sIm5hbWVzIjpbImNvZGVzIiwiR0VORVJBTCIsIkVSUk9SUyIsIklOVEVSTkFMX0VSUk9SIiwiQlJPS0VOIiwiRklOSVNIRUQiLCJVTkZJTklTSEVEIiwiU1RPUFBFRCIsIkNSRUFURUQiLCJNSVNTSU5HIiwiUkVTVU1FRCIsIlNUQVJURUQiLCJMT0FESU5HIiwiUkVNT1ZFRCIsIklORk8iLCJFWElTVFMiLCJOT1RfRk9VTkQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6999\n")},6006:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var downloadFileUtil = __webpack_require__(2777);\nvar fs = __webpack_require__(7147);\nvar _require = __webpack_require__(7194),\n  net = _require.net;\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\n\n/**\n *\n * @param {string} url - url\n * @param {object} options - options\n * @returns {Chunk} - chunk object\n * @constructor\n */\nfunction Chunk(url, options) {\n  var self = this;\n  this.url = url;\n  this.options = options;\n  this.endPosition = options.endPosition;\n  this.startPosition = options.startPosition;\n  this.bytesRangeNotAvailable = options.bytesRangeNotAvailable;\n  this.reset();\n  this.events = new EventEmitter();\n  this._promise = new Promise(function (resolve, reject) {\n    self.resolve = resolve;\n    self.reject = reject;\n  });\n  return this;\n}\nChunk.prototype._retry = function (errorType, callback) {\n  var self = this;\n  var maxDownloadRetry;\n  this._errors = this._errors || {};\n  this._errors[errorType] = this._errors[errorType] || 0;\n  this._errors[errorType]++;\n  if (errorType === downloadFileUtil.errors.INTERNET) {\n    maxDownloadRetry = this.options.maxDownloadInternetRetry;\n  } else {\n    maxDownloadRetry = this.options.maxDownloadRetry;\n  }\n  if (this._errors[errorType] <= maxDownloadRetry) {\n    if (self._timer) {\n      clearTimeout(self._timer);\n    }\n    callback(true);\n    self._timer = setTimeout(function () {\n      // console.log("retrying chunk", errorType, self.destFile);\n      self.reset(function () {\n        self.start();\n      });\n    }, self.options.retryTimeout);\n  } else {\n    // console.log("not retrying chunk", errorType, self._errors[errorType]);\n    callback(false);\n  }\n};\nChunk.prototype.createFileStream = function (callback) {\n  var self = this;\n  if (!this.fileStream) {\n    var destFile = this.options.destFile;\n    if (this.options.multiChunks) {\n      destFile = destFile + "." + this.startPosition + "." + this.endPosition;\n    }\n    downloadFileUtil.checkForLocalFile(destFile, function (resumeFile, fileSize) {\n      self.destFile = destFile;\n      if (resumeFile) {\n        if (fileSize <= self.endPosition - self.startPosition) {\n          self.resumeFile = resumeFile;\n          self.available = fileSize;\n          self.offsetStartPosition = fileSize;\n        }\n      }\n      self.fileStream = fs.createWriteStream(destFile, {\n        flags: self.resumeFile ? "a" : "w"\n      });\n      self.fileStream.on("error", callback);\n      self.fileStream.on("open", function () {\n        // for unknown reason from time to time the file descriptor of self.fileStream is null\n        // when event \'open\' is fired then the file descriptor is not a null anymore\n        // this should fix a problem with EBADF error\n        // a bug in fs ?\n        self.fileStream = this;\n        this.removeListener("error", callback);\n        this.on("error", function (error) {\n          if (error.code === "ENOSPC") {\n            // no space left on disk, do not retry downloading\n            self.resolve(downloadFileUtil.errors.NO_SPACE_LEFT_ERROR, error);\n          } else {\n            self._retry(downloadFileUtil.errors.FILE_WRITING_ERROR, function (retried) {\n              if (!retried) {\n                self.resolve(downloadFileUtil.errors.FILE_WRITING_ERROR, error);\n              }\n            });\n          }\n        });\n        this.on("finish", function () {\n          if (!self.isDownloaded()) {\n            self._retry(downloadFileUtil.errors.CHUNK_SIZE_ERROR, function (retried) {\n              if (!retried) {\n                self.closeStreamAndRequest(function () {\n                  self.resolve(downloadFileUtil.errors.CHUNK_SIZE_ERROR);\n                });\n              }\n            });\n          } else {\n            self.closeStreamAndRequest(self.resolve);\n          }\n        });\n        callback();\n      });\n    });\n  } else {\n    callback();\n  }\n};\nChunk.prototype.isDownloaded = function () {\n  return this.endPosition - this.startPosition - this.offsetStartPosition + 1 === this.downloaded;\n};\nChunk.prototype.start = function () {\n  var self = this;\n  var req_options = {\n    timeout: this.options.timeout,\n    url: this.url\n  };\n  self.createFileStream(function (err) {\n    if (err) {\n      self._retry(downloadFileUtil.errors.FILE_CREATING_ERROR, function (retried) {\n        if (!retried) {\n          self.closeStreamAndRequest(function () {\n            self.resolve(downloadFileUtil.errors.FILE_CREATING_ERROR, err);\n          });\n        }\n      });\n      return;\n    }\n    req_options.headers = req_options.headers || {};\n    if (!self.bytesRangeNotAvailable) {\n      req_options.headers.range = "bytes=" + (self.startPosition + self.offsetStartPosition) + "-" + self.endPosition;\n    }\n    self._req = net.request(req_options);\n    self._req.on(\'response\', function (response) {\n      response.on("error", function (error) {\n        if (error.code === "ESOCKETTIMEDOUT" || error.code === "ENOTFOUND" || error.code === "ETIMEDOUT") {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self.closeStreamAndRequest(function () {\n                self.resolve(downloadFileUtil.errors.TIMEOUT, error);\n              });\n            }\n          });\n        } else {\n          self.closeStreamAndRequest(function () {\n            self.resolve(downloadFileUtil.errors.CHUNK_ERROR);\n          });\n        }\n      });\n      response.on("data", function (data) {\n        if (response.statusCode === 200 || response.statusCode === 206) {\n          self.available += data.length;\n          self.downloaded += data.length;\n          self.events.emit("download", data.length);\n        }\n      });\n      response.pipe(self.fileStream);\n    });\n    self._req.end();\n  });\n  return this._promise;\n};\nChunk.prototype.closeStreamAndRequest = function (callback) {\n  var self = this;\n  var timer;\n  var timerTimoutMS = 300;\n  function onClose() {\n    clearTimeout(timer);\n    if (self.fileStream) {\n      self.fileStream.destroy();\n      delete self.fileStream;\n    }\n    delete self._req;\n    callback();\n  }\n  if (this._req) {\n    this._req.removeAllListeners();\n  }\n  if (this.fileStream) {\n    this.fileStream.removeAllListeners();\n  }\n  if (this._req) {\n    this._req.abort();\n    if (this._req.timeoutTimer) {\n      clearTimeout(this._req.timeoutTimer);\n      this._req.timeoutTimer = null;\n    }\n  }\n  if (this.fileStream) {\n    timer = setTimeout(function () {\n      onClose();\n    }, timerTimoutMS);\n    this.fileStream.end();\n    this.fileStream.close(onClose);\n  } else {\n    delete this._req;\n    callback();\n  }\n};\nChunk.prototype.reset = function (callback) {\n  var self = this;\n  callback = callback || function () {};\n  self.closeStreamAndRequest(function () {\n    self.offsetStartPosition = 0;\n    self.available = 0;\n    self.downloaded = 0;\n    self.writeProgress = 0;\n    self.resumeFile = false;\n    callback();\n  });\n};\nChunk.prototype.stop = function () {\n  var self = this;\n  this.reset(function () {\n    self.resolve(downloadFileUtil.errors.ABORTED);\n  });\n};\nmodule.exports = Chunk;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6006\n')},5979:(module,__unused_webpack_exports,__webpack_require__)=>{eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\nvar fs = __webpack_require__(7147);\nvar _require = __webpack_require__(7194),\n  net = _require.net;\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\nvar util = __webpack_require__(3837);\nvar downloadFileUtil = __webpack_require__(2777);\n\n/**\n *\n * @param {string} url - remote url\n * @param {string} destFile - local url\n * @param {object} options - options\n * @constructor\n */\nfunction DownloadFileNoHead(url, destFile, options) {\n  this._url = url;\n  this._destFile = destFile;\n  this._options = options;\n  this._resetValues();\n}\nutil.inherits(DownloadFileNoHead, EventEmitter);\nDownloadFileNoHead.prototype._reset = function (callback) {\n  var self = this;\n  callback = callback || function () {};\n  self._closeStreamAndRequest(function () {\n    self._resetValues();\n    callback();\n  });\n};\nDownloadFileNoHead.prototype._resetValues = function () {\n  this.available = 0;\n  this.downloaded = 0;\n  this.file_size = 0;\n  this.writeProgress = 0;\n};\nDownloadFileNoHead.prototype._createFileStream = function (callback) {\n  var self = this;\n  if (!this.fileStream) {\n    var destFile = this._destFile;\n    self.fileStream = fs.createWriteStream(destFile, {\n      flags: "w"\n    });\n    self.fileStream.on("error", callback);\n    self.fileStream.on("open", function () {\n      // for unknown reason from time to time the file descriptor of self.fileStream is null\n      // when event \'open\' is fired then the file descriptor is not a null anymore\n      // this should fix a problem with EBADF error\n      // a bug in fs ?\n      self.fileStream = this;\n      this.removeListener("error", callback);\n      this.on("error", function (error) {\n        if (error.code === "ENOSPC") {\n          // no space left on disk, do not retry downloading\n          self.emit("error", {\n            message: downloadFileUtil.errors.NO_SPACE_LEFT_ERROR,\n            data: error\n          });\n        } else {\n          self._retry(downloadFileUtil.errors.FILE_WRITING_ERROR, function (retried) {\n            if (!retried) {\n              self.emit("error", {\n                message: downloadFileUtil.errors.FILE_WRITING_ERROR,\n                data: error\n              });\n            }\n          });\n        }\n      });\n      this.on("finish", function () {\n        if (!self.isDownloaded()) {\n          self._retry(downloadFileUtil.errors.CHUNK_SIZE_ERROR, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.CHUNK_SIZE_ERROR\n                });\n              });\n            }\n          });\n        } else {\n          self.writeProgress = 1;\n          self.emit("end");\n        }\n      });\n      callback();\n    });\n  } else {\n    callback();\n  }\n};\nDownloadFileNoHead.prototype.isDownloaded = function () {\n  return this.downloaded === this.file_size;\n};\nDownloadFileNoHead.prototype._retry = function (errorType, callback) {\n  var self = this;\n  var maxDownloadRetry;\n  this._errors = this._errors || {};\n  this._errors[errorType] = this._errors[errorType] || 0;\n  this._errors[errorType]++;\n  if (errorType === downloadFileUtil.errors.INTERNET) {\n    maxDownloadRetry = this._options.maxDownloadChunkInternetRetry;\n  } else {\n    maxDownloadRetry = this._options.maxDownloadRetry;\n  }\n  if (this._errors[errorType] <= maxDownloadRetry) {\n    if (self._timer) {\n      clearTimeout(self._timer);\n    }\n    callback(true);\n    self._timer = setTimeout(function () {\n      // console.log("retrying chunk", errorType, self.destFile);\n      self._reset(function () {\n        self.start();\n      });\n    }, self._options.retryTimeout);\n  } else {\n    // console.log("not retrying chunk", errorType, self._errors[errorType]);\n    callback(false);\n  }\n};\nDownloadFileNoHead.prototype._closeStreamAndRequest = function (callback) {\n  var self = this;\n  var timer;\n  var timerTimoutMS = 300;\n  function onClose() {\n    clearTimeout(timer);\n    if (self.fileStream) {\n      self.fileStream.destroy();\n      delete self.fileStream;\n    }\n    delete self._req;\n    callback();\n  }\n  if (this._req) {\n    this._req.removeAllListeners();\n  }\n  if (this.fileStream) {\n    this.fileStream.removeAllListeners();\n  }\n  if (this._req) {\n    this._req.abort();\n    if (this._req.timeoutTimer) {\n      clearTimeout(this._req.timeoutTimer);\n      this._req.timeoutTimer = null;\n    }\n  }\n  if (this.fileStream) {\n    timer = setTimeout(function () {\n      onClose();\n    }, timerTimoutMS);\n    this.fileStream.end();\n    this.fileStream.close(onClose);\n  } else {\n    delete this._req;\n    callback();\n  }\n};\n\n/**\n * starts download\n * @returns {void}\n */\nDownloadFileNoHead.prototype.start = function () {\n  var self = this;\n  var req_options = {\n    timeout: this._options.timeout,\n    url: this._url\n  };\n  if (this._options.noCache) {\n    req_options.headers = {\n      \'Cache-Control\': \'no-cache\'\n    };\n  }\n  self._createFileStream(function (err) {\n    if (err) {\n      self._retry(downloadFileUtil.errors.FILE_CREATING_ERROR, function (retried) {\n        if (!retried) {\n          self._closeStreamAndRequest(function () {\n            self.emit("error", {\n              message: downloadFileUtil.errors.FILE_CREATING_ERROR\n            });\n          });\n        }\n      });\n      return;\n    }\n    req_options.headers = req_options.headers || {};\n    self._req = net.request(req_options);\n    self._req.on(\'response\', function (response) {\n      response.on("error", function (error) {\n        console.error(\'ERROR (\' + self._url + \') :\' + error);\n        if (error.code === "ESOCKETTIMEDOUT" || error.code === "ENOTFOUND" || error.code === "ETIMEDOUT") {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.TIMEOUT,\n                  data: error\n                });\n              });\n            }\n          });\n        } else {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.CHUNK_ERROR,\n                  data: error\n                });\n              });\n            }\n          });\n        }\n      });\n      if (response && response.statusCode >= 400) {\n        self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n          if (!retried) {\n            self._closeStreamAndRequest(function () {\n              console.error("HTTP DOWNLOAD ERROR url: ".concat(self._url, ", statusCode: ").concat(response.statusCode));\n              self.emit("error", {\n                message: downloadFileUtil.errors.CHUNK_ERROR,\n                data: response\n              });\n            });\n          }\n        });\n      } else {\n        self._headers = response.headers;\n        self.file_size = Number(self._headers["content-length"]);\n        response.on("data", function (data) {\n          if (response.statusCode === 200 || response.statusCode === 206) {\n            self.available += data.length;\n            self.downloaded += data.length;\n          }\n        });\n        response.pipe(self.fileStream);\n      }\n    });\n    self._req.end();\n  });\n  return this._promise;\n};\n\n/**\n * stops download\n * @returns {void}\n */\nDownloadFileNoHead.prototype.stop = function () {\n  var self = this;\n  this._reset(function () {\n    self.emit("error", {\n      message: downloadFileUtil.errors.ABORTED\n    });\n  });\n};\nmodule.exports = DownloadFileNoHead;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5979\n')},2777:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var fs = __webpack_require__(7147);\nvar appSettings = __webpack_require__(9277);\n\n/**\n *\n * @type {{start: number, end: null}}\n */\nvar defaultOptions = Object.assign({\n  start: 0,\n  end: null\n}, appSettings.getSettings().defaultManifestRequestOptions);\n\n/**\n *\n * @type {{CHUNK_ERROR: string, CHUNK_SIZE_ERROR: string, FILE_CREATING_ERROR: string, FILE_WRITING_ERROR: string,\n *     ABORTED: string}}\n */\nvar errors = {\n  ABORTED: "ABORTED",\n  CHUNK_ERROR: "CHUNK_ERROR",\n  CHUNK_SIZE_ERROR: "CHUNK_SIZE_ERROR",\n  FILE_CREATING_ERROR: "FILE_CREATING_ERROR",\n  FILE_WRITING_ERROR: "FILE_WRITING_ERROR",\n  NO_SPACE_LEFT_ERROR: "NO_SPACE_LEFT_ERROR",\n  INTERNET: "INTERNET",\n  TIMEOUT: "TIMEOUT",\n  ERR_NETWORK_IO_SUSPENDED: "net::ERR_NETWORK_IO_SUSPENDED"\n};\n\n/**\n * @param {string} fileUrl - file url\n * @param {function} callback - callback to be invoked when check for file has been done\n * @returns {void}\n */\nfunction checkForLocalFile(fileUrl, callback) {\n  fs.stat(fileUrl, function (error, stat) {\n    if (error) {\n      callback(false);\n    } else {\n      callback(true, stat.size);\n    }\n  });\n}\nmodule.exports = {\n  checkForLocalFile: checkForLocalFile,\n  defaultOptions: defaultOptions,\n  errors: errors\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc3Ny5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLElBQU1DLFdBQVcsR0FBR0QsbUJBQU8sQ0FBQyxJQUFpQixDQUFDOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1FLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQ2xDO0VBQ0VDLEtBQUssRUFBRSxDQUFDO0VBQ1JDLEdBQUcsRUFBRTtBQUNQLENBQUMsRUFDREwsV0FBVyxDQUFDTSxXQUFXLEVBQUUsQ0FBQ0MsNkJBQTZCLENBQ3hEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQyxNQUFNLEdBQUc7RUFDYkMsT0FBTyxFQUFFLFNBQVM7RUFDbEJDLFdBQVcsRUFBRSxhQUFhO0VBQzFCQyxnQkFBZ0IsRUFBRSxrQkFBa0I7RUFDcENDLG1CQUFtQixFQUFFLHFCQUFxQjtFQUMxQ0Msa0JBQWtCLEVBQUUsb0JBQW9CO0VBQ3hDQyxtQkFBbUIsRUFBRSxxQkFBcUI7RUFDMUNDLFFBQVEsRUFBRSxVQUFVO0VBQ3BCQyxPQUFPLEVBQUUsU0FBUztFQUNsQkMsd0JBQXdCLEVBQUU7QUFDNUIsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsaUJBQWlCLENBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFO0VBQzdDdEIsRUFBRSxDQUFDdUIsSUFBSSxDQUFDRixPQUFPLEVBQUUsVUFBVUcsS0FBSyxFQUFFRCxJQUFJLEVBQUU7SUFDdEMsSUFBSUMsS0FBSyxFQUFFO01BQ1RGLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDakIsQ0FBQyxNQUFNO01BQ0xBLFFBQVEsQ0FBQyxJQUFJLEVBQUVDLElBQUksQ0FBQ0UsSUFBSSxDQUFDO0lBQzNCO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZlAsaUJBQWlCLEVBQUVBLGlCQUFpQjtFQUNwQ2pCLGNBQWMsRUFBRUEsY0FBYztFQUM5Qk8sTUFBTSxFQUFFQTtBQUNWLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2Rvd25sb2Fkcy9kb3dubG9hZC1maWxlLXV0aWwuanM/MWI4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IGFwcFNldHRpbmdzID0gcmVxdWlyZSgnLi4vYXBwLXNldHRpbmdzJyk7XG5cbi8qKlxuICpcbiAqIEB0eXBlIHt7c3RhcnQ6IG51bWJlciwgZW5kOiBudWxsfX1cbiAqL1xuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICB7XG4gICAgc3RhcnQ6IDAsXG4gICAgZW5kOiBudWxsXG4gIH0sXG4gIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuZGVmYXVsdE1hbmlmZXN0UmVxdWVzdE9wdGlvbnNcbik7XG5cbi8qKlxuICpcbiAqIEB0eXBlIHt7Q0hVTktfRVJST1I6IHN0cmluZywgQ0hVTktfU0laRV9FUlJPUjogc3RyaW5nLCBGSUxFX0NSRUFUSU5HX0VSUk9SOiBzdHJpbmcsIEZJTEVfV1JJVElOR19FUlJPUjogc3RyaW5nLFxuICogICAgIEFCT1JURUQ6IHN0cmluZ319XG4gKi9cbmNvbnN0IGVycm9ycyA9IHtcbiAgQUJPUlRFRDogXCJBQk9SVEVEXCIsXG4gIENIVU5LX0VSUk9SOiBcIkNIVU5LX0VSUk9SXCIsXG4gIENIVU5LX1NJWkVfRVJST1I6IFwiQ0hVTktfU0laRV9FUlJPUlwiLFxuICBGSUxFX0NSRUFUSU5HX0VSUk9SOiBcIkZJTEVfQ1JFQVRJTkdfRVJST1JcIixcbiAgRklMRV9XUklUSU5HX0VSUk9SOiBcIkZJTEVfV1JJVElOR19FUlJPUlwiLFxuICBOT19TUEFDRV9MRUZUX0VSUk9SOiBcIk5PX1NQQUNFX0xFRlRfRVJST1JcIixcbiAgSU5URVJORVQ6IFwiSU5URVJORVRcIixcbiAgVElNRU9VVDogXCJUSU1FT1VUXCIsXG4gIEVSUl9ORVRXT1JLX0lPX1NVU1BFTkRFRDogXCJuZXQ6OkVSUl9ORVRXT1JLX0lPX1NVU1BFTkRFRFwiXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlVXJsIC0gZmlsZSB1cmxcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGNoZWNrIGZvciBmaWxlIGhhcyBiZWVuIGRvbmVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBjaGVja0ZvckxvY2FsRmlsZSAoZmlsZVVybCwgY2FsbGJhY2spIHtcbiAgZnMuc3RhdChmaWxlVXJsLCBmdW5jdGlvbiAoZXJyb3IsIHN0YXQpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNhbGxiYWNrKGZhbHNlKVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlLCBzdGF0LnNpemUpO1xuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVja0ZvckxvY2FsRmlsZTogY2hlY2tGb3JMb2NhbEZpbGUsXG4gIGRlZmF1bHRPcHRpb25zOiBkZWZhdWx0T3B0aW9ucyxcbiAgZXJyb3JzOiBlcnJvcnNcbn07XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwiYXBwU2V0dGluZ3MiLCJkZWZhdWx0T3B0aW9ucyIsIk9iamVjdCIsImFzc2lnbiIsInN0YXJ0IiwiZW5kIiwiZ2V0U2V0dGluZ3MiLCJkZWZhdWx0TWFuaWZlc3RSZXF1ZXN0T3B0aW9ucyIsImVycm9ycyIsIkFCT1JURUQiLCJDSFVOS19FUlJPUiIsIkNIVU5LX1NJWkVfRVJST1IiLCJGSUxFX0NSRUFUSU5HX0VSUk9SIiwiRklMRV9XUklUSU5HX0VSUk9SIiwiTk9fU1BBQ0VfTEVGVF9FUlJPUiIsIklOVEVSTkVUIiwiVElNRU9VVCIsIkVSUl9ORVRXT1JLX0lPX1NVU1BFTkRFRCIsImNoZWNrRm9yTG9jYWxGaWxlIiwiZmlsZVVybCIsImNhbGxiYWNrIiwic3RhdCIsImVycm9yIiwic2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2777\n')},4959:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var fs = __webpack_require__(7147);\nvar _require = __webpack_require__(7194),\n  net = _require.net;\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\nvar util = __webpack_require__(3837);\nvar downloadFileUtil = __webpack_require__(2777);\nvar DownloadFileChunk = __webpack_require__(6006);\n\n/**\n *\n * @param {string} url - remote url\n * @param {string} destFile - local url\n * @param {object} options - options\n * @constructor\n */\nfunction DownloadFile(url, destFile, options) {\n  this._url = url;\n  this._destFile = destFile;\n  this._options = options;\n  this._resetValues();\n}\nutil.inherits(DownloadFile, EventEmitter);\n\n/**\n *\n * @param {number} size - size of file\n * @private\n * @returns {*} - number of chunks\n */\nDownloadFile.prototype._calculateChunksNumber = function (size) {\n  var MB = 1024 * 1024;\n  for (var i = 0, j = this._options.threads.length; i < j; i++) {\n    if (size < this._options.threads[i].size * MB) {\n      return this._options.threads[i].number;\n    }\n  }\n  return 1;\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._concatChunks = function () {\n  var self = this;\n  var intervalTime = 500;\n  self._chunks[0].writeProgress = 1;\n  function countWriteProgress() {\n    self.writeProgress = self._chunks.reduce(function (a, b) {\n      return a + b.writeProgress;\n    }, 0) / self._chunksNumber;\n    self.emit("data");\n  }\n  function getWriteStream() {\n    return fs.createWriteStream(self._chunks[0].destFile, {\n      flags: "a"\n    });\n  }\n  function onInterval(writeStream, currentStream) {\n    self._chunks[currentStream].writeProgress = writeStream.bytesWritten / self._chunks[currentStream].available;\n    if (self._chunks[currentStream].writeProgress > 1) {\n      self._chunks[currentStream].writeProgress = 1;\n    }\n    countWriteProgress();\n  }\n  function pipeStream(writeStream, nextStreamNumber) {\n    var chunk = self._chunks[nextStreamNumber];\n    if (chunk) {\n      var interval = setInterval(function () {\n        onInterval(writeStream, nextStreamNumber);\n      }, intervalTime);\n      var readStream = fs.createReadStream(chunk.destFile);\n      readStream.pipe(writeStream);\n      writeStream.on("close", function () {\n        clearInterval(interval);\n        onInterval(writeStream, nextStreamNumber);\n        writeStream.removeAllListeners();\n        readStream.unpipe(writeStream);\n        readStream.destroy();\n        fs.unlink(chunk.destFile, function (err) {\n          if (err) {\n            self.emit("error", err);\n          } else {\n            writeStream.destroy();\n            pipeStream(getWriteStream(), nextStreamNumber + 1);\n          }\n        });\n      });\n    } else {\n      countWriteProgress();\n      writeStream.removeAllListeners();\n      writeStream.destroy();\n      fs.rename(self._chunks[0].destFile, self._destFile, function (err) {\n        if (err) {\n          self.emit("error", err);\n        } else {\n          self.emit("end");\n        }\n      });\n    }\n  }\n  if (self._chunks.length > 1) {\n    pipeStream(getWriteStream(), 1);\n  } else {\n    countWriteProgress();\n    self.emit("end");\n  }\n};\n\n/**\n *\n * @param {number} chunkNumber - chunk number\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._initChunk = function (chunkNumber) {\n  var options = {};\n  options.bytesRangeNotAvailable = this._bytesRangeNotAvailable;\n  options.destFile = this._destFile;\n  options.maxDownloadRetry = this._options.maxDownloadChunkRetry;\n  options.maxDownloadInternetRetry = this._options.maxDownloadChunkInternetRetry;\n  options.timeout = this._options.timeout;\n  options.retryTimeout = this._options.retryTimeout;\n  var size = this.file_size;\n  if (this._chunksNumber > 1) {\n    var chunkSize = parseInt(size / this._chunksNumber, 10);\n    options.startPosition = chunkNumber * chunkSize;\n    options.multiChunks = true;\n    if (chunkNumber === this._chunksNumber - 1) {\n      options.endPosition = size - 1;\n    } else {\n      options.endPosition = options.startPosition + chunkSize - 1;\n    }\n  } else {\n    options.startPosition = 0;\n    options.endPosition = size - 1;\n  }\n  var chunk = new DownloadFileChunk(this._url, options);\n  chunk.events.on("download", this._onChunkDownload.bind(this));\n  this._chunks.push(chunk);\n};\n\n/**\n *\n * @param {object} err - error\n * @param {boolean} aborted - if failure has been called because download was aborted\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._onDownloadFailure = function (err, aborted) {\n  this._promises = null;\n  if (!aborted) {\n    this._errors = this._errors || 0;\n    this._errors++;\n    if (this._errors <= this._options.maxDownloadRetry) {\n      this._retryDownload();\n    } else {\n      this.emit("error", err);\n    }\n  } else {\n    var noSpaceLeft = false;\n    for (var i = 0, j = err.length; i < j; i++) {\n      if (err[i]) {\n        if (err[i] === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR) {\n          noSpaceLeft = true;\n          break;\n        }\n      }\n    }\n    if (noSpaceLeft) {\n      err = {\n        message: downloadFileUtil.errors.NO_SPACE_LEFT_ERROR\n      };\n    }\n    this.emit("error", err);\n  }\n};\n\n/**\n *\n * @param {object} err - error\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._onDownloadSuccess = function (err) {\n  var aborted, error;\n  this._promises = null;\n  err = err || [];\n  for (var i = 0, j = err.length; i < j; i++) {\n    if (err[i]) {\n      if (err[i] === downloadFileUtil.errors.ABORTED || err[i] === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR) {\n        aborted = true;\n      }\n      error = true;\n    }\n  }\n  if (!error) {\n    this._concatChunks();\n  } else {\n    this._onDownloadFailure(err, aborted);\n  }\n};\n\n/**\n *\n * @param {number} downloaded - downloaded bytes\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._onChunkDownload = function (downloaded) {\n  this.downloaded += downloaded;\n  this.available = this._chunks.reduce(function (a, b) {\n    return a + b.available;\n  }, 0);\n  this.emit("data");\n};\nDownloadFile.prototype._retryDownload = function () {\n  // console.log("retrying download", this._destFile);\n  this._resetValues();\n  this.start();\n};\nDownloadFile.prototype._resetValues = function () {\n  this.available = 0;\n  this.downloaded = 0;\n  this.progress = 0;\n  this.file_size = 0;\n  this.writeProgress = 0;\n  this._chunks = [];\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._startChunks = function () {\n  var promises = [];\n  for (var i = 0, j = this._chunks.length; i < j; i++) {\n    promises.push(this._chunks[i].start());\n  }\n  this._promises = promises;\n  Promise.all(this._promises).then(this._onDownloadSuccess.bind(this), this._onDownloadFailure.bind(this));\n};\nDownloadFile.prototype._startAllChunks = function () {\n  for (var i = 0, j = this._chunksNumber; i < j; i++) {\n    this._initChunk(i);\n  }\n  this._startChunks();\n};\n\n/**\n * starts download\n * @returns {void}\n */\nDownloadFile.prototype.start = function () {\n  var self = this;\n  var req_options = Object.assign({\n    url: this._url,\n    method: \'HEAD\'\n  }, downloadFileUtil.defaultOptions);\n  if (this._options.noCache) {\n    req_options.headers = req_options.headers || {};\n    req_options.headers[\'Cache-Control\'] = \'no-cache\';\n  }\n  var req = net.request(req_options);\n  req.on(\'response\', function (response) {\n    if (response && response.statusCode >= 400) {\n      var error = response.statusMessage;\n      if (error) {\n        self._onDownloadFailure(error, false);\n        return;\n      }\n    }\n    response.on("error", function (error) {\n      if (error) {\n        self._onDownloadFailure(error, false);\n      }\n    });\n    self._headers = response.headers;\n    self.file_size = Number(self._headers["content-length"]);\n    self._chunksNumber = self._calculateChunksNumber(self.file_size);\n    downloadFileUtil.checkForLocalFile(self._destFile, function (exists, fileSize) {\n      if (exists) {\n        if (fileSize === self.file_size) {\n          self.emit("end");\n        } else if (fileSize > self.file_size) {\n          fs.unlink(self._destFile, function (err) {\n            if (err) {\n              throw err;\n            }\n          });\n          self._startAllChunks();\n        } else if (fileSize < self.file_size && self._chunksNumber > 1) {\n          fs.unlink(self._destFile, function (err) {\n            if (err) {\n              throw err;\n            }\n          });\n          self._startAllChunks();\n        } else {\n          self._startAllChunks();\n        }\n      } else {\n        self._startAllChunks();\n      }\n    });\n  });\n  req.end();\n};\n\n/**\n * stops download\n * @returns {void}\n */\nDownloadFile.prototype.stop = function () {\n  var promises = [];\n  for (var i = 0, j = this._chunks.length; i < j; i++) {\n    this._chunks[i].stop();\n    if (this._chunks[i]._promise) {\n      promises.push(this._chunks[i]._promise);\n    }\n  }\n  function onStopped() {\n    this.emit("end", \'\');\n  }\n  if (!this._promises) {\n    Promise.all(promises).then(onStopped.bind(this), onStopped.bind(this));\n  }\n};\nmodule.exports = DownloadFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4959\n')},8158:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _ = __webpack_require__(4952);\nvar domain = __webpack_require__(3639);\nvar DownloadFileNoHead = __webpack_require__(5979);\nvar DownloadFile = __webpack_require__(4959);\nvar mkdirp = __webpack_require__(9526);\nvar appSettings = __webpack_require__(9277);\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\nvar STATUSES = __webpack_require__(8255);\n\n/**\n *\n * @param {object} params - parameters connected with download like id, bandwidth, contentType, remoteUrl, localUrl\n * see util class {@link downloadUtil.getDownloadLinks}\n * @param {object} options - options chosen for whole manifest, like number of chunks, retry,\n * @constructor\n */\nfunction Download(params, options) {\n  this._defaults = {};\n  this._defaults.threads = appSettings.getSettings().downloadingThreadsRules.threads;\n  this.status = STATUSES.CREATED;\n  Object.assign(this, params);\n  this._options = Object.assign(this._defaults, options);\n  this._options.maxDownloadRetry = appSettings.getSettings().MAX_ERRORS_DOWNLOAD_RETRY;\n  this._options.maxDownloadChunkRetry = appSettings.getSettings().MAX_ERRORS_DOWNLOAD_CHUNK_RETRY;\n  this._options.maxDownloadChunkInternetRetry = appSettings.getSettings().MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY;\n  this._options.timeout = appSettings.getSettings().times.DOWNLOAD_TIMEOUT;\n  this._options.retryTimeout = appSettings.getSettings().times.RETRY_TIMEOUT;\n  this._options.useChunkedEncoding = appSettings.getSettings().useChunkedEncoding;\n  this._options.useHeadRequests = appSettings.getSettings().useHeadRequests;\n  this._options.noCache = appSettings.getSettings().noCache;\n  this.stats = {\n    available: 0,\n    downloaded: 0,\n    file_size: 0,\n    writeProgress: 0\n  };\n  _.bindAll(this, "_onError", "_onEnd", "_onData", "_updateStats", "_attachEvents", "_removeEvents", "_removeEventsOnStop");\n  this.events = new EventEmitter();\n}\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._attachEvents = function () {\n  this._dl.on(\'error\', this._onError);\n  this._dl.on(\'end\', this._onEnd);\n  this._dl.on(\'data\', this._onData);\n};\n\n/**\n *\n * @param {function} callback - callback to be invoked then local path is created\n * @private\n * @returns {void}\n */\nDownload.prototype._createLocalPath = function (callback) {\n  var folders = this.localUrl.split("/");\n  folders = folders.slice(0, folders.length - 1);\n  folders = folders.join("/");\n  mkdirp(folders, callback);\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownload.prototype._onData = function () {\n  this._updateStats();\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._onEnd = function () {\n  this.status = STATUSES.FINISHED;\n  this._updateStats();\n  this._removeEvents();\n  this.events.emit("end", this);\n};\n\n/**\n *\n * @param {object} data - error data\n * @private\n * @returns {void}\n */\nDownload.prototype._onError = function (data) {\n  var self = this;\n  this.status = STATUSES.ERROR;\n  data = data || {};\n  var message = data.message || "";\n  self._removeEvents();\n  self._updateStats();\n\n  // notify only if there exists any error listener (from downloads controller)\n  // otherwise EventEmitter throws an error\n  if (self.events.listeners(\'error\').length) {\n    self.events.emit("error", self, message);\n  }\n};\nDownload.prototype._onDomainError = function (data) {\n  var self = this;\n  data = data || {};\n  var message = data.message || "";\n  if (self._dl) {\n    if (message === \'net::ERR_NETWORK_CHANGED\' || message === \'net::ERR_SPDY_PROTOCOL_ERROR\' || message === \'net::ERR_HTTP2_PROTOCOL_ERROR\') {\n      // network changed during download, retry download\n      self.stop(function () {\n        self.start();\n      });\n    } else {\n      // stop current download to release file stream and notify error\n      self.stop(function () {\n        self._onError(data);\n      });\n    }\n  } else {\n    self._onError(data);\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._removeEvents = function () {\n  if (typeof this._dl.removeListener === "function") {\n    this._dl.removeListener(\'error\', this._onError);\n    this._dl.removeListener(\'end\', this._onEnd);\n    this._dl.removeListener(\'data\', this._onData);\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._removeEventsOnStop = function () {\n  if (this._dl && typeof this._dl.removeListener === "function") {\n    this._dl.removeListener(\'error\', this._onError);\n    this._dl.removeListener(\'end\', this._onEnd);\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._updateStats = function () {\n  if (this.status === STATUSES.FINISHED) {\n    this.stats.available = this._dl.file_size;\n    this.stats.writeProgress = 1;\n  } else {\n    this.stats.available = this._dl.available;\n    this.stats.writeProgress = this._dl.writeProgress;\n  }\n  this.stats.downloaded = this._dl.downloaded;\n  this.stats.file_size = this._dl.file_size;\n};\n\n/**\n * @returns {void}\n */\nDownload.prototype.start = function () {\n  var self = this;\n  this.status = STATUSES.STARTED;\n  this._createLocalPath(function (err) {\n    if (err) {\n      self._onError(err);\n      return;\n    }\n    // NOTE: domain module is marked to be deprecated in the future,\n    //       we will use it until NodeJS will propose alternative or\n    //       rewrite with promises\n    var d = domain.create();\n    d.on(\'error\', function (err) {\n      var message = \'\';\n      if (err) {\n        message = err.code || err.message || "";\n      }\n      // this needs to be disposed otherwise it might complain about unhandled error.\n      if (typeof d.dispose === "function") {\n        d.dispose();\n      }\n      self._onDomainError({\n        message: message\n      });\n    });\n    d.run(function () {\n      self._dl = self.createDownloader(self.remoteUrl, self.localUrl, self._options);\n      self._attachEvents();\n      self._dl.start();\n    });\n  });\n};\n\n/**\n * Creates file downloader\n * @param {string} [remoteUrl] - url of fragment\n * @param {string} [localUrl] - local url where to download fragment\n * @param {object} [options] - some options\n * @returns {void}\n */\nDownload.prototype.createDownloader = function (remoteUrl, localUrl, options) {\n  if (this._options.useHeadRequests) {\n    return new DownloadFile(remoteUrl, localUrl, options);\n  } else {\n    return new DownloadFileNoHead(remoteUrl, localUrl, options);\n  }\n};\n\n/**\n * @param {function} [resolve] - callback to be invoked when stop was successfully\n * @returns {void}\n */\nDownload.prototype.stop = function (resolve) {\n  var self = this;\n  this.status = STATUSES.STOPPED;\n  this._removeEventsOnStop();\n  if (typeof resolve !== "function") {\n    resolve = function resolve() {};\n  }\n  if (this._dl) {\n    var d = domain.create();\n    d.on(\'error\', function () {\n      resolve();\n    });\n    d.run(function () {\n      self._dl.on(\'error\', function () {\n        resolve();\n      });\n      self._dl.on(\'end\', function () {\n        resolve();\n      });\n      self._dl.stop();\n    });\n  } else {\n    resolve();\n  }\n};\n\n/**\n *\n * @returns {Promise} - promise\n */\nDownload.prototype.stopPromise = function () {\n  var self = this;\n  return new Promise(function (resolve) {\n    self.stop(function () {\n      resolve();\n    });\n  });\n};\nmodule.exports = Download;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8158\n')},1789:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar mkdirp = __webpack_require__(9526);\nvar appSettings = __webpack_require__(9277);\nvar jsonfile = __webpack_require__(3480);\nvar LinkSave = __webpack_require__(8798);\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {string} storageKey - storage key\n * @param {object} items - storage items\n * @constructor\n */\nfunction FlushItem(manifestId, storageKey, items) {\n  this.manifestId = manifestId;\n  this.storageKey = storageKey;\n  this.items = items;\n}\n\n/**\n *\n * @param {function} resolve - callback to be invoked when save was successful\n * @param {function} reject - callback to be invoked when save failed\n * @private\n * @returns {void}\n */\nFlushItem.prototype._saveToDisk = function (resolve, reject) {\n  var self = this;\n  var path = appSettings.getSettings().settingsFolder + this.manifestId + "/";\n  var file = "" + this.storageKey + ".json";\n  var fileUrl = path + file;\n  mkdirp(path, function (err) {\n    if (err) {\n      reject(err);\n    } else {\n      var data = convertStorage(self.storageKey, self.items);\n      jsonfile.writeFile(fileUrl, data, function (err) {\n        if (!err) {\n          resolve();\n        } else {\n          reject(err);\n        }\n      });\n    }\n  });\n};\n\n/**\n *\n * @returns {Promise} promise\n */\nFlushItem.prototype.save = function () {\n  return new Promise(this._saveToDisk.bind(this));\n};\nmodule.exports = FlushItem;\n\n/**\n * Helper function\n * @param {string} storageKey - storage key\n * @param {object} items - storage items\n * @returns {*} data to be stored\n */\nvar convertStorage = function convertStorage(storageKey, items) {\n  var itemsA = [];\n  var data;\n  //only for downloading we want to have an array\n  if (storageKey === "downloading") {\n    itemsA = [];\n    for (var key in items) {\n      itemsA.push(items[key]);\n    }\n    items = itemsA;\n  }\n  if (items instanceof Array) {\n    data = [];\n    for (var i = 0, j = items.length; i < j; i++) {\n      data.push(new LinkSave(items[i]));\n    }\n  } else {\n    data = items;\n  }\n  return data;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQUksQ0FBQ1UsSUFBSSxDQUFDLElBQUkxQixRQUFRLENBQUNJLEtBQUssQ0FBQ3dCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkM7RUFDRixDQUFDLE1BQU07SUFDTFosSUFBSSxHQUFHWixLQUFLO0VBQ2Q7RUFDQSxPQUFPWSxJQUFJO0FBQ2IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvZG93bmxvYWRzL2ZsdXNoLWl0ZW0uanM/NzE0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IG1rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpO1xuXG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL2FwcC1zZXR0aW5ncycpO1xuY29uc3QganNvbmZpbGUgPSByZXF1aXJlKCdqc29uZmlsZScpO1xuY29uc3QgTGlua1NhdmUgPSByZXF1aXJlKCcuLi9tYW5pZmVzdC9qc29uL2xpbmstc2F2ZScpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yYWdlS2V5IC0gc3RvcmFnZSBrZXlcbiAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtcyAtIHN0b3JhZ2UgaXRlbXNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBGbHVzaEl0ZW0gKG1hbmlmZXN0SWQsIHN0b3JhZ2VLZXksIGl0ZW1zKSB7XG4gIHRoaXMubWFuaWZlc3RJZCA9IG1hbmlmZXN0SWQ7XG4gIHRoaXMuc3RvcmFnZUtleSA9IHN0b3JhZ2VLZXk7XG4gIHRoaXMuaXRlbXMgPSBpdGVtcztcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZSAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBzYXZlIHdhcyBzdWNjZXNzZnVsXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSByZWplY3QgLSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gc2F2ZSBmYWlsZWRcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRmx1c2hJdGVtLnByb3RvdHlwZS5fc2F2ZVRvRGlzayA9IGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGNvbnN0IHBhdGggPSBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnNldHRpbmdzRm9sZGVyICsgdGhpcy5tYW5pZmVzdElkICsgXCIvXCI7XG4gIGNvbnN0IGZpbGUgPSBcIlwiICsgdGhpcy5zdG9yYWdlS2V5ICsgXCIuanNvblwiO1xuICBjb25zdCBmaWxlVXJsID0gcGF0aCArIGZpbGU7XG4gIG1rZGlycChwYXRoLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkYXRhID0gY29udmVydFN0b3JhZ2Uoc2VsZi5zdG9yYWdlS2V5LCBzZWxmLml0ZW1zKTtcbiAgICAgIGpzb25maWxlLndyaXRlRmlsZShmaWxlVXJsLCBkYXRhLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xuRmx1c2hJdGVtLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UodGhpcy5fc2F2ZVRvRGlzay5iaW5kKHRoaXMpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRmx1c2hJdGVtO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHN0b3JhZ2VLZXkgLSBzdG9yYWdlIGtleVxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW1zIC0gc3RvcmFnZSBpdGVtc1xuICogQHJldHVybnMgeyp9IGRhdGEgdG8gYmUgc3RvcmVkXG4gKi9cbmNvbnN0IGNvbnZlcnRTdG9yYWdlID0gZnVuY3Rpb24gY29udmVydFN0b3JhZ2UgKHN0b3JhZ2VLZXksIGl0ZW1zKSB7XG4gIGxldCBpdGVtc0EgPSBbXTtcbiAgbGV0IGRhdGE7XG4gIC8vb25seSBmb3IgZG93bmxvYWRpbmcgd2Ugd2FudCB0byBoYXZlIGFuIGFycmF5XG4gIGlmIChzdG9yYWdlS2V5ID09PSBcImRvd25sb2FkaW5nXCIpIHtcbiAgICBpdGVtc0EgPSBbXTtcbiAgICBmb3IgKGxldCBrZXkgaW4gaXRlbXMpIHtcbiAgICAgIGl0ZW1zQS5wdXNoKGl0ZW1zW2tleV0pO1xuICAgIH1cbiAgICBpdGVtcyA9IGl0ZW1zQTtcbiAgfVxuICBpZiAoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGRhdGEgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgZGF0YS5wdXNoKG5ldyBMaW5rU2F2ZShpdGVtc1tpXSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkYXRhID0gaXRlbXM7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG4iXSwibmFtZXMiOlsibWtkaXJwIiwicmVxdWlyZSIsImFwcFNldHRpbmdzIiwianNvbmZpbGUiLCJMaW5rU2F2ZSIsIkZsdXNoSXRlbSIsIm1hbmlmZXN0SWQiLCJzdG9yYWdlS2V5IiwiaXRlbXMiLCJwcm90b3R5cGUiLCJfc2F2ZVRvRGlzayIsInJlc29sdmUiLCJyZWplY3QiLCJzZWxmIiwicGF0aCIsImdldFNldHRpbmdzIiwic2V0dGluZ3NGb2xkZXIiLCJmaWxlIiwiZmlsZVVybCIsImVyciIsImRhdGEiLCJjb252ZXJ0U3RvcmFnZSIsIndyaXRlRmlsZSIsInNhdmUiLCJQcm9taXNlIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpdGVtc0EiLCJrZXkiLCJwdXNoIiwiQXJyYXkiLCJpIiwiaiIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1789\n')},3812:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar jsonfile = __webpack_require__(3480);\nvar path = __webpack_require__(1017);\nvar appSettings = __webpack_require__(9277);\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {string} itemName - item name\n * @returns {Promise} promise\n * @constructor\n */\nfunction ReadItem(manifestId, itemName) {\n  if (!manifestId) {\n    throw new Error("manifestId is missing");\n  }\n  this._manifestId = manifestId;\n  this._itemName = itemName;\n  return new Promise(this._read.bind(this));\n}\n\n/**\n *\n * @param {function} resolve - callback to be invoked on finish\n * @private\n * @returns {void}\n */\nReadItem.prototype._read = function (resolve) {\n  var fileUrl = path.resolve(appSettings.getSettings().settingsFolder + "/" + this._manifestId + "/" + this._itemName + ".json");\n  jsonfile.readFile(fileUrl, function (err, data) {\n    if (err) {\n      resolve();\n    } else {\n      resolve(data);\n    }\n  });\n};\nmodule.exports = ReadItem;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgxMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsSUFBVSxDQUFDO0FBQ3BDLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxJQUFNLENBQUM7QUFFNUIsSUFBTUUsV0FBVyxHQUFHRixtQkFBTyxDQUFDLElBQWlCLENBQUM7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0csUUFBUSxDQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRTtFQUN2QyxJQUFJLENBQUNELFVBQVUsRUFBRTtJQUNmLE1BQU0sSUFBSUUsS0FBSyxDQUFDLHVCQUF1QixDQUFDO0VBQzFDO0VBQ0EsSUFBSSxDQUFDQyxXQUFXLEdBQUdILFVBQVU7RUFDN0IsSUFBSSxDQUFDSSxTQUFTLEdBQUdILFFBQVE7RUFDekIsT0FBTyxJQUFJSSxPQUFPLENBQUMsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQVIsUUFBUSxDQUFDUyxTQUFTLENBQUNGLEtBQUssR0FBRyxVQUFVRyxPQUFPLEVBQUU7RUFDNUMsSUFBTUMsT0FBTyxHQUFHYixJQUFJLENBQUNZLE9BQU8sQ0FBQ1gsV0FBVyxDQUFDYSxXQUFXLEVBQUUsQ0FBQ0MsY0FBYyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUNULFdBQVcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDQyxTQUFTLEdBQUcsT0FBTyxDQUFDO0VBQ2hJVCxRQUFRLENBQUNrQixRQUFRLENBQUNILE9BQU8sRUFBRSxVQUFVSSxHQUFHLEVBQUVDLElBQUksRUFBRTtJQUM5QyxJQUFJRCxHQUFHLEVBQUU7TUFDUEwsT0FBTyxFQUFFO0lBQ1gsQ0FBQyxNQUFNO01BQ0xBLE9BQU8sQ0FBQ00sSUFBSSxDQUFDO0lBQ2Y7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHbEIsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvZG93bmxvYWRzL3JlYWQtaXRlbS5qcz9kMWExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QganNvbmZpbGUgPSByZXF1aXJlKCdqc29uZmlsZScpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL2FwcC1zZXR0aW5ncycpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpdGVtTmFtZSAtIGl0ZW0gbmFtZVxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSZWFkSXRlbSAobWFuaWZlc3RJZCwgaXRlbU5hbWUpIHtcbiAgaWYgKCFtYW5pZmVzdElkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibWFuaWZlc3RJZCBpcyBtaXNzaW5nXCIpO1xuICB9XG4gIHRoaXMuX21hbmlmZXN0SWQgPSBtYW5pZmVzdElkO1xuICB0aGlzLl9pdGVtTmFtZSA9IGl0ZW1OYW1lO1xuICByZXR1cm4gbmV3IFByb21pc2UodGhpcy5fcmVhZC5iaW5kKHRoaXMpKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZSAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZmluaXNoXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblJlYWRJdGVtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gIGNvbnN0IGZpbGVVcmwgPSBwYXRoLnJlc29sdmUoYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zZXR0aW5nc0ZvbGRlciArIFwiL1wiICsgdGhpcy5fbWFuaWZlc3RJZCArIFwiL1wiICsgdGhpcy5faXRlbU5hbWUgKyBcIi5qc29uXCIpO1xuICBqc29uZmlsZS5yZWFkRmlsZShmaWxlVXJsLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRJdGVtOyJdLCJuYW1lcyI6WyJqc29uZmlsZSIsInJlcXVpcmUiLCJwYXRoIiwiYXBwU2V0dGluZ3MiLCJSZWFkSXRlbSIsIm1hbmlmZXN0SWQiLCJpdGVtTmFtZSIsIkVycm9yIiwiX21hbmlmZXN0SWQiLCJfaXRlbU5hbWUiLCJQcm9taXNlIiwiX3JlYWQiLCJiaW5kIiwicHJvdG90eXBlIiwicmVzb2x2ZSIsImZpbGVVcmwiLCJnZXRTZXR0aW5ncyIsInNldHRpbmdzRm9sZGVyIiwicmVhZEZpbGUiLCJlcnIiLCJkYXRhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3812\n')},8255:module=>{"use strict";eval('\n\nvar STATUSES = {\n  "CREATED": "CREATED",\n  "STARTED": "STARTED",\n  "ERROR": "ERROR",\n  "STOPPED": "STOPPED",\n  "FINISHED": "FINISHED",\n  "BROKEN": "BROKEN",\n  "QUEUED": "QUEUED"\n};\nmodule.exports = STATUSES;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUc7RUFDZixTQUFTLEVBQUUsU0FBUztFQUNwQixTQUFTLEVBQUUsU0FBUztFQUNwQixPQUFPLEVBQUUsT0FBTztFQUNoQixTQUFTLEVBQUUsU0FBUztFQUNwQixVQUFVLEVBQUUsVUFBVTtFQUN0QixRQUFRLEVBQUUsUUFBUTtFQUNsQixRQUFRLEVBQUU7QUFDWixDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHRixRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9kb3dubG9hZHMvc3RhdHVzZXMuanM/OWM1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFNUQVRVU0VTID0ge1xuICBcIkNSRUFURURcIjogXCJDUkVBVEVEXCIsXG4gIFwiU1RBUlRFRFwiOiBcIlNUQVJURURcIixcbiAgXCJFUlJPUlwiOiBcIkVSUk9SXCIsXG4gIFwiU1RPUFBFRFwiOiBcIlNUT1BQRURcIixcbiAgXCJGSU5JU0hFRFwiOiBcIkZJTklTSEVEXCIsXG4gIFwiQlJPS0VOXCI6IFwiQlJPS0VOXCIsXG4gIFwiUVVFVUVEXCI6IFwiUVVFVUVEXCJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU1RBVFVTRVM7Il0sIm5hbWVzIjpbIlNUQVRVU0VTIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8255\n')},6716:module=>{"use strict";eval("\n\nfunction SyncItem(resolve, reject, manifestId, storageKeys) {\n  this.resolve = resolve;\n  this.reject = reject;\n  this.manifestId = manifestId;\n  this.storageKeys = storageKeys;\n}\nmodule.exports = SyncItem;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcxNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxRQUFRLENBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLFdBQVcsRUFBRTtFQUMzRCxJQUFJLENBQUNILE9BQU8sR0FBR0EsT0FBTztFQUN0QixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUNwQixJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVTtFQUM1QixJQUFJLENBQUNDLFdBQVcsR0FBR0EsV0FBVztBQUNoQztBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBR04sUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvZG93bmxvYWRzL3N5bmMtaXRlbS5qcz84YjFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBTeW5jSXRlbSAocmVzb2x2ZSwgcmVqZWN0LCBtYW5pZmVzdElkLCBzdG9yYWdlS2V5cykge1xuICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgdGhpcy5tYW5pZmVzdElkID0gbWFuaWZlc3RJZDtcbiAgdGhpcy5zdG9yYWdlS2V5cyA9IHN0b3JhZ2VLZXlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bmNJdGVtO1xuIl0sIm5hbWVzIjpbIlN5bmNJdGVtIiwicmVzb2x2ZSIsInJlamVjdCIsIm1hbmlmZXN0SWQiLCJzdG9yYWdlS2V5cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6716\n")},588:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(4952);\nvar Snowflake = __webpack_require__(9499);\nvar electron = __webpack_require__(7194);\nvar electronRemote = process.type === \'browser\' ? electron : __webpack_require__(7911);\nvar appSettings = __webpack_require__(9277);\nvar beMethods = __webpack_require__(9097);\nvar DownloadsController = __webpack_require__(4612);\nvar ManifestController = __webpack_require__(42);\nvar OfflineController = __webpack_require__(7094);\nvar SubscribersController = __webpack_require__(9256);\nvar Server = __webpack_require__(9837);\nvar DownstreamElectronBE;\nfunction deserialize(serializedJavascript) {\n  try {\n    return JSON.parse(serializedJavascript);\n  } catch (err) {\n    return {};\n  }\n}\n\n/**\n * @constructor\n * @namespace DownstreamElectronBE\n * @param {object} configParams - configuration\n * @property {DownstreamElectronBE.init} init - initialize api in main process\n * @description\n * During initialization you can configure your app, [click here]{@link DownstreamElectronBE.configuration}\n *\n * @example\n * //somewhere in the main process\n * const { BrowserWindow, app } = require(\'electron\');\n * const downstreamElectron = require(\'downstream-electron\');\n *\n * const userSettings = {\n *   "appDir": "/Users/admin/myApp",\n *   "settingsName": "settings",\n *   "publicName": "public",\n *   "downloadsName": "movies"\n * };\n *\n * let downstreamInstance;\n * function createWindow() {\n *   downstreamInstance = downstreamElectron.init(userSettings);\n *   const win = new BrowserWindow({\n *     width: 1200,\n *     height: 700,\n *     resizable: true,\n *     webPreferences: {\n *       plugins: true,\n *       nodeIntegration: true\n *     }\n *   });\n *   win.loadURL(\'file://index.html\');\n *   win.webContents.openDevTools();\n * }\n *\n * function onWillQuit() {\n *  downstreamInstance.stop();\n * }\n *\n * app.on(\'ready\', createWindow);\n * app.on(\'will-quit\', onWillQuit);\n * app.on(\'window-all-closed\', function () {\n *  console.log("window-all-closed");\n *  app.quit();\n * });\n */\nDownstreamElectronBE = function DownstreamElectronBE() {\n  this._offlineContentPort = appSettings.getSettings().offlineContentPortStart;\n  _.bindAll(this, "_onApiRequest", "processSubscriber");\n  this._createControllers();\n  this._serveOfflineContent();\n  this._attachEvents();\n  // this.offlineController.restoreLocalManifest("6163760572308389888");\n};\n\nDownstreamElectronBE.prototype.stop = function () {\n  this.server.stop();\n};\n\n/**\n *\n * @param {string} methodName - api function\n * @param {string} promiseId - promise identifier\n * @param {object} args - arguments\n * @param {number} target - target window id\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._apiMethods = function (methodName, promiseId, args, target) {\n  var self = this;\n  var manifestId = args[0];\n  var response = {};\n  response.promiseId = promiseId;\n  var onSuccess = function onSuccess(result, subscribersId) {\n    response.subscribersId = subscribersId;\n    response.status = "OK";\n    response.result = result;\n    response.manifestId = manifestId;\n    self._send(response, target);\n  };\n  var onFailure = function onFailure(err, internalError) {\n    var errorId = String(Snowflake.SnowflakeId.getUUID());\n    var errorInfo = _.clone({\n      errorId: errorId,\n      methodName: methodName,\n      args: args.slice(4),\n      err: err,\n      internalError: internalError\n    });\n    response.manifestId = manifestId;\n    response.status = "ERROR";\n    response.error = err || {};\n    response.error.errorId = errorId;\n    response.error.details = internalError;\n    self._send(response, target);\n\n    // @TODO log all errors that user have seen, the errorId will help to find stack\n    try {\n      console.error(new Date(), "Error occurred", JSON.stringify(errorInfo));\n    } catch (e) {\n      //do nothing\n    }\n  };\n  args = args || [];\n  args.unshift(target);\n  args.unshift(onFailure);\n  args.unshift(onSuccess);\n  args.unshift(this);\n  var method = this._getMethod(methodName);\n  if (typeof method === "function") {\n    method.apply(null, args);\n  } else {\n    response.status = "ERROR";\n    response.error = "Provided method \'" + methodName + "\' doesn\'t exists";\n    this._send(response, target);\n    console.error("ERROR", "Provided method \'" + methodName + "\' doesn\'t exists");\n  }\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._attachEvents = function () {\n  var ipcMain = (__webpack_require__(7194).ipcMain);\n  ipcMain.on("downstreamElectronBE", this._onApiRequest);\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._createControllers = function () {\n  this.manifestController = new ManifestController();\n  this.offlineController = new OfflineController(this.manifestController);\n  this.downloadsController = new DownloadsController(this.manifestController, this.offlineController);\n  this.subscribersController = new SubscribersController();\n};\n\n/**\n *\n * @param {string} methodName - method name\n * @returns {*} - method\n * @private\n */\nDownstreamElectronBE.prototype._getMethod = function (methodName) {\n  var names = methodName.split(".");\n  var i, j, method;\n  method = beMethods[names[0]];\n  for (i = 1, j = names.length; i < j; i++) {\n    method = method[names[i]];\n  }\n  return method;\n};\n\n/**\n *\n * @param {object} evt - event\n * @param {object} data - data from renderer\n * @param {number} target - target window id\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._onApiRequest = function (evt, data, target) {\n  var promiseId = data.promiseId;\n  var argsObj = deserialize(data.args) || {};\n  var method = data.method;\n  var windowId = data.windowId;\n  target = windowId;\n  var args = [];\n  var i = 0;\n  while (argsObj.hasOwnProperty(i)) {\n    args.push(argsObj[i]);\n    i++;\n  }\n  this._apiMethods(method, promiseId, args, target);\n};\n\n/**\n * @private\n * @param {object} response - response\n * @param {number} target - window target id\n * @returns {void}\n */\nDownstreamElectronBE.prototype._send = function (response, target) {\n  try {\n    var windows = electronRemote.BrowserWindow.getAllWindows();\n    for (var i = 0, j = windows.length; i < j; i++) {\n      if (windows[i].id === target) {\n        windows[i].webContents.send(\'downstreamElectronFE\', response);\n        break;\n      }\n    }\n  } catch (err) {\n    console.error("internal error ocurred", err);\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._serveOfflineContent = function () {\n  var self = this;\n  var maxOfflineContentPortRange = appSettings.getSettings().maxOfflineContentPortRange;\n  this.server = new Server(this.offlineController, this.downloadsController, maxOfflineContentPortRange, this._offlineContentPort);\n  this.server.serveOfflineContent(function (offlinePort) {\n    self._offlineContentPort = offlinePort;\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {string} - offline path\n */\nDownstreamElectronBE.prototype.getOfflinePath = function (manifestId) {\n  var offlinePath = appSettings.getSettings().offlineDomain;\n  var offlineContentPort = this._offlineContentPort;\n  if (offlineContentPort) {\n    offlinePath += ":" + offlineContentPort;\n  }\n  offlinePath += "/" + encodeURIComponent(appSettings.getSettings().downloadsName) + "/" + encodeURIComponent(manifestId) + "/";\n  return offlinePath;\n};\n\n/**\n *\n * @param {string} subscriberId - subscriber identifier\n * @param {object} err - error\n * @param {object} result - result\n * @param {number} target - window target id\n * @param {boolean} subscriberFinished - download finished\n * @returns {void}\n */\nDownstreamElectronBE.prototype.processSubscriber = function (subscriberId, err, result, target, subscriberFinished) {\n  var response = {};\n  response.subscriberId = subscriberId;\n  response.status = err ? "ERROR" : "OK";\n  response.err = err;\n  response.result = result;\n  response.subscriberFinished = subscriberFinished;\n  this._send(response, target);\n  if (subscriberFinished) {\n    this.subscribersController.removeAllManifestSubscribersById(subscriberId);\n  }\n};\n\n//---------------------------\nmodule.exports = {\n  init: function init(userSettings) {\n    appSettings.load(userSettings);\n    return new DownstreamElectronBE();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///588\n')},7258:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(9241);\nmodule.exports = function AudioRepresentation(attr) {\n  fieldsPicker(this, ["audioSamplingRate", "bandwidth", "id", "lang", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzI1OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUV4REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsbUJBQW1CLENBQUVDLElBQUksRUFBRTtFQUNuREwsWUFBWSxDQUFDLElBQUksRUFBRSxDQUNqQixtQkFBbUIsRUFDbkIsV0FBVyxFQUNYLElBQUksRUFDSixNQUFNLEVBQ04sYUFBYSxDQUNkLEVBQUVLLElBQUksQ0FBQztBQUNWLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L2pzb24vYXVkaW8tcmVwcmVzZW50YXRpb24uanM/ZTMzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZpZWxkc1BpY2tlciA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2ZpZWxkcy1waWNrZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQXVkaW9SZXByZXNlbnRhdGlvbiAoYXR0cikge1xuICBmaWVsZHNQaWNrZXIodGhpcywgW1xuICAgIFwiYXVkaW9TYW1wbGluZ1JhdGVcIixcbiAgICBcImJhbmR3aWR0aFwiLFxuICAgIFwiaWRcIixcbiAgICBcImxhbmdcIixcbiAgICBcImR1cmF0aW9uSW5TXCJcbiAgXSwgYXR0cik7XG59O1xuIl0sIm5hbWVzIjpbImZpZWxkc1BpY2tlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiQXVkaW9SZXByZXNlbnRhdGlvbiIsImF0dHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7258\n')},8798:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(9241);\nmodule.exports = function LinkSave(attr) {\n  fieldsPicker(this, ["id", "contentType", "bandwidth", "remoteUrl", "stats", "localUrl"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODc5OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUV4REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsUUFBUSxDQUFFQyxJQUFJLEVBQUU7RUFDeENMLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FDakIsSUFBSSxFQUNKLGFBQWEsRUFDYixXQUFXLEVBQ1gsV0FBVyxFQUNYLE9BQU8sRUFDUCxVQUFVLENBQ1gsRUFBRUssSUFBSSxDQUFDO0FBQ1YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvanNvbi9saW5rLXNhdmUuanM/MWEwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZpZWxkc1BpY2tlciA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2ZpZWxkcy1waWNrZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTGlua1NhdmUgKGF0dHIpIHtcbiAgZmllbGRzUGlja2VyKHRoaXMsIFtcbiAgICBcImlkXCIsXG4gICAgXCJjb250ZW50VHlwZVwiLFxuICAgIFwiYmFuZHdpZHRoXCIsXG4gICAgXCJyZW1vdGVVcmxcIixcbiAgICBcInN0YXRzXCIsXG4gICAgXCJsb2NhbFVybFwiXG4gIF0sIGF0dHIpO1xufTsiXSwibmFtZXMiOlsiZmllbGRzUGlja2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJMaW5rU2F2ZSIsImF0dHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8798\n')},6092:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(9241);\nmodule.exports = function TextRepresentation(attr) {\n  fieldsPicker(this, ["bandwidth", "id", "lang", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA5Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUN4REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0Msa0JBQWtCLENBQUVDLElBQUksRUFBRTtFQUNsREwsWUFBWSxDQUFDLElBQUksRUFBRSxDQUNqQixXQUFXLEVBQ1gsSUFBSSxFQUNKLE1BQU0sRUFDTixhQUFhLENBQ2QsRUFBRUssSUFBSSxDQUFDO0FBQ1YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvanNvbi90ZXh0LXJlcHJlc2VudGF0aW9uLmpzP2UwMGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBmaWVsZHNQaWNrZXIgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9maWVsZHMtcGlja2VyXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUZXh0UmVwcmVzZW50YXRpb24gKGF0dHIpIHtcbiAgZmllbGRzUGlja2VyKHRoaXMsIFtcbiAgICBcImJhbmR3aWR0aFwiLFxuICAgIFwiaWRcIixcbiAgICBcImxhbmdcIixcbiAgICBcImR1cmF0aW9uSW5TXCJcbiAgXSwgYXR0cik7XG59O1xuIl0sIm5hbWVzIjpbImZpZWxkc1BpY2tlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiVGV4dFJlcHJlc2VudGF0aW9uIiwiYXR0ciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6092\n')},5533:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(9241);\nmodule.exports = function VideoRepresentation(attr) {\n  fieldsPicker(this, ["bandwidth", "id", "height", "lang", "width", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUzMy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUN4REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsbUJBQW1CLENBQUVDLElBQUksRUFBRTtFQUNuREwsWUFBWSxDQUFDLElBQUksRUFBRSxDQUNqQixXQUFXLEVBQ1gsSUFBSSxFQUNKLFFBQVEsRUFDUixNQUFNLEVBQ04sT0FBTyxFQUNQLGFBQWEsQ0FDZCxFQUFFSyxJQUFJLENBQUM7QUFDVixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9qc29uL3ZpZGVvLXJlcHJlc2VudGF0aW9uLmpzPzUxYTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBmaWVsZHNQaWNrZXIgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9maWVsZHMtcGlja2VyXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBWaWRlb1JlcHJlc2VudGF0aW9uIChhdHRyKSB7XG4gIGZpZWxkc1BpY2tlcih0aGlzLCBbXG4gICAgXCJiYW5kd2lkdGhcIixcbiAgICBcImlkXCIsXG4gICAgXCJoZWlnaHRcIixcbiAgICBcImxhbmdcIixcbiAgICBcIndpZHRoXCIsXG4gICAgXCJkdXJhdGlvbkluU1wiXG4gIF0sIGF0dHIpO1xufTtcbiJdLCJuYW1lcyI6WyJmaWVsZHNQaWNrZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlZpZGVvUmVwcmVzZW50YXRpb24iLCJhdHRyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5533\n')},2927:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar _require = __webpack_require__(7194),\n  net = _require.net;\nvar appSettings = __webpack_require__(9277);\nvar ManifestLoader = function () {\n  function ManifestLoader() {}\n  ManifestLoader.prototype.load = function (url) {\n    return this.sendXMLHttpRequest(url);\n  };\n  ManifestLoader.prototype.sendXMLHttpRequest = function (url) {\n    var req_options = Object.assign({\n      url: url,\n      method: 'GET'\n    }, appSettings.getSettings().defaultManifestRequestOptions);\n    return new Promise(function (resolve, reject) {\n      var req = net.request(req_options);\n      req.on('error', function (err) {\n        reject(err);\n      });\n      req.on('response', function (response) {\n        response.on(\"error\", function (error) {\n          reject(new Error(\"MANIFEST LOAD FAILURE \" + error));\n        });\n        var error;\n        if (response.statusCode >= 400) {\n          error = response.statusMessage;\n        }\n        if (!error) {\n          var body = [];\n          response.on('data', function (chunk) {\n            body.push(chunk);\n          }).on('end', function () {\n            body = Buffer.concat(body);\n            resolve({\n              response: body,\n              url: url\n            });\n          });\n        } else {\n          reject(new Error(\"MANIFEST LOAD FAILURE \" + error));\n        }\n      });\n      req.end();\n    });\n  };\n  return ManifestLoader;\n}();\nexports.ManifestLoader = ManifestLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkyNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixlQUFjQSxtQkFBTyxDQUFDLElBQVUsQ0FBQztFQUExQkMsR0FBRyxZQUFIQSxHQUFHO0FBQ1YsSUFBTUMsV0FBVyxHQUFHRixtQkFBTyxDQUFDLElBQW9CLENBQUM7QUFFakQsSUFBTUcsY0FBYyxHQUFJLFlBQVk7RUFDbEMsU0FBU0EsY0FBYyxHQUFJLENBQUM7RUFFNUJBLGNBQWMsQ0FBQ0MsU0FBUyxDQUFDQyxJQUFJLEdBQUcsVUFBVUMsR0FBRyxFQUFFO0lBQzdDLE9BQU8sSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ0QsR0FBRyxDQUFDO0VBQ3JDLENBQUM7RUFDREgsY0FBYyxDQUFDQyxTQUFTLENBQUNHLGtCQUFrQixHQUFHLFVBQVVELEdBQUcsRUFBRTtJQUMzRCxJQUFNRSxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDO01BQ2hDSixHQUFHLEVBQUVBLEdBQUc7TUFDUkssTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUFFVCxXQUFXLENBQUNVLFdBQVcsRUFBRSxDQUFDQyw2QkFBNkIsQ0FBQztJQUUzRCxPQUFPLElBQUlDLE9BQU8sQ0FBQyxVQUFVQyxPQUFPLEVBQUVDLE1BQU0sRUFBRTtNQUM1QyxJQUFJQyxHQUFHLEdBQUdoQixHQUFHLENBQUNpQixPQUFPLENBQUNWLFdBQVcsQ0FBQztNQUVsQ1MsR0FBRyxDQUFDRSxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUNDLEdBQUcsRUFBSztRQUN2QkosTUFBTSxDQUFDSSxHQUFHLENBQUM7TUFDYixDQUFDLENBQUM7TUFFRkgsR0FBRyxDQUFDRSxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQUNFLFFBQVEsRUFBSztRQUUvQkEsUUFBUSxDQUFDRixFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVVHLEtBQUssRUFBRTtVQUNwQ04sTUFBTSxDQUFDLElBQUlPLEtBQUssQ0FBQyx3QkFBd0IsR0FBR0QsS0FBSyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDO1FBRUYsSUFBSUEsS0FBSztRQUNULElBQUlELFFBQVEsQ0FBQ0csVUFBVSxJQUFJLEdBQUcsRUFBRTtVQUM1QkYsS0FBSyxHQUFHRCxRQUFRLENBQUNJLGFBQWE7UUFDbEM7UUFFQSxJQUFJLENBQUNILEtBQUssRUFBRTtVQUNWLElBQUlJLElBQUksR0FBRyxFQUFFO1VBQ2JMLFFBQVEsQ0FBQ0YsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDUSxLQUFLLEVBQUs7WUFDN0JELElBQUksQ0FBQ0UsSUFBSSxDQUFDRCxLQUFLLENBQUM7VUFDbEIsQ0FBQyxDQUFDLENBQUNSLEVBQUUsQ0FBQyxLQUFLLEVBQUUsWUFBTTtZQUNqQk8sSUFBSSxHQUFHRyxNQUFNLENBQUNDLE1BQU0sQ0FBQ0osSUFBSSxDQUFDO1lBQzFCWCxPQUFPLENBQUM7Y0FBQ00sUUFBUSxFQUFFSyxJQUFJO2NBQUVwQixHQUFHLEVBQUVBO1lBQUcsQ0FBQyxDQUFDO1VBQ3JDLENBQUMsQ0FBQztRQUNKLENBQUMsTUFBTTtVQUNIVSxNQUFNLENBQUMsSUFBSU8sS0FBSyxDQUFDLHdCQUF3QixHQUFHRCxLQUFLLENBQUMsQ0FBQztRQUN2RDtNQUNGLENBQUMsQ0FBQztNQUNGTCxHQUFHLENBQUNjLEdBQUcsRUFBRTtJQUNYLENBQUMsQ0FBQztFQUNKLENBQUM7RUFDRCxPQUFPNUIsY0FBYztBQUN2QixDQUFDLEVBQUc7QUFDSjZCLHNCQUFzQixHQUFHN0IsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvbG9hZGVyL21hbmlmZXN0LWxvYWRlci5qcz85NTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3Qge25ldH0gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKCcuLi8uLi9hcHAtc2V0dGluZ3MnKTtcblxuY29uc3QgTWFuaWZlc3RMb2FkZXIgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYW5pZmVzdExvYWRlciAoKSB7fVxuXG4gIE1hbmlmZXN0TG9hZGVyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKHVybCkge1xuICAgIHJldHVybiB0aGlzLnNlbmRYTUxIdHRwUmVxdWVzdCh1cmwpO1xuICB9O1xuICBNYW5pZmVzdExvYWRlci5wcm90b3R5cGUuc2VuZFhNTEh0dHBSZXF1ZXN0ID0gZnVuY3Rpb24gKHVybCkge1xuICAgIGNvbnN0IHJlcV9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICB1cmw6IHVybCxcbiAgICAgIG1ldGhvZDogJ0dFVCdcbiAgICB9LCBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLmRlZmF1bHRNYW5pZmVzdFJlcXVlc3RPcHRpb25zKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBsZXQgcmVxID0gbmV0LnJlcXVlc3QocmVxX29wdGlvbnMpO1xuXG4gICAgICByZXEub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXEub24oJ3Jlc3BvbnNlJywgKHJlc3BvbnNlKSA9PiB7XG5cbiAgICAgICAgcmVzcG9uc2Uub24oXCJlcnJvclwiLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiTUFOSUZFU1QgTE9BRCBGQUlMVVJFIFwiICsgZXJyb3IpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGVycm9yO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSA0MDApIHtcbiAgICAgICAgICAgIGVycm9yID0gcmVzcG9uc2Uuc3RhdHVzTWVzc2FnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICBsZXQgYm9keSA9IFtdO1xuICAgICAgICAgIHJlc3BvbnNlLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XG4gICAgICAgICAgICBib2R5LnB1c2goY2h1bmspO1xuICAgICAgICAgIH0pLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICBib2R5ID0gQnVmZmVyLmNvbmNhdChib2R5KTtcbiAgICAgICAgICAgIHJlc29sdmUoe3Jlc3BvbnNlOiBib2R5LCB1cmw6IHVybH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIk1BTklGRVNUIExPQUQgRkFJTFVSRSBcIiArIGVycm9yKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmVxLmVuZCgpO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gTWFuaWZlc3RMb2FkZXI7XG59KCkpO1xuZXhwb3J0cy5NYW5pZmVzdExvYWRlciA9IE1hbmlmZXN0TG9hZGVyO1xuIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJuZXQiLCJhcHBTZXR0aW5ncyIsIk1hbmlmZXN0TG9hZGVyIiwicHJvdG90eXBlIiwibG9hZCIsInVybCIsInNlbmRYTUxIdHRwUmVxdWVzdCIsInJlcV9vcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwibWV0aG9kIiwiZ2V0U2V0dGluZ3MiLCJkZWZhdWx0TWFuaWZlc3RSZXF1ZXN0T3B0aW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxIiwicmVxdWVzdCIsIm9uIiwiZXJyIiwicmVzcG9uc2UiLCJlcnJvciIsIkVycm9yIiwic3RhdHVzQ29kZSIsInN0YXR1c01lc3NhZ2UiLCJib2R5IiwiY2h1bmsiLCJwdXNoIiwiQnVmZmVyIiwiY29uY2F0IiwiZW5kIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2927\n")},3895:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\n\n/**\n * @param {string} url - local url\n * @returns {Promise} promise\n * @constructor\n */\nfunction ManifestLocalLoader(url) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(path.resolve(url), "utf-8", function (err, content) {\n      if (!err) {\n        resolve(content);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\nmodule.exports = ManifestLocalLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxJQUFNLENBQUM7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxtQkFBbUIsQ0FBRUMsR0FBRyxFQUFFO0VBQ2pDLE9BQU8sSUFBSUMsT0FBTyxDQUFDLFVBQVVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFO0lBQzVDUCxFQUFFLENBQUNRLFFBQVEsQ0FBQ04sSUFBSSxDQUFDSSxPQUFPLENBQUNGLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVSyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtNQUM5RCxJQUFJLENBQUNELEdBQUcsRUFBRTtRQUNSSCxPQUFPLENBQUNJLE9BQU8sQ0FBQztNQUNsQixDQUFDLE1BQU07UUFDTEgsTUFBTSxDQUFDRSxHQUFHLENBQUM7TUFDYjtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKO0FBQ0FFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVCxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L2xvYWRlci9tYW5pZmVzdC1sb2NhbC1sb2FkZXIuanM/ZjM2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIGxvY2FsIHVybFxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYW5pZmVzdExvY2FsTG9hZGVyICh1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUodXJsKSwgXCJ1dGYtOFwiLCBmdW5jdGlvbiAoZXJyLCBjb250ZW50KSB7XG4gICAgICBpZiAoIWVycikge1xuICAgICAgICByZXNvbHZlKGNvbnRlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBNYW5pZmVzdExvY2FsTG9hZGVyO1xuIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJNYW5pZmVzdExvY2FsTG9hZGVyIiwidXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWFkRmlsZSIsImVyciIsImNvbnRlbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3895\n')},1269:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar ManifestLoader = __webpack_require__(2927);\nvar ManifestLocalLoader = __webpack_require__(3895);\n// const ManifestXML_1 = require(\"./../parser/manifest-xml\");\nvar ManifestXML_1 = __webpack_require__(4624);\nvar AllAdaptationSets_1 = __webpack_require__(7936);\nvar SnowflakeId_1 = __webpack_require__(9499);\nvar jsonRepresentation = __webpack_require__(1700);\nvar jsonRepresentationWithProtection = __webpack_require__(4723);\nvar manifestLoader = new ManifestLoader.ManifestLoader();\nvar urlParse = __webpack_require__(3720);\nvar encoding = __webpack_require__(5169);\nvar Manifest = function () {\n  function Manifest(id) {\n    if (!id) {\n      this.id = String(SnowflakeId_1.SnowflakeId.getUUID());\n    } else {\n      this.id = id;\n    }\n  }\n  Manifest.prototype._setUpUrl = function (url) {\n    var pathName = urlParse(url).pathname;\n    this.url = url;\n    this.url_domain = url.substring(0, url.lastIndexOf('/') + 1);\n    this.manifest_name = pathName.substring(pathName.lastIndexOf('/') + 1, pathName.length);\n  };\n  Manifest.prototype.load = function (url) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this._setUpUrl(url);\n      var p = manifestLoader.load(url);\n      p.then(function (v) {\n        var isEncodingUTF16 = encoding.isUTF16(v.response);\n        v.response = v.response.toString(isEncodingUTF16 ? 'utf16le' : 'utf-8');\n        var xml = v.response;\n        _this.manifestXML = new ManifestXML_1.ManifestXML();\n        _this.manifestXML.parse(xml, function () {\n          resolve();\n        }, function (e) {\n          reject(e);\n          throw new Error(\"Manifest parsing error\");\n        });\n      }, function (e) {\n        reject(e);\n      });\n    });\n  };\n  Manifest.prototype.loadWithManifest = function (url, manifest) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this._setUpUrl(url);\n      _this.manifestXML = new ManifestXML_1.ManifestXML();\n      _this.manifestXML.parse(manifest, function () {\n        resolve();\n      }, function (e) {\n        reject(e);\n        throw new Error(\"Manifest parsing error\");\n      });\n    });\n  };\n  Manifest.prototype.loadFromLocal = function (localPath, url) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      if (!url || !localPath) {\n        reject('wrong parameter');\n        return;\n      }\n      ManifestLocalLoader(localPath).then(function (str) {\n        _this._setUpUrl(url);\n        _this.manifestXML = new ManifestXML_1.ManifestXML();\n        _this.manifestXML.parse(str, function () {\n          resolve();\n        }, function (e) {\n          reject(e);\n        });\n      }, function (e) {\n        reject(e);\n      });\n    });\n  };\n  Manifest.prototype.loadFromStr = function (str, url) {\n    this.url_domain = url.substring(0, url.lastIndexOf('/') + 1);\n    this.manifest_name = url.substring(url.lastIndexOf('/') + 1, url.length);\n    this.manifestXML = new ManifestXML_1.ManifestXML();\n    this.manifestXML.parse(str);\n  };\n  Manifest.prototype.getAdaptationSets = function () {\n    var vid = this.manifestXML.getVideoAdaptation();\n    var audio = this.manifestXML.getAudioAdaptation();\n    var text = this.manifestXML.getTextAdaptation();\n    var all = new AllAdaptationSets_1.AllAdaptationSets(vid, audio, text);\n    return all;\n  };\n  Manifest.prototype.getVideoRepresentations = function () {\n    return this.manifestXML.getVideoAdaptation();\n  };\n  Manifest.prototype.getAudioRepresentations = function () {\n    return this.manifestXML.getAudioAdaptation();\n  };\n  Manifest.prototype.getTextRepresentations = function () {\n    return this.manifestXML.getTextAdaptation();\n  };\n  Manifest.prototype.getProtections = function () {\n    var protections = {};\n    protections.video = jsonRepresentationWithProtection(this.getVideoRepresentations());\n    protections.audio = jsonRepresentationWithProtection(this.getAudioRepresentations());\n    protections.text = jsonRepresentationWithProtection(this.getTextRepresentations());\n    return protections;\n  };\n  Manifest.prototype.getRemoteDomain = function () {\n    return this.url_domain;\n  };\n  Manifest.prototype.getManifestName = function () {\n    return this.manifest_name;\n  };\n  Manifest.prototype.getManifestUrl = function () {\n    return this.url;\n  };\n  Manifest.prototype.getManifestXML = function () {\n    return this.manifestXML.getManifestXML();\n  };\n  Manifest.prototype.removeNode = function () {\n    this.manifestXML.removeNode();\n  };\n  Manifest.prototype.getJsonInfo = function () {\n    var json = {};\n    json.id = this.id;\n    json.audio = jsonRepresentation(this.getAudioRepresentations());\n    json.video = jsonRepresentation(this.getVideoRepresentations());\n    json.text = jsonRepresentation(this.getTextRepresentations());\n    json.protections = this.getProtections();\n    return json;\n  };\n  return Manifest;\n}();\nexports.G = Manifest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1269\n")},4872:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar pssh = __webpack_require__(2310);\nvar MPEG_DASH_PROTECTION_SCHEME_ID_URI = 'urn:mpeg:dash:mp4protection:2011';\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ManifestNode_1 = __webpack_require__(2167);\nvar RepresentationNode_1 = __webpack_require__(3188);\nvar AdaptationSetNode = function (_super) {\n  __extends(AdaptationSetNode, _super);\n  function AdaptationSetNode(node, xml) {\n    _super.call(this, node, xml);\n    this.representationColl = [];\n    this.contentProtections = [];\n    this.parse();\n  }\n  AdaptationSetNode.prototype.parse = function () {\n    var rep = this.currentNode.getElementsByTagName('Representation');\n    for (var i = 0; i < rep.length; i++) {\n      var repNode = new RepresentationNode_1.RepresentationNode(rep[i], this.xml);\n      this.representationColl[i] = repNode;\n      if (this.representationColl[0].hasMimeType()) {\n        {\n          this.attributeList['mimeType'] = this.representationColl[0].getMimeType();\n        }\n      }\n    }\n    var contentProtections = this.currentNode.getElementsByTagName('ContentProtection');\n    var KID;\n    // find CENC KEY ID if there is some\n    for (var _i = 0; _i < contentProtections.length; _i++) {\n      var attrs = contentProtections[_i].attributes;\n      var schemeIdUri = attrs.getNamedItem(\"schemeIdUri\");\n      if (schemeIdUri && schemeIdUri.value.toLowerCase() === MPEG_DASH_PROTECTION_SCHEME_ID_URI) {\n        if (attrs.getNamedItem(\"cenc:default_KID\")) {\n          KID = attrs.getNamedItem(\"cenc:default_KID\").value;\n          break;\n        }\n      }\n    }\n    for (var _i2 = 0; _i2 < contentProtections.length; _i2++) {\n      var _attrs = contentProtections[_i2].attributes;\n      if (_attrs.getNamedItem(\"schemeIdUri\")) {\n        var scheme = _attrs.getNamedItem(\"schemeIdUri\").value.toLowerCase();\n        var cenc = contentProtections[_i2].getElementsByTagNameNS(\"*\", \"pssh\");\n        if (cenc.length) {\n          var contentProtection = {\n            schemeIdUri: scheme,\n            cencPSSH: cenc[0].childNodes[0].data\n          };\n          this.contentProtections.push(contentProtection);\n        } else if (KID && scheme === WIDEVINE_SCHEME_ID_URI) {\n          var psshWV = pssh.createWidevinePsshFromString(KID);\n          var _contentProtection = {\n            schemeIdUri: scheme,\n            cencPSSH: psshWV\n          };\n          this.contentProtections.push(_contentProtection);\n        }\n      }\n    }\n  };\n  AdaptationSetNode.prototype.getContentProtections = function () {\n    return this.contentProtections;\n  };\n  AdaptationSetNode.prototype.getWidevineProtection = function () {\n    return this.contentProtections.filter(function (item) {\n      return item.schemeIdUri && item.schemeIdUri.toLowerCase() === WIDEVINE_SCHEME_ID_URI;\n    });\n  };\n  AdaptationSetNode.prototype.isMimeType = function (str) {\n    return this.attributeList['mimeType'].indexOf(str) != -1 ? true : false;\n  };\n  AdaptationSetNode.prototype.isContentType = function (str) {\n    return this.attributeList['contentType'] && this.attributeList['contentType'].indexOf(str) != -1 ? true : false;\n  };\n  return AdaptationSetNode;\n}(ManifestNode_1.ManifestNode);\nexports.AdaptationSetNode = AdaptationSetNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVksQ0FBRTtBQUMvQkMseUJBQXlCLEdBQUc1QyxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L3BhcnNlci9hZGFwdGF0aW9uLXNldC1ub2RlLmpzPzNjNTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBwc3NoID0gcmVxdWlyZShcIi4vcHNzaFwiKTtcbmNvbnN0IE1QRUdfREFTSF9QUk9URUNUSU9OX1NDSEVNRV9JRF9VUkkgPSAndXJuOm1wZWc6ZGFzaDptcDRwcm90ZWN0aW9uOjIwMTEnO1xuY29uc3QgV0lERVZJTkVfU0NIRU1FX0lEX1VSSSA9ICd1cm46dXVpZDplZGVmOGJhOS03OWQ2LTRhY2UtYTNjOC0yN2RjZDUxZDIxZWQnO1xuXG5jb25zdCBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgIGZvciAobGV0IHAgaW4gYikge1xuICAgICAgICBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgIGRbcF0gPSBiW3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBfXyAoKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBkO1xuICAgICAgfVxuXG4gICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbmNvbnN0IE1hbmlmZXN0Tm9kZV8xID0gcmVxdWlyZShcIi4vbWFuaWZlc3Qtbm9kZVwiKTtcbmNvbnN0IFJlcHJlc2VudGF0aW9uTm9kZV8xID0gcmVxdWlyZShcIi4vcmVwcmVzZW50YXRpb24tbm9kZVwiKTtcbmNvbnN0IEFkYXB0YXRpb25TZXROb2RlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgX19leHRlbmRzKEFkYXB0YXRpb25TZXROb2RlLCBfc3VwZXIpO1xuICBmdW5jdGlvbiBBZGFwdGF0aW9uU2V0Tm9kZSAobm9kZSwgeG1sKSB7XG4gICAgX3N1cGVyLmNhbGwodGhpcywgbm9kZSwgeG1sKTtcbiAgICB0aGlzLnJlcHJlc2VudGF0aW9uQ29sbCA9IFtdO1xuICAgIHRoaXMuY29udGVudFByb3RlY3Rpb25zID0gW107XG4gICAgdGhpcy5wYXJzZSgpO1xuICB9XG5cbiAgQWRhcHRhdGlvblNldE5vZGUucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlcCA9IHRoaXMuY3VycmVudE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1JlcHJlc2VudGF0aW9uJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlcE5vZGUgPSBuZXcgUmVwcmVzZW50YXRpb25Ob2RlXzEuUmVwcmVzZW50YXRpb25Ob2RlKHJlcFtpXSwgdGhpcy54bWwpO1xuICAgICAgdGhpcy5yZXByZXNlbnRhdGlvbkNvbGxbaV0gPSByZXBOb2RlO1xuICAgICAgaWYgKHRoaXMucmVwcmVzZW50YXRpb25Db2xsWzBdLmhhc01pbWVUeXBlKCkpIHtcbiAgICAgICAge1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlTGlzdFsnbWltZVR5cGUnXSA9IHRoaXMucmVwcmVzZW50YXRpb25Db2xsWzBdLmdldE1pbWVUeXBlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb250ZW50UHJvdGVjdGlvbnMgPSB0aGlzLmN1cnJlbnROb2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdDb250ZW50UHJvdGVjdGlvbicpO1xuXG4gICAgbGV0IEtJRDtcbiAgICAvLyBmaW5kIENFTkMgS0VZIElEIGlmIHRoZXJlIGlzIHNvbWVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRQcm90ZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGF0dHJzID0gY29udGVudFByb3RlY3Rpb25zW2ldLmF0dHJpYnV0ZXM7XG4gICAgICBsZXQgc2NoZW1lSWRVcmkgPSBhdHRycy5nZXROYW1lZEl0ZW0oXCJzY2hlbWVJZFVyaVwiKTtcbiAgICAgIGlmIChzY2hlbWVJZFVyaSAmJiBzY2hlbWVJZFVyaS52YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBNUEVHX0RBU0hfUFJPVEVDVElPTl9TQ0hFTUVfSURfVVJJKSB7XG4gICAgICAgIGlmIChhdHRycy5nZXROYW1lZEl0ZW0oXCJjZW5jOmRlZmF1bHRfS0lEXCIpKSB7XG4gICAgICAgICAgS0lEID0gYXR0cnMuZ2V0TmFtZWRJdGVtKFwiY2VuYzpkZWZhdWx0X0tJRFwiKS52YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudFByb3RlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBhdHRycyA9IGNvbnRlbnRQcm90ZWN0aW9uc1tpXS5hdHRyaWJ1dGVzO1xuICAgICAgaWYgKGF0dHJzLmdldE5hbWVkSXRlbShcInNjaGVtZUlkVXJpXCIpKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtZSA9IGF0dHJzLmdldE5hbWVkSXRlbShcInNjaGVtZUlkVXJpXCIpLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGNlbmMgPSBjb250ZW50UHJvdGVjdGlvbnNbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyhcIipcIiwgXCJwc3NoXCIpO1xuICAgICAgICBpZiAoY2VuYy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBjb250ZW50UHJvdGVjdGlvbiA9IHtcbiAgICAgICAgICAgIHNjaGVtZUlkVXJpOiBzY2hlbWUsXG4gICAgICAgICAgICBjZW5jUFNTSDogY2VuY1swXS5jaGlsZE5vZGVzWzBdLmRhdGFcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMuY29udGVudFByb3RlY3Rpb25zLnB1c2goY29udGVudFByb3RlY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKEtJRCAmJiBzY2hlbWUgPT09IFdJREVWSU5FX1NDSEVNRV9JRF9VUkkpIHtcbiAgICAgICAgICBjb25zdCBwc3NoV1YgPSBwc3NoLmNyZWF0ZVdpZGV2aW5lUHNzaEZyb21TdHJpbmcoS0lEKTtcbiAgICAgICAgICBjb25zdCBjb250ZW50UHJvdGVjdGlvbiA9IHtcbiAgICAgICAgICAgIHNjaGVtZUlkVXJpOiBzY2hlbWUsXG4gICAgICAgICAgICBjZW5jUFNTSDogcHNzaFdWXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLmNvbnRlbnRQcm90ZWN0aW9ucy5wdXNoKGNvbnRlbnRQcm90ZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBBZGFwdGF0aW9uU2V0Tm9kZS5wcm90b3R5cGUuZ2V0Q29udGVudFByb3RlY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRQcm90ZWN0aW9ucztcbiAgfTtcblxuICBBZGFwdGF0aW9uU2V0Tm9kZS5wcm90b3R5cGUuZ2V0V2lkZXZpbmVQcm90ZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRQcm90ZWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLnNjaGVtZUlkVXJpICYmIGl0ZW0uc2NoZW1lSWRVcmkudG9Mb3dlckNhc2UoKSA9PT0gV0lERVZJTkVfU0NIRU1FX0lEX1VSSTtcbiAgICB9KTtcbiAgfTtcblxuICBBZGFwdGF0aW9uU2V0Tm9kZS5wcm90b3R5cGUuaXNNaW1lVHlwZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVMaXN0WydtaW1lVHlwZSddLmluZGV4T2Yoc3RyKSAhPSAtMSA/IHRydWUgOiBmYWxzZTtcbiAgfTtcblxuICBBZGFwdGF0aW9uU2V0Tm9kZS5wcm90b3R5cGUuaXNDb250ZW50VHlwZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVMaXN0Wydjb250ZW50VHlwZSddICYmIHRoaXMuYXR0cmlidXRlTGlzdFsnY29udGVudFR5cGUnXS5pbmRleE9mKHN0cikgIT0gLTEgPyB0cnVlIDogZmFsc2U7XG4gIH07XG4gIHJldHVybiBBZGFwdGF0aW9uU2V0Tm9kZTtcbn0oTWFuaWZlc3ROb2RlXzEuTWFuaWZlc3ROb2RlKSk7XG5leHBvcnRzLkFkYXB0YXRpb25TZXROb2RlID0gQWRhcHRhdGlvblNldE5vZGU7XG4iXSwibmFtZXMiOlsicHNzaCIsInJlcXVpcmUiLCJNUEVHX0RBU0hfUFJPVEVDVElPTl9TQ0hFTUVfSURfVVJJIiwiV0lERVZJTkVfU0NIRU1FX0lEX1VSSSIsIl9fZXh0ZW5kcyIsImQiLCJiIiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIk1hbmlmZXN0Tm9kZV8xIiwiUmVwcmVzZW50YXRpb25Ob2RlXzEiLCJBZGFwdGF0aW9uU2V0Tm9kZSIsIl9zdXBlciIsIm5vZGUiLCJ4bWwiLCJjYWxsIiwicmVwcmVzZW50YXRpb25Db2xsIiwiY29udGVudFByb3RlY3Rpb25zIiwicGFyc2UiLCJyZXAiLCJjdXJyZW50Tm9kZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaSIsImxlbmd0aCIsInJlcE5vZGUiLCJSZXByZXNlbnRhdGlvbk5vZGUiLCJoYXNNaW1lVHlwZSIsImF0dHJpYnV0ZUxpc3QiLCJnZXRNaW1lVHlwZSIsIktJRCIsImF0dHJzIiwiYXR0cmlidXRlcyIsInNjaGVtZUlkVXJpIiwiZ2V0TmFtZWRJdGVtIiwidmFsdWUiLCJ0b0xvd2VyQ2FzZSIsInNjaGVtZSIsImNlbmMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZU5TIiwiY29udGVudFByb3RlY3Rpb24iLCJjZW5jUFNTSCIsImNoaWxkTm9kZXMiLCJkYXRhIiwicHVzaCIsInBzc2hXViIsImNyZWF0ZVdpZGV2aW5lUHNzaEZyb21TdHJpbmciLCJnZXRDb250ZW50UHJvdGVjdGlvbnMiLCJnZXRXaWRldmluZVByb3RlY3Rpb24iLCJmaWx0ZXIiLCJpdGVtIiwiaXNNaW1lVHlwZSIsInN0ciIsImluZGV4T2YiLCJpc0NvbnRlbnRUeXBlIiwiTWFuaWZlc3ROb2RlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4872\n")},7936:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nvar AllAdaptationSets = function () {\n  function AllAdaptationSets(vid, audio, text) {\n    this.videoAdaptation = vid;\n    if (audio) {\n      this.audioAdaptation = audio;\n    }\n    if (text) {\n      this.textAdaptation = text;\n    }\n  }\n  return AllAdaptationSets;\n}();\nexports.AllAdaptationSets = AllAdaptationSets;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkzNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxpQkFBaUIsR0FBSSxZQUFZO0VBQ3JDLFNBQVNBLGlCQUFpQixDQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFO0lBQzVDLElBQUksQ0FBQ0MsZUFBZSxHQUFHSCxHQUFHO0lBQzFCLElBQUlDLEtBQUssRUFBRTtNQUNULElBQUksQ0FBQ0csZUFBZSxHQUFHSCxLQUFLO0lBQzlCO0lBQ0EsSUFBSUMsSUFBSSxFQUFFO01BQ1IsSUFBSSxDQUFDRyxjQUFjLEdBQUdILElBQUk7SUFDNUI7RUFDRjtFQUVBLE9BQU9ILGlCQUFpQjtBQUMxQixDQUFDLEVBQUc7QUFDSk8seUJBQXlCLEdBQUdQLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL2FsbC1hZGFwdGF0aW9uLXNldHMuanM/NTdlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEFsbEFkYXB0YXRpb25TZXRzID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQWxsQWRhcHRhdGlvblNldHMgKHZpZCwgYXVkaW8sIHRleHQpIHtcbiAgICB0aGlzLnZpZGVvQWRhcHRhdGlvbiA9IHZpZDtcbiAgICBpZiAoYXVkaW8pIHtcbiAgICAgIHRoaXMuYXVkaW9BZGFwdGF0aW9uID0gYXVkaW87XG4gICAgfVxuICAgIGlmICh0ZXh0KSB7XG4gICAgICB0aGlzLnRleHRBZGFwdGF0aW9uID0gdGV4dDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gQWxsQWRhcHRhdGlvblNldHM7XG59KCkpO1xuZXhwb3J0cy5BbGxBZGFwdGF0aW9uU2V0cyA9IEFsbEFkYXB0YXRpb25TZXRzO1xuIl0sIm5hbWVzIjpbIkFsbEFkYXB0YXRpb25TZXRzIiwidmlkIiwiYXVkaW8iLCJ0ZXh0IiwidmlkZW9BZGFwdGF0aW9uIiwiYXVkaW9BZGFwdGF0aW9uIiwidGV4dEFkYXB0YXRpb24iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7936\n")},4723:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar AudioRepresentation = __webpack_require__(7258);\nvar VideoRepresentation = __webpack_require__(5533);\nvar TextRepresentation = __webpack_require__(6092);\nmodule.exports = function jsonRepresentation(representations) {\n  var reprObj = [];\n  for (var i = 0, j = representations.length; i < j; i++) {\n    var cols = representations[i].representationColl;\n    for (var k = 0, l = cols.length; k < l; k++) {\n      var attr = cols[k].attributeList;\n      var contentType = attr.contentType || attr.mimeType;\n      if (contentType.indexOf("video") >= 0) {\n        contentType = "video";\n      } else if (contentType.indexOf("audio") >= 0) {\n        contentType = "audio";\n      } else {\n        contentType = "text";\n      }\n      switch (contentType) {\n        case "audio":\n          reprObj.push(new AudioRepresentation(attr));\n          break;\n        case "video":\n          reprObj.push(new VideoRepresentation(attr));\n          break;\n        default:\n          reprObj.push(new TextRepresentation(attr));\n      }\n      reprObj[k].protections = representations[i].contentProtections.slice();\n    }\n  }\n  return reprObj;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcyMy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxtQkFBbUIsR0FBR0MsbUJBQU8sQ0FBQyxJQUE4QixDQUFDO0FBQ25FLElBQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLElBQThCLENBQUM7QUFDbkUsSUFBTUUsa0JBQWtCLEdBQUdGLG1CQUFPLENBQUMsSUFBNkIsQ0FBQztBQUVqRUcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0Msa0JBQWtCLENBQUVDLGVBQWUsRUFBRTtFQUM3RCxJQUFJQyxPQUFPLEdBQUcsRUFBRTtFQUNoQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR0gsZUFBZSxDQUFDSSxNQUFNLEVBQUVGLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtJQUN0RCxJQUFNRyxJQUFJLEdBQUdMLGVBQWUsQ0FBQ0UsQ0FBQyxDQUFDLENBQUNJLGtCQUFrQjtJQUNsRCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR0gsSUFBSSxDQUFDRCxNQUFNLEVBQUVHLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtNQUMzQyxJQUFNRSxJQUFJLEdBQUdKLElBQUksQ0FBQ0UsQ0FBQyxDQUFDLENBQUNHLGFBQWE7TUFDbEMsSUFBSUMsV0FBVyxHQUFHRixJQUFJLENBQUNFLFdBQVcsSUFBSUYsSUFBSSxDQUFDRyxRQUFRO01BQ25ELElBQUlELFdBQVcsQ0FBQ0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNyQ0YsV0FBVyxHQUFHLE9BQU87TUFDdkIsQ0FBQyxNQUFNLElBQUlBLFdBQVcsQ0FBQ0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1Q0YsV0FBVyxHQUFHLE9BQU87TUFDdkIsQ0FBQyxNQUFNO1FBQ0xBLFdBQVcsR0FBRyxNQUFNO01BQ3RCO01BQ0EsUUFBUUEsV0FBVztRQUNqQixLQUFLLE9BQU87VUFDVlYsT0FBTyxDQUFDYSxJQUFJLENBQUMsSUFBSXJCLG1CQUFtQixDQUFDZ0IsSUFBSSxDQUFDLENBQUM7VUFDM0M7UUFFRixLQUFLLE9BQU87VUFDVlIsT0FBTyxDQUFDYSxJQUFJLENBQUMsSUFBSW5CLG1CQUFtQixDQUFDYyxJQUFJLENBQUMsQ0FBQztVQUMzQztRQUVGO1VBQ0VSLE9BQU8sQ0FBQ2EsSUFBSSxDQUFDLElBQUlsQixrQkFBa0IsQ0FBQ2EsSUFBSSxDQUFDLENBQUM7TUFBQztNQUUvQ1IsT0FBTyxDQUFDTSxDQUFDLENBQUMsQ0FBQ1EsV0FBVyxHQUFHZixlQUFlLENBQUNFLENBQUMsQ0FBQyxDQUFDYyxrQkFBa0IsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3hFO0VBRUY7RUFDQSxPQUFPaEIsT0FBTztBQUNoQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvanNvbi1yZXByZXNlbnRhdGlvbi13aXRoLXByb3RlY3Rpb24uanM/NTE0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEF1ZGlvUmVwcmVzZW50YXRpb24gPSByZXF1aXJlKFwiLi4vanNvbi9hdWRpby1yZXByZXNlbnRhdGlvblwiKTtcbmNvbnN0IFZpZGVvUmVwcmVzZW50YXRpb24gPSByZXF1aXJlKFwiLi4vanNvbi92aWRlby1yZXByZXNlbnRhdGlvblwiKTtcbmNvbnN0IFRleHRSZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL3RleHQtcmVwcmVzZW50YXRpb25cIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ganNvblJlcHJlc2VudGF0aW9uIChyZXByZXNlbnRhdGlvbnMpIHtcbiAgbGV0IHJlcHJPYmogPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSByZXByZXNlbnRhdGlvbnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgY29uc3QgY29scyA9IHJlcHJlc2VudGF0aW9uc1tpXS5yZXByZXNlbnRhdGlvbkNvbGw7XG4gICAgZm9yIChsZXQgayA9IDAsIGwgPSBjb2xzLmxlbmd0aDsgayA8IGw7IGsrKykge1xuICAgICAgY29uc3QgYXR0ciA9IGNvbHNba10uYXR0cmlidXRlTGlzdDtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IGF0dHIuY29udGVudFR5cGUgfHwgYXR0ci5taW1lVHlwZTtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKFwidmlkZW9cIikgPj0gMCkge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwidmlkZW9cIjtcbiAgICAgIH0gZWxzZSBpZiAoY29udGVudFR5cGUuaW5kZXhPZihcImF1ZGlvXCIpID49IDApIHtcbiAgICAgICAgY29udGVudFR5cGUgPSBcImF1ZGlvXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwidGV4dFwiO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChjb250ZW50VHlwZSkge1xuICAgICAgICBjYXNlIFwiYXVkaW9cIjpcbiAgICAgICAgICByZXByT2JqLnB1c2gobmV3IEF1ZGlvUmVwcmVzZW50YXRpb24oYXR0cikpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgVmlkZW9SZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXByT2JqLnB1c2gobmV3IFRleHRSZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICB9XG4gICAgICByZXByT2JqW2tdLnByb3RlY3Rpb25zID0gcmVwcmVzZW50YXRpb25zW2ldLmNvbnRlbnRQcm90ZWN0aW9ucy5zbGljZSgpO1xuICAgIH1cblxuICB9XG4gIHJldHVybiByZXByT2JqO1xufTtcbiJdLCJuYW1lcyI6WyJBdWRpb1JlcHJlc2VudGF0aW9uIiwicmVxdWlyZSIsIlZpZGVvUmVwcmVzZW50YXRpb24iLCJUZXh0UmVwcmVzZW50YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwianNvblJlcHJlc2VudGF0aW9uIiwicmVwcmVzZW50YXRpb25zIiwicmVwck9iaiIsImkiLCJqIiwibGVuZ3RoIiwiY29scyIsInJlcHJlc2VudGF0aW9uQ29sbCIsImsiLCJsIiwiYXR0ciIsImF0dHJpYnV0ZUxpc3QiLCJjb250ZW50VHlwZSIsIm1pbWVUeXBlIiwiaW5kZXhPZiIsInB1c2giLCJwcm90ZWN0aW9ucyIsImNvbnRlbnRQcm90ZWN0aW9ucyIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4723\n')},1700:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar AudioRepresentation = __webpack_require__(7258);\nvar VideoRepresentation = __webpack_require__(5533);\nvar TextRepresentation = __webpack_require__(6092);\nmodule.exports = function jsonRepresentation(representations) {\n  var reprObj = [];\n  for (var i = 0, j = representations.length; i < j; i++) {\n    var cols = representations[i].representationColl;\n    for (var k = 0, l = cols.length; k < l; k++) {\n      var attr = cols[k].attributeList;\n      var contentType = attr.contentType || attr.mimeType;\n      if (contentType.indexOf("video") >= 0) {\n        contentType = "video";\n      } else if (contentType.indexOf("audio") >= 0) {\n        contentType = "audio";\n      } else {\n        contentType = "text";\n      }\n      switch (contentType) {\n        case "audio":\n          reprObj.push(new AudioRepresentation(attr));\n          break;\n        case "video":\n          reprObj.push(new VideoRepresentation(attr));\n          break;\n        default:\n          reprObj.push(new TextRepresentation(attr));\n      }\n    }\n  }\n  return reprObj;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwMC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxtQkFBbUIsR0FBR0MsbUJBQU8sQ0FBQyxJQUE4QixDQUFDO0FBQ25FLElBQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLElBQThCLENBQUM7QUFDbkUsSUFBTUUsa0JBQWtCLEdBQUdGLG1CQUFPLENBQUMsSUFBNkIsQ0FBQztBQUVqRUcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0Msa0JBQWtCLENBQUVDLGVBQWUsRUFBRTtFQUM3RCxJQUFJQyxPQUFPLEdBQUcsRUFBRTtFQUNoQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR0gsZUFBZSxDQUFDSSxNQUFNLEVBQUVGLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtJQUN0RCxJQUFNRyxJQUFJLEdBQUdMLGVBQWUsQ0FBQ0UsQ0FBQyxDQUFDLENBQUNJLGtCQUFrQjtJQUNsRCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR0gsSUFBSSxDQUFDRCxNQUFNLEVBQUVHLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtNQUMzQyxJQUFNRSxJQUFJLEdBQUdKLElBQUksQ0FBQ0UsQ0FBQyxDQUFDLENBQUNHLGFBQWE7TUFDbEMsSUFBSUMsV0FBVyxHQUFHRixJQUFJLENBQUNFLFdBQVcsSUFBSUYsSUFBSSxDQUFDRyxRQUFRO01BQ25ELElBQUlELFdBQVcsQ0FBQ0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNyQ0YsV0FBVyxHQUFHLE9BQU87TUFDdkIsQ0FBQyxNQUFNLElBQUlBLFdBQVcsQ0FBQ0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1Q0YsV0FBVyxHQUFHLE9BQU87TUFDdkIsQ0FBQyxNQUFNO1FBQ0xBLFdBQVcsR0FBRyxNQUFNO01BQ3RCO01BQ0EsUUFBUUEsV0FBVztRQUNqQixLQUFLLE9BQU87VUFDVlYsT0FBTyxDQUFDYSxJQUFJLENBQUMsSUFBSXJCLG1CQUFtQixDQUFDZ0IsSUFBSSxDQUFDLENBQUM7VUFDM0M7UUFFRixLQUFLLE9BQU87VUFDVlIsT0FBTyxDQUFDYSxJQUFJLENBQUMsSUFBSW5CLG1CQUFtQixDQUFDYyxJQUFJLENBQUMsQ0FBQztVQUMzQztRQUVGO1VBQ0VSLE9BQU8sQ0FBQ2EsSUFBSSxDQUFDLElBQUlsQixrQkFBa0IsQ0FBQ2EsSUFBSSxDQUFDLENBQUM7TUFBQztJQUVqRDtFQUNGO0VBQ0EsT0FBT1IsT0FBTztBQUNoQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvanNvbi1yZXByZXNlbnRhdGlvbi5qcz8xYzg4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgQXVkaW9SZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL2F1ZGlvLXJlcHJlc2VudGF0aW9uXCIpO1xuY29uc3QgVmlkZW9SZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL3ZpZGVvLXJlcHJlc2VudGF0aW9uXCIpO1xuY29uc3QgVGV4dFJlcHJlc2VudGF0aW9uID0gcmVxdWlyZShcIi4uL2pzb24vdGV4dC1yZXByZXNlbnRhdGlvblwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBqc29uUmVwcmVzZW50YXRpb24gKHJlcHJlc2VudGF0aW9ucykge1xuICBsZXQgcmVwck9iaiA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IHJlcHJlc2VudGF0aW9ucy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBjb25zdCBjb2xzID0gcmVwcmVzZW50YXRpb25zW2ldLnJlcHJlc2VudGF0aW9uQ29sbDtcbiAgICBmb3IgKGxldCBrID0gMCwgbCA9IGNvbHMubGVuZ3RoOyBrIDwgbDsgaysrKSB7XG4gICAgICBjb25zdCBhdHRyID0gY29sc1trXS5hdHRyaWJ1dGVMaXN0O1xuICAgICAgbGV0IGNvbnRlbnRUeXBlID0gYXR0ci5jb250ZW50VHlwZSB8fCBhdHRyLm1pbWVUeXBlO1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoXCJ2aWRlb1wiKSA+PSAwKSB7XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJ2aWRlb1wiO1xuICAgICAgfSBlbHNlIGlmIChjb250ZW50VHlwZS5pbmRleE9mKFwiYXVkaW9cIikgPj0gMCkge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwiYXVkaW9cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJ0ZXh0XCI7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGNvbnRlbnRUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgQXVkaW9SZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInZpZGVvXCI6XG4gICAgICAgICAgcmVwck9iai5wdXNoKG5ldyBWaWRlb1JlcHJlc2VudGF0aW9uKGF0dHIpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgVGV4dFJlcHJlc2VudGF0aW9uKGF0dHIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcHJPYmo7XG59O1xuIl0sIm5hbWVzIjpbIkF1ZGlvUmVwcmVzZW50YXRpb24iLCJyZXF1aXJlIiwiVmlkZW9SZXByZXNlbnRhdGlvbiIsIlRleHRSZXByZXNlbnRhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uUmVwcmVzZW50YXRpb24iLCJyZXByZXNlbnRhdGlvbnMiLCJyZXByT2JqIiwiaSIsImoiLCJsZW5ndGgiLCJjb2xzIiwicmVwcmVzZW50YXRpb25Db2xsIiwiayIsImwiLCJhdHRyIiwiYXR0cmlidXRlTGlzdCIsImNvbnRlbnRUeXBlIiwibWltZVR5cGUiLCJpbmRleE9mIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1700\n')},2167:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar SnowflakeId_1 = __webpack_require__(9499);\nvar ManifestNode = function () {\n  function ManifestNode(node, xml) {\n    this.childCollection = [];\n    this.attributeList = {};\n    this.setCurrentNode(node);\n    this.setChildCollection(node.childNodes);\n    this.buildAttributeList(node, this.attributeList);\n    this.setParentNode(node.parentNode);\n    this.xml = xml;\n    this.id = SnowflakeId_1.SnowflakeId.getUUID();\n  }\n  ManifestNode.prototype.setParentNode = function (node) {\n    this.parentNode = node;\n  };\n  ManifestNode.prototype.setChildCollection = function (coll) {\n    this.childCollection = coll;\n  };\n  ManifestNode.prototype.setCurrentNode = function (node) {\n    this.currentNode = node;\n  };\n  ManifestNode.prototype.buildAttributeList = function (node, list) {\n    this.writeAttributesToList(node, list);\n  };\n  ManifestNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    }\n  };\n  ManifestNode.prototype.getCurrentNode = function () {\n    return this.currentNode;\n  };\n  ManifestNode.prototype.markNodeForDownload = function (value) {\n    var newAtt = this.xml.createAttribute('markForDownload');\n    if (!value) {\n      this.currentNode.removeAttribute('markForDownload');\n    } else {\n      newAtt.value = value.toString();\n      this.currentNode.setAttributeNode(newAtt);\n    }\n  };\n  ManifestNode.prototype.getAttributeList = function () {\n    return this.attributeList;\n  };\n  return ManifestNode;\n}();\nexports.ManifestNode = ManifestNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFDM0M7RUFDRixDQUFDO0VBQ0QzQixZQUFZLENBQUNjLFNBQVMsQ0FBQ2tCLGdCQUFnQixHQUFHLFlBQVk7SUFDcEQsT0FBTyxJQUFJLENBQUM1QixhQUFhO0VBQzNCLENBQUM7RUFDRCxPQUFPSixZQUFZO0FBQ3JCLENBQUMsRUFBRztBQUNKaUMsb0JBQW9CLEdBQUdqQyxZQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvbWFuaWZlc3Qtbm9kZS5qcz8zMWI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgU25vd2ZsYWtlSWRfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL3Nub3dmbGFrZS1pZFwiKTtcbmNvbnN0IE1hbmlmZXN0Tm9kZSA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hbmlmZXN0Tm9kZSAobm9kZSwgeG1sKSB7XG4gICAgdGhpcy5jaGlsZENvbGxlY3Rpb24gPSBbXTtcbiAgICB0aGlzLmF0dHJpYnV0ZUxpc3QgPSB7fTtcbiAgICB0aGlzLnNldEN1cnJlbnROb2RlKG5vZGUpO1xuICAgIHRoaXMuc2V0Q2hpbGRDb2xsZWN0aW9uKG5vZGUuY2hpbGROb2Rlcyk7XG4gICAgdGhpcy5idWlsZEF0dHJpYnV0ZUxpc3Qobm9kZSwgdGhpcy5hdHRyaWJ1dGVMaXN0KTtcbiAgICB0aGlzLnNldFBhcmVudE5vZGUobm9kZS5wYXJlbnROb2RlKTtcbiAgICB0aGlzLnhtbCA9IHhtbDtcbiAgICB0aGlzLmlkID0gU25vd2ZsYWtlSWRfMS5Tbm93Zmxha2VJZC5nZXRVVUlEKCk7XG4gIH1cblxuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLnNldFBhcmVudE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIHRoaXMucGFyZW50Tm9kZSA9IG5vZGU7XG4gIH07XG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUuc2V0Q2hpbGRDb2xsZWN0aW9uID0gZnVuY3Rpb24gKGNvbGwpIHtcbiAgICB0aGlzLmNoaWxkQ29sbGVjdGlvbiA9IGNvbGw7XG4gIH07XG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUuc2V0Q3VycmVudE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIHRoaXMuY3VycmVudE5vZGUgPSBub2RlO1xuICB9O1xuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLmJ1aWxkQXR0cmlidXRlTGlzdCA9IGZ1bmN0aW9uIChub2RlLCBsaXN0KSB7XG4gICAgdGhpcy53cml0ZUF0dHJpYnV0ZXNUb0xpc3Qobm9kZSwgbGlzdCk7XG4gIH07XG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUud3JpdGVBdHRyaWJ1dGVzVG9MaXN0ID0gZnVuY3Rpb24gKG5vZGUsIGxpc3QpIHtcbiAgICBjb25zdCBhdHRyTGlzdCA9IG5vZGUuYXR0cmlidXRlcztcbiAgICBmb3IgKGxldCBhdHRyIGluIGF0dHJMaXN0KSB7XG4gICAgICBpZiAoIWxpc3RbYXR0ckxpc3RbYXR0cl0ubm9kZU5hbWVdKSB7XG4gICAgICAgIGxpc3RbYXR0ckxpc3RbYXR0cl0ubm9kZU5hbWVdID0gYXR0ckxpc3RbYXR0cl0ubm9kZVZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmJ1aWxkQXR0cmlidXRlTGlzdChub2RlLnBhcmVudE5vZGUsIGxpc3QpO1xuICAgIH1cbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5nZXRDdXJyZW50Tm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Tm9kZTtcbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5tYXJrTm9kZUZvckRvd25sb2FkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgY29uc3QgbmV3QXR0ID0gdGhpcy54bWwuY3JlYXRlQXR0cmlidXRlKCdtYXJrRm9yRG93bmxvYWQnKTtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICB0aGlzLmN1cnJlbnROb2RlLnJlbW92ZUF0dHJpYnV0ZSgnbWFya0ZvckRvd25sb2FkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0F0dC52YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLmN1cnJlbnROb2RlLnNldEF0dHJpYnV0ZU5vZGUobmV3QXR0KTtcbiAgICB9XG4gIH07XG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVMaXN0O1xuICB9O1xuICByZXR1cm4gTWFuaWZlc3ROb2RlO1xufSgpKTtcbmV4cG9ydHMuTWFuaWZlc3ROb2RlID0gTWFuaWZlc3ROb2RlO1xuIl0sIm5hbWVzIjpbIlNub3dmbGFrZUlkXzEiLCJyZXF1aXJlIiwiTWFuaWZlc3ROb2RlIiwibm9kZSIsInhtbCIsImNoaWxkQ29sbGVjdGlvbiIsImF0dHJpYnV0ZUxpc3QiLCJzZXRDdXJyZW50Tm9kZSIsInNldENoaWxkQ29sbGVjdGlvbiIsImNoaWxkTm9kZXMiLCJidWlsZEF0dHJpYnV0ZUxpc3QiLCJzZXRQYXJlbnROb2RlIiwicGFyZW50Tm9kZSIsImlkIiwiU25vd2ZsYWtlSWQiLCJnZXRVVUlEIiwicHJvdG90eXBlIiwiY29sbCIsImN1cnJlbnROb2RlIiwibGlzdCIsIndyaXRlQXR0cmlidXRlc1RvTGlzdCIsImF0dHJMaXN0IiwiYXR0cmlidXRlcyIsImF0dHIiLCJub2RlTmFtZSIsIm5vZGVWYWx1ZSIsImdldEN1cnJlbnROb2RlIiwibWFya05vZGVGb3JEb3dubG9hZCIsInZhbHVlIiwibmV3QXR0IiwiY3JlYXRlQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwidG9TdHJpbmciLCJzZXRBdHRyaWJ1dGVOb2RlIiwiZ2V0QXR0cmlidXRlTGlzdCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2167\n")},9559:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar AdaptationSetNode_1 = __webpack_require__(4872);\nvar DOMParser = (__webpack_require__(678).DOMParser);\nvar ManifestXML = function () {\n  function ManifestXML() {}\n  ManifestXML.prototype.parse = function (str, onSuccess, onError) {\n    var parser;\n    if (typeof onSuccess === \"function\" && typeof onError === \"function\") {\n      parser = new DOMParser({\n        errorHandler: {\n          warning: function warning() {},\n          error: onError,\n          fatalError: onError\n        }\n      });\n    } else {\n      parser = new DOMParser();\n    }\n    this.adaptationSetColl = [];\n    this.xml = parser.parseFromString(str, \"application/xml\");\n    this.parseAdaptations();\n    if (typeof onSuccess === \"function\") {\n      onSuccess();\n    }\n  };\n  ManifestXML.prototype.getAdaptationSetNodeName = function () {\n    return 'AdaptationSet';\n  };\n  ManifestXML.prototype.getRepresentationNodeName = function () {\n    return 'Representation';\n  };\n  ManifestXML.prototype.parseAdaptations = function () {\n    var adaptations = this.xml.getElementsByTagName('AdaptationSet');\n    for (var i = 0; i < adaptations.length; i++) {\n      var adaptNode = new AdaptationSetNode_1.AdaptationSetNode(adaptations[i], this.xml);\n      this.adaptationSetColl[i] = adaptNode;\n    }\n  };\n  ManifestXML.prototype.getVideoAdaptation = function () {\n    return this.getAdaptations('video');\n  };\n  ManifestXML.prototype.getAudioAdaptation = function () {\n    return this.getAdaptations('audio');\n  };\n  ManifestXML.prototype.getTextAdaptation = function () {\n    return this.getAdaptations('text');\n  };\n  ManifestXML.prototype.getManifestXML = function () {\n    return this.xml;\n  };\n  ManifestXML.prototype.getAdaptations = function (which) {\n    var adaptations = this.adaptationSetColl.map(function (item) {\n      return item;\n    }).filter(function (item) {\n      if (item.isMimeType(which) || item.isContentType(which)) {\n        return true;\n      }\n    });\n    return adaptations;\n  };\n  ManifestXML.cloneXML = function (xml) {\n    var newDocument = xml.implementation.createDocument(xml.namespaceURI, null, null);\n    var newNode = newDocument.importNode(xml.documentElement, true);\n    newDocument.appendChild(newNode);\n    return newDocument;\n  };\n  ManifestXML.prototype.removeNode = function () {\n    var self = this;\n    var representationCollection = this.xml.documentElement.getElementsByTagName(this.getRepresentationNodeName());\n    var adaptationCollection = this.xml.documentElement.getElementsByTagName(this.getAdaptationSetNodeName());\n    var repArray = [];\n    var adaptationArray = [];\n    for (var i = 0; i < representationCollection.length; i++) {\n      repArray[i] = representationCollection[i];\n    }\n    repArray.forEach(function (item) {\n      var markForDownload = item.attributes.getNamedItem(\"markForDownload\") && item.attributes.getNamedItem(\"markForDownload\").value == 'true' ? true : false;\n      if (!markForDownload) {\n        item.parentNode.removeChild(item);\n      }\n      item.removeAttribute('markForDownload');\n    }, this);\n    for (var _i = 0; _i < adaptationCollection.length; _i++) {\n      adaptationArray[_i] = adaptationCollection[_i];\n    }\n    adaptationArray.forEach(function (item) {\n      if (!item.getElementsByTagName(self.getRepresentationNodeName()).length) {\n        item.parentNode.removeChild(item);\n      }\n    });\n  };\n  return ManifestXML;\n}();\nexports.ManifestXML = ManifestXML;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9559\n")},9786:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nvar MediaUrl = function () {\n  function MediaUrl(baseURL, mediaFile, mimeType, url_domain) {\n    if (url_domain === void 0) {\n      url_domain = '';\n    }\n    this.baseURL = '';\n    if (baseURL.startsWith('http') === false) {\n      this.baseURL = baseURL;\n    }\n    this.mediaFile = mediaFile.indexOf('/') !== -1 ? this.truncateMediaFilePath(mediaFile) : mediaFile;\n    this.url_domain = url_domain;\n    this.mimeType = mimeType;\n  }\n  MediaUrl.prototype.truncateMediaFilePath = function (mediaFile) {\n    var startIndex = mediaFile.lastIndexOf('/');\n    var front = mediaFile.substring(0, startIndex);\n    var end = mediaFile.substring(startIndex + 1, mediaFile.length);\n    this.baseURL += front;\n    return end;\n  };\n  MediaUrl.prototype.getFileAddress = function () {\n    return this.baseURL + this.mediaFile;\n  };\n  return MediaUrl;\n}();\nexports.MediaUrl = MediaUrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc4Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUksWUFBWTtFQUM1QixTQUFTQSxRQUFRLENBQUVDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsRUFBRTtJQUMzRCxJQUFJQSxVQUFVLEtBQUssS0FBSyxDQUFDLEVBQUU7TUFDekJBLFVBQVUsR0FBRyxFQUFFO0lBQ2pCO0lBQ0EsSUFBSSxDQUFDSCxPQUFPLEdBQUcsRUFBRTtJQUNqQixJQUFJQSxPQUFPLENBQUNJLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLEVBQUU7TUFDeEMsSUFBSSxDQUFDSixPQUFPLEdBQUdBLE9BQU87SUFDeEI7SUFDQSxJQUFJLENBQUNDLFNBQVMsR0FBSUEsU0FBUyxDQUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUksSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQ0wsU0FBUyxDQUFDLEdBQUdBLFNBQVM7SUFDcEcsSUFBSSxDQUFDRSxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDRCxRQUFRLEdBQUdBLFFBQVE7RUFDMUI7RUFFQUgsUUFBUSxDQUFDUSxTQUFTLENBQUNELHFCQUFxQixHQUFHLFVBQVVMLFNBQVMsRUFBRTtJQUM5RCxJQUFNTyxVQUFVLEdBQUdQLFNBQVMsQ0FBQ1EsV0FBVyxDQUFDLEdBQUcsQ0FBQztJQUM3QyxJQUFNQyxLQUFLLEdBQUdULFNBQVMsQ0FBQ1UsU0FBUyxDQUFDLENBQUMsRUFBRUgsVUFBVSxDQUFDO0lBQ2hELElBQU1JLEdBQUcsR0FBR1gsU0FBUyxDQUFDVSxTQUFTLENBQUNILFVBQVUsR0FBRyxDQUFDLEVBQUVQLFNBQVMsQ0FBQ1ksTUFBTSxDQUFDO0lBQ2pFLElBQUksQ0FBQ2IsT0FBTyxJQUFJVSxLQUFLO0lBQ3JCLE9BQU9FLEdBQUc7RUFDWixDQUFDO0VBQ0RiLFFBQVEsQ0FBQ1EsU0FBUyxDQUFDTyxjQUFjLEdBQUcsWUFBWTtJQUM5QyxPQUFPLElBQUksQ0FBQ2QsT0FBTyxHQUFHLElBQUksQ0FBQ0MsU0FBUztFQUN0QyxDQUFDO0VBQ0QsT0FBT0YsUUFBUTtBQUNqQixDQUFDLEVBQUc7QUFDSmdCLGdCQUFnQixHQUFHaEIsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL21lZGlhLXVybC5qcz8xMTdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgTWVkaWFVcmwgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNZWRpYVVybCAoYmFzZVVSTCwgbWVkaWFGaWxlLCBtaW1lVHlwZSwgdXJsX2RvbWFpbikge1xuICAgIGlmICh1cmxfZG9tYWluID09PSB2b2lkIDApIHtcbiAgICAgIHVybF9kb21haW4gPSAnJztcbiAgICB9XG4gICAgdGhpcy5iYXNlVVJMID0gJyc7XG4gICAgaWYgKGJhc2VVUkwuc3RhcnRzV2l0aCgnaHR0cCcpID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5iYXNlVVJMID0gYmFzZVVSTDtcbiAgICB9XG4gICAgdGhpcy5tZWRpYUZpbGUgPSAobWVkaWFGaWxlLmluZGV4T2YoJy8nKSAhPT0gLTEpID8gdGhpcy50cnVuY2F0ZU1lZGlhRmlsZVBhdGgobWVkaWFGaWxlKSA6IG1lZGlhRmlsZTtcbiAgICB0aGlzLnVybF9kb21haW4gPSB1cmxfZG9tYWluO1xuICAgIHRoaXMubWltZVR5cGUgPSBtaW1lVHlwZTtcbiAgfVxuXG4gIE1lZGlhVXJsLnByb3RvdHlwZS50cnVuY2F0ZU1lZGlhRmlsZVBhdGggPSBmdW5jdGlvbiAobWVkaWFGaWxlKSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IG1lZGlhRmlsZS5sYXN0SW5kZXhPZignLycpO1xuICAgIGNvbnN0IGZyb250ID0gbWVkaWFGaWxlLnN1YnN0cmluZygwLCBzdGFydEluZGV4KTtcbiAgICBjb25zdCBlbmQgPSBtZWRpYUZpbGUuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBtZWRpYUZpbGUubGVuZ3RoKTtcbiAgICB0aGlzLmJhc2VVUkwgKz0gZnJvbnQ7XG4gICAgcmV0dXJuIGVuZDtcbiAgfTtcbiAgTWVkaWFVcmwucHJvdG90eXBlLmdldEZpbGVBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmJhc2VVUkwgKyB0aGlzLm1lZGlhRmlsZTtcbiAgfTtcbiAgcmV0dXJuIE1lZGlhVXJsO1xufSgpKTtcbmV4cG9ydHMuTWVkaWFVcmwgPSBNZWRpYVVybDtcbiJdLCJuYW1lcyI6WyJNZWRpYVVybCIsImJhc2VVUkwiLCJtZWRpYUZpbGUiLCJtaW1lVHlwZSIsInVybF9kb21haW4iLCJzdGFydHNXaXRoIiwiaW5kZXhPZiIsInRydW5jYXRlTWVkaWFGaWxlUGF0aCIsInByb3RvdHlwZSIsInN0YXJ0SW5kZXgiLCJsYXN0SW5kZXhPZiIsImZyb250Iiwic3Vic3RyaW5nIiwiZW5kIiwibGVuZ3RoIiwiZ2V0RmlsZUFkZHJlc3MiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9786\n")},3515:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar MediaUrl_1 = __webpack_require__(9786);\nvar SegmentInformation_1 = __webpack_require__(4749);\nvar FragmentInformation = function (_super) {\n  __extends(FragmentInformation, _super);\n  function FragmentInformation(presentationDuration, bandwidth, baseUrl, representationID, mimeType, segmentTemplate) {\n    _super.call(this, presentationDuration, bandwidth, baseUrl, representationID, mimeType);\n    if (segmentTemplate) {\n      this.segmentTemplate = segmentTemplate;\n      this.mediaTemplate = this.segmentTemplate.media;\n      this.mediaTemplate = this.replace$Bandwidth$(this.mediaTemplate, this.bandwidth);\n    }\n    if (this.segmentTemplate.media) {\n      this.timelineItemList = this.segmentTemplate.SegmentTimeline;\n    }\n    this.createFragmentUrlsFromTimeline(this.timelineItemList);\n  }\n  FragmentInformation.prototype.createFragmentUrlsFromTimeline = function (segmentNodes) {\n    for (var i = 0; i < segmentNodes.S.length; i++) {\n      var fragment = this.mediaTemplate;\n      fragment = this.replace$Time$(fragment, segmentNodes.S[i].t);\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n  return FragmentInformation;\n}(SegmentInformation_1.SegmentInformation);\nexports.FragmentInformation = FragmentInformation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L21hbmlmZXN0L3BhcnNlci9tc3MvZnJhZ21lbnQtaW5mb3JtYXRpb24uanM/YjgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgZm9yIChsZXQgcCBpbiBiKSB7XG4gICAgICAgIGlmIChiLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgICAgZFtwXSA9IGJbcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIF9fICgpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7XG4gICAgICB9XG5cbiAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xuY29uc3QgTWVkaWFVcmxfMSA9IHJlcXVpcmUoXCIuLi9tZWRpYS11cmxcIik7XG5jb25zdCBTZWdtZW50SW5mb3JtYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9zZWdtZW50LWluZm9ybWF0aW9uXCIpO1xuY29uc3QgRnJhZ21lbnRJbmZvcm1hdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gIF9fZXh0ZW5kcyhGcmFnbWVudEluZm9ybWF0aW9uLCBfc3VwZXIpO1xuICBmdW5jdGlvbiBGcmFnbWVudEluZm9ybWF0aW9uIChwcmVzZW50YXRpb25EdXJhdGlvbiwgYmFuZHdpZHRoLCBiYXNlVXJsLCByZXByZXNlbnRhdGlvbklELCBtaW1lVHlwZSwgc2VnbWVudFRlbXBsYXRlKSB7XG4gICAgX3N1cGVyLmNhbGwodGhpcywgcHJlc2VudGF0aW9uRHVyYXRpb24sIGJhbmR3aWR0aCwgYmFzZVVybCwgcmVwcmVzZW50YXRpb25JRCwgbWltZVR5cGUpO1xuICAgIGlmIChzZWdtZW50VGVtcGxhdGUpIHtcbiAgICAgIHRoaXMuc2VnbWVudFRlbXBsYXRlID0gc2VnbWVudFRlbXBsYXRlO1xuICAgICAgdGhpcy5tZWRpYVRlbXBsYXRlID0gdGhpcy5zZWdtZW50VGVtcGxhdGUubWVkaWE7XG4gICAgICB0aGlzLm1lZGlhVGVtcGxhdGUgPSB0aGlzLnJlcGxhY2UkQmFuZHdpZHRoJCh0aGlzLm1lZGlhVGVtcGxhdGUsIHRoaXMuYmFuZHdpZHRoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2VnbWVudFRlbXBsYXRlLm1lZGlhKSB7XG4gICAgICB0aGlzLnRpbWVsaW5lSXRlbUxpc3QgPSB0aGlzLnNlZ21lbnRUZW1wbGF0ZS5TZWdtZW50VGltZWxpbmU7XG4gICAgfVxuICAgIHRoaXMuY3JlYXRlRnJhZ21lbnRVcmxzRnJvbVRpbWVsaW5lKHRoaXMudGltZWxpbmVJdGVtTGlzdCk7XG4gIH1cblxuICBGcmFnbWVudEluZm9ybWF0aW9uLnByb3RvdHlwZS5jcmVhdGVGcmFnbWVudFVybHNGcm9tVGltZWxpbmUgPSBmdW5jdGlvbiAoc2VnbWVudE5vZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50Tm9kZXMuUy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGZyYWdtZW50ID0gdGhpcy5tZWRpYVRlbXBsYXRlO1xuICAgICAgZnJhZ21lbnQgPSB0aGlzLnJlcGxhY2UkVGltZSQoZnJhZ21lbnQsIHNlZ21lbnROb2Rlcy5TW2ldLnQpO1xuXG4gICAgICB0aGlzLm1lZGlhVXJscy5wdXNoKG5ldyBNZWRpYVVybF8xLk1lZGlhVXJsKHRoaXMuYmFzZVVybCwgZnJhZ21lbnQsIHRoaXMubWltZVR5cGUpKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBGcmFnbWVudEluZm9ybWF0aW9uO1xufShTZWdtZW50SW5mb3JtYXRpb25fMS5TZWdtZW50SW5mb3JtYXRpb24pKTtcbmV4cG9ydHMuRnJhZ21lbnRJbmZvcm1hdGlvbiA9IEZyYWdtZW50SW5mb3JtYXRpb247Il0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImQiLCJiIiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIk1lZGlhVXJsXzEiLCJyZXF1aXJlIiwiU2VnbWVudEluZm9ybWF0aW9uXzEiLCJGcmFnbWVudEluZm9ybWF0aW9uIiwiX3N1cGVyIiwicHJlc2VudGF0aW9uRHVyYXRpb24iLCJiYW5kd2lkdGgiLCJiYXNlVXJsIiwicmVwcmVzZW50YXRpb25JRCIsIm1pbWVUeXBlIiwic2VnbWVudFRlbXBsYXRlIiwiY2FsbCIsIm1lZGlhVGVtcGxhdGUiLCJtZWRpYSIsInJlcGxhY2UkQmFuZHdpZHRoJCIsInRpbWVsaW5lSXRlbUxpc3QiLCJTZWdtZW50VGltZWxpbmUiLCJjcmVhdGVGcmFnbWVudFVybHNGcm9tVGltZWxpbmUiLCJzZWdtZW50Tm9kZXMiLCJpIiwiUyIsImxlbmd0aCIsImZyYWdtZW50IiwicmVwbGFjZSRUaW1lJCIsInQiLCJtZWRpYVVybHMiLCJwdXNoIiwiTWVkaWFVcmwiLCJTZWdtZW50SW5mb3JtYXRpb24iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3515\n")},4624:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar ManifestXML_1 = __webpack_require__(9559);\nvar StreamIndexNode_1 = __webpack_require__(3605);\nManifestXML_1.ManifestXML.prototype.getManifestType = function (xml) {\n  return xml.getElementsByTagName('SmoothStreamingMedia').length !== 0 ? 'MSS' : 'DASH';\n};\nManifestXML_1.ManifestXML.prototype.getAdaptationSetNodeName = function () {\n  return this.manifestType === 'MSS' ? 'StreamIndex' : 'AdaptationSet';\n};\nManifestXML_1.ManifestXML.prototype.getRepresentationNodeName = function () {\n  return this.manifestType === 'MSS' ? 'QualityLevel' : 'Representation';\n};\nManifestXML_1.ManifestXML.prototype.parseStreams = function () {\n  var streams = this.xml.getElementsByTagName('StreamIndex');\n  for (var i = 0; i < streams.length; i++) {\n    var streamNode = new StreamIndexNode_1.StreamIndexNode(streams[i], this.xml);\n    this.adaptationSetColl[i] = streamNode;\n  }\n};\nManifestXML_1.ManifestXML.prototype._parseAdaptations = ManifestXML_1.ManifestXML.prototype.parseAdaptations;\nManifestXML_1.ManifestXML.prototype.parseAdaptations = function () {\n  // Manifest type detection\n  this.manifestType = this.getManifestType(this.xml);\n  if (this.manifestType === 'MSS') {\n    return this.parseStreams();\n  } else {\n    return this._parseAdaptations();\n  }\n};\nexports.ManifestXML = ManifestXML_1.ManifestXML;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYyNC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsSUFBaUIsQ0FBQztBQUNoRCxJQUFNQyxpQkFBaUIsR0FBR0QsbUJBQU8sQ0FBQyxJQUFvQixDQUFDO0FBR3ZERCxhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDQyxlQUFlLEdBQUcsVUFBVUMsR0FBRyxFQUFFO0VBQ25FLE9BQU9BLEdBQUcsQ0FBQ0Msb0JBQW9CLENBQUMsc0JBQXNCLENBQUMsQ0FBQ0MsTUFBTSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsTUFBTTtBQUN2RixDQUFDO0FBRURSLGFBQWEsQ0FBQ0csV0FBVyxDQUFDQyxTQUFTLENBQUNLLHdCQUF3QixHQUFHLFlBQVk7RUFDekUsT0FBUSxJQUFJLENBQUNDLFlBQVksS0FBSyxLQUFLLEdBQUksYUFBYSxHQUFHLGVBQWU7QUFDeEUsQ0FBQztBQUNEVixhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDTyx5QkFBeUIsR0FBRyxZQUFZO0VBQzFFLE9BQVEsSUFBSSxDQUFDRCxZQUFZLEtBQUssS0FBSyxHQUFJLGNBQWMsR0FBRyxnQkFBZ0I7QUFDMUUsQ0FBQztBQUNEVixhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDUSxZQUFZLEdBQUcsWUFBWTtFQUM3RCxJQUFNQyxPQUFPLEdBQUcsSUFBSSxDQUFDUCxHQUFHLENBQUNDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQztFQUM1RCxLQUFLLElBQUlPLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsT0FBTyxDQUFDTCxNQUFNLEVBQUVNLENBQUMsRUFBRSxFQUFFO0lBQ3ZDLElBQU1DLFVBQVUsR0FBRyxJQUFJYixpQkFBaUIsQ0FBQ2MsZUFBZSxDQUFDSCxPQUFPLENBQUNDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ1IsR0FBRyxDQUFDO0lBQzlFLElBQUksQ0FBQ1csaUJBQWlCLENBQUNILENBQUMsQ0FBQyxHQUFHQyxVQUFVO0VBQ3hDO0FBQ0YsQ0FBQztBQUNEZixhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDYyxpQkFBaUIsR0FBR2xCLGFBQWEsQ0FBQ0csV0FBVyxDQUFDQyxTQUFTLENBQUNlLGdCQUFnQjtBQUM1R25CLGFBQWEsQ0FBQ0csV0FBVyxDQUFDQyxTQUFTLENBQUNlLGdCQUFnQixHQUFHLFlBQVk7RUFDakU7RUFDQSxJQUFJLENBQUNULFlBQVksR0FBRyxJQUFJLENBQUNMLGVBQWUsQ0FBQyxJQUFJLENBQUNDLEdBQUcsQ0FBQztFQUVsRCxJQUFJLElBQUksQ0FBQ0ksWUFBWSxLQUFLLEtBQUssRUFBRTtJQUMvQixPQUFPLElBQUksQ0FBQ0UsWUFBWSxFQUFFO0VBQzVCLENBQUMsTUFBTTtJQUNMLE9BQU8sSUFBSSxDQUFDTSxpQkFBaUIsRUFBRTtFQUNqQztBQUNGLENBQUM7QUFFREUsbUJBQW1CLEdBQUdwQixhQUFhLENBQUNHLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L3BhcnNlci9tc3MvbWFuaWZlc3QteG1sLmpzPzY1ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBNYW5pZmVzdFhNTF8xID0gcmVxdWlyZSgnLi4vbWFuaWZlc3QteG1sJyk7XG5jb25zdCBTdHJlYW1JbmRleE5vZGVfMSA9IHJlcXVpcmUoJy4vc3RyZWFtSW5kZXgtbm9kZScpO1xuXG5cbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLmdldE1hbmlmZXN0VHlwZSA9IGZ1bmN0aW9uICh4bWwpIHtcbiAgcmV0dXJuIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnU21vb3RoU3RyZWFtaW5nTWVkaWEnKS5sZW5ndGggIT09IDAgPyAnTVNTJyA6ICdEQVNIJztcbn07XG5cbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLmdldEFkYXB0YXRpb25TZXROb2RlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICh0aGlzLm1hbmlmZXN0VHlwZSA9PT0gJ01TUycpID8gJ1N0cmVhbUluZGV4JyA6ICdBZGFwdGF0aW9uU2V0Jztcbn07XG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5nZXRSZXByZXNlbnRhdGlvbk5vZGVOYW1lID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKHRoaXMubWFuaWZlc3RUeXBlID09PSAnTVNTJykgPyAnUXVhbGl0eUxldmVsJyA6ICdSZXByZXNlbnRhdGlvbic7XG59O1xuTWFuaWZlc3RYTUxfMS5NYW5pZmVzdFhNTC5wcm90b3R5cGUucGFyc2VTdHJlYW1zID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzdHJlYW1zID0gdGhpcy54bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1N0cmVhbUluZGV4Jyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyZWFtcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHN0cmVhbU5vZGUgPSBuZXcgU3RyZWFtSW5kZXhOb2RlXzEuU3RyZWFtSW5kZXhOb2RlKHN0cmVhbXNbaV0sIHRoaXMueG1sKTtcbiAgICB0aGlzLmFkYXB0YXRpb25TZXRDb2xsW2ldID0gc3RyZWFtTm9kZTtcbiAgfVxufTtcbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLl9wYXJzZUFkYXB0YXRpb25zID0gTWFuaWZlc3RYTUxfMS5NYW5pZmVzdFhNTC5wcm90b3R5cGUucGFyc2VBZGFwdGF0aW9ucztcbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLnBhcnNlQWRhcHRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE1hbmlmZXN0IHR5cGUgZGV0ZWN0aW9uXG4gIHRoaXMubWFuaWZlc3RUeXBlID0gdGhpcy5nZXRNYW5pZmVzdFR5cGUodGhpcy54bWwpO1xuXG4gIGlmICh0aGlzLm1hbmlmZXN0VHlwZSA9PT0gJ01TUycpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZVN0cmVhbXMoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyc2VBZGFwdGF0aW9ucygpO1xuICB9XG59O1xuXG5leHBvcnRzLk1hbmlmZXN0WE1MID0gTWFuaWZlc3RYTUxfMS5NYW5pZmVzdFhNTDtcbiJdLCJuYW1lcyI6WyJNYW5pZmVzdFhNTF8xIiwicmVxdWlyZSIsIlN0cmVhbUluZGV4Tm9kZV8xIiwiTWFuaWZlc3RYTUwiLCJwcm90b3R5cGUiLCJnZXRNYW5pZmVzdFR5cGUiLCJ4bWwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlbmd0aCIsImdldEFkYXB0YXRpb25TZXROb2RlTmFtZSIsIm1hbmlmZXN0VHlwZSIsImdldFJlcHJlc2VudGF0aW9uTm9kZU5hbWUiLCJwYXJzZVN0cmVhbXMiLCJzdHJlYW1zIiwiaSIsInN0cmVhbU5vZGUiLCJTdHJlYW1JbmRleE5vZGUiLCJhZGFwdGF0aW9uU2V0Q29sbCIsIl9wYXJzZUFkYXB0YXRpb25zIiwicGFyc2VBZGFwdGF0aW9ucyIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4624\n")},5968:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ManifestNode_1 = __webpack_require__(2167);\nvar IsoDurationParser_1 = __webpack_require__(6052);\nvar FragmentInformation_1 = __webpack_require__(3515);\nvar TIME_SCALE_100_NANOSECOND_UNIT = 10000000.0;\nvar QualityLevelNode = function (_super) {\n  __extends(QualityLevelNode, _super);\n  function QualityLevelNode(node, xml) {\n    _super.call(this, node, xml);\n  }\n  QualityLevelNode.prototype.createSegmentInformation = function () {\n    var presentationDuration = IsoDurationParser_1.IsoDurationParser.getDuration(parseFloat(this.attributeList['Duration'] / TIME_SCALE_100_NANOSECOND_UNIT));\n    var representationID = this.attributeList['id'];\n    this.bandwidth = this.attributeList['bandwidth'] ? parseInt(this.attributeList['bandwidth']) : -1;\n    this.segmentTemplate = this.mapMssSegmentTemplate();\n    this.segmentInformation = new FragmentInformation_1.FragmentInformation(presentationDuration, this.bandwidth, this.baseURL, representationID, this.attributeList['mimeType'], this.segmentTemplate);\n  };\n  QualityLevelNode.prototype.mapMssSegmentTemplate = function () {\n    var segmentTemplate = {};\n    var mediaUrl;\n    mediaUrl = this.attributeList['Url'].replace('{bitrate}', '$Bandwidth$');\n    mediaUrl = mediaUrl.replace('{start time}', '$Time$');\n    segmentTemplate.media = mediaUrl;\n    segmentTemplate.timescale = TIME_SCALE_100_NANOSECOND_UNIT;\n    segmentTemplate.SegmentTimeline = this.mapMssSegmentTimeline();\n    return segmentTemplate;\n  };\n  QualityLevelNode.prototype.mapMssSegmentTimeline = function () {\n    var segmentTimeline = {};\n    var chunks = this.currentNode.parentNode.getElementsByTagName('c');\n    var segments = [];\n    var segment;\n    var prevSegment;\n    var tManifest;\n    var i;\n    var duration = 0;\n    for (i = 0; i < chunks.length; i++) {\n      segment = {};\n\n      // Get time 't' attribute value\n      tManifest = chunks[i].getAttribute('t');\n\n      // => segment.tManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)\n      // => segment.t = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)\n      segment.tManifest = parseFloat(tManifest);\n      segment.t = parseFloat(tManifest);\n\n      // Get duration 'd' attribute value\n      segment.d = parseFloat(chunks[i].getAttribute('d'));\n\n      // If 't' not defined for first segment then t=0\n      if (i === 0 && !segment.t) {\n        segment.t = 0;\n      }\n      if (i > 0) {\n        prevSegment = segments[segments.length - 1];\n        // Update previous segment duration if not defined\n        if (!prevSegment.d) {\n          if (prevSegment.tManifest) {\n            prevSegment.d = parseFloat(tManifest) - parseFloat(prevSegment.tManifest);\n          } else {\n            prevSegment.d = segment.t - prevSegment.t;\n          }\n        }\n        // Set segment absolute timestamp if not set in manifest\n        if (!segment.t) {\n          if (prevSegment.tManifest) {\n            segment.tManifest = parseFloat(prevSegment.tManifest) + prevSegment.d;\n            segment.t = parseFloat(segment.tManifest);\n          } else {\n            segment.t = prevSegment.t + prevSegment.d;\n          }\n        }\n      }\n      duration += segment.d;\n\n      // Create new segment\n      segments.push(segment);\n    }\n    segmentTimeline.S = segments;\n    segmentTimeline.S_asArray = segments;\n    segmentTimeline.duration = duration / TIME_SCALE_100_NANOSECOND_UNIT;\n    return segmentTimeline;\n  };\n  QualityLevelNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n    var mimeTypeMap = {\n      'video': 'video/mp4',\n      'audio': 'audio/mp4',\n      'text': 'application/mp4'\n    };\n    for (var i = 0; i < node.childNodes.length; i++) {\n      if (!this.baseURL && node.childNodes[i].nodeName == 'BaseURL') {\n        this.baseURL = node.childNodes[i].firstChild.nodeValue;\n      }\n      if (!this.segmentBase && node.childNodes[i].nodeName == 'SegmentBase') {\n        this.segmentBase = node.childNodes[i];\n      }\n      if (!this.segmentTemplate && node.childNodes[i].nodeName == 'SegmentTemplate') {\n        this.segmentTemplate = node.childNodes[i];\n      }\n      if (!this.segmentList && node.childNodes[i].nodeName == 'SegmentList') {\n        this.segmentList = node.childNodes[i];\n      }\n    }\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n    if (list['Type'] !== undefined) {\n      list['contentType'] = list['Type'];\n      list['mimeType'] = mimeTypeMap[list['contentType']];\n      list['bandwidth'] = list['Bitrate'];\n      list['width'] = list['MaxWidth'];\n      list['height'] = list['MaxHeight'];\n      list.lang = list['Language'] || 'und';\n      var indexId = list['Name'] ? list['Name'] : list['Type'];\n      // build id\n      list['id'] = indexId + '_' + list['Index'];\n      if (list['Type'] === 'audio') {\n        list.audioSamplingRate = list['SamplingRate'];\n      }\n    }\n    if (list['Duration'] !== undefined) {\n      list['durationInS'] = this.attributeList['Duration'] / TIME_SCALE_100_NANOSECOND_UNIT;\n    }\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    } else {\n      if (!this.segmentInformation) {\n        this.createSegmentInformation();\n      }\n    }\n    _super.prototype.writeAttributesToList.call(this, node, list);\n  };\n  QualityLevelNode.prototype.getMimeType = function () {\n    return this.attributeList['mimeType'];\n  };\n  QualityLevelNode.prototype.hasMimeType = function () {\n    return this.attributeList['mimeType'] ? true : false;\n  };\n  QualityLevelNode.prototype.getContentType = function () {\n    return this.attributeList['contentType'];\n  };\n  QualityLevelNode.prototype.hasContentType = function () {\n    return this.attributeList['contentType'] ? true : false;\n  };\n  return QualityLevelNode;\n}(ManifestNode_1.ManifestNode);\nexports.QualityLevelNode = QualityLevelNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5968\n")},3605:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar BASE64 = __webpack_require__(7769);\nvar pssh = __webpack_require__(2310);\nvar DOMParser = (__webpack_require__(678).DOMParser);\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nvar PLAYREADY_SCHEME_ID_URI = 'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95';\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AdaptationSetNode_1 = __webpack_require__(4872);\nvar QualityLevelNode_1 = __webpack_require__(5968);\nvar StreamIndexNode = function (_super) {\n  __extends(StreamIndexNode, _super);\n  function StreamIndexNode(node, xml) {\n    _super.call(this, node, xml);\n  }\n  StreamIndexNode.prototype.parse = function () {\n    var qualityLevels = this.currentNode.getElementsByTagName('QualityLevel');\n    for (var i = 0; i < qualityLevels.length; i++) {\n      var qualityLevelNode = new QualityLevelNode_1.QualityLevelNode(qualityLevels[i], this.xml);\n      this.representationColl[i] = qualityLevelNode;\n      if (this.representationColl[0].hasMimeType()) {\n        this.attributeList['mimeType'] = this.representationColl[0].getMimeType();\n      }\n      if (this.representationColl[0].hasContentType()) {\n        this.attributeList['mimeType'] = this.representationColl[0].getContentType();\n      }\n    }\n    var protection = this.xml.getElementsByTagName('Protection')[0];\n    if (protection !== undefined) {\n      var protectionHeader = protection.getElementsByTagName('ProtectionHeader')[0];\n      // Some packagers put newlines into the ProtectionHeader base64 string, which is not good\n      // because this cannot be correctly parsed. Let's just filter out any newlines found in there.\n      var psshPR = protectionHeader.firstChild.data.replace(/\\n|\\r/g, '');\n\n      // Get KID (in CENC format) from protection header\n      var KID = this.getKIDFromProtectionHeader(protectionHeader);\n\n      // Create ContentProtection for PlayReady\n      var cpPR = {\n        schemeIdUri: PLAYREADY_SCHEME_ID_URI,\n        cencPSSH: psshPR\n      };\n      this.contentProtections.push(cpPR);\n\n      // Create ContentProtection for Widevine (as a CENC protection)\n      var psshWV = pssh.createWidevinePssh(KID);\n      var cpWV = {\n        schemeIdUri: WIDEVINE_SCHEME_ID_URI,\n        cencPSSH: psshWV\n      };\n      this.contentProtections.push(cpWV);\n    }\n  };\n  StreamIndexNode.prototype.getKIDFromProtectionHeader = function (protectionHeader) {\n    var prHeader, wrmHeader, xmlReader, KID;\n\n    // Get PlayReady header as byte array (base64 decoded)\n    prHeader = BASE64.toByteArray(protectionHeader.firstChild.data);\n\n    // Get Right Management header (WRMHEADER) from PlayReady header\n    wrmHeader = this.getWRMHeaderFromPRHeader(prHeader);\n\n    // Convert from multi-byte to unicode\n    wrmHeader = new Uint16Array(wrmHeader.buffer);\n\n    // Convert to string\n    wrmHeader = String.fromCharCode.apply(null, wrmHeader);\n\n    // Parse <WRMHeader> to get KID field value\n    xmlReader = new DOMParser().parseFromString(wrmHeader, 'application/xml');\n    KID = xmlReader.getElementsByTagName('KID')[0].textContent;\n\n    // Get KID (base64 decoded) as byte array\n    KID = BASE64.toByteArray(KID);\n\n    // Convert UUID from little-endian to big-endian\n    this.convertUuidEndianness(KID);\n    return KID;\n  };\n  StreamIndexNode.prototype.convertUuidEndianness = function (uuid) {\n    this.swapBytes(uuid, 0, 3);\n    this.swapBytes(uuid, 1, 2);\n    this.swapBytes(uuid, 4, 5);\n    this.swapBytes(uuid, 6, 7);\n  };\n  StreamIndexNode.prototype.swapBytes = function (bytes, pos1, pos2) {\n    var temp = bytes[pos1];\n    bytes[pos1] = bytes[pos2];\n    bytes[pos2] = temp;\n  };\n  StreamIndexNode.prototype.getWRMHeaderFromPRHeader = function getWRMHeaderFromPRHeader(prHeader) {\n    var recordType, recordLength, recordValue;\n    var i = 0;\n\n    // Parse PlayReady header\n\n    // Length - 32 bits (LE format)\n    // var length = (prHeader[i + 3] << 24) + (prHeader[i + 2] << 16) + (prHeader[i + 1] << 8) + prHeader[i];\n    i += 4;\n\n    // Record count - 16 bits (LE format)\n    // var recordCount = (prHeader[i + 1] << 8) + prHeader[i];\n    i += 2;\n\n    // Parse records\n    while (i < prHeader.length) {\n      // Record type - 16 bits (LE format)\n      recordType = prHeader[i + 1] * 256 + prHeader[i];\n      i += 2;\n\n      // Check if Rights Management header (record type = 0x01)\n      if (recordType === 0x01) {\n        // Record length - 16 bits (LE format)\n        recordLength = prHeader[i + 1] * 256 + prHeader[i];\n        i += 2;\n\n        // Record value => contains <WRMHEADER>\n        recordValue = new Uint8Array(recordLength);\n        recordValue.set(prHeader.subarray(i, i + recordLength));\n        return recordValue;\n      }\n    }\n    return null;\n  };\n  return StreamIndexNode;\n}(AdaptationSetNode_1.AdaptationSetNode);\nexports.StreamIndexNode = StreamIndexNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3605\n")},2310:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar BASE64 = __webpack_require__(7769);\nfunction guidToBytes(guid) {\n  var bytes = [];\n  guid.split('-').map(function (number, index) {\n    var bytesInChar = index < 3 ? number.match(/.{1,2}/g).reverse() : number.match(/.{1,2}/g);\n    bytesInChar.map(function (_byte) {\n      bytes.push(parseInt(_byte, 16));\n    });\n  });\n  return bytes;\n}\nfunction createWidevinePsshFromString(str) {\n  var uuid = guidToBytes(str);\n  return this.createWidevinePssh(uuid);\n}\nfunction createWidevinePssh(KID) {\n  // Create Widevine CENC header (Protocol Buffer) with KID value\n  var wvCencHeader = new Uint8Array(2 + KID.length);\n  wvCencHeader[0] = 0x12;\n  wvCencHeader[1] = 0x10;\n  wvCencHeader.set(KID, 2);\n\n  // Create a pssh box\n  var length = 12 /* box length, type, version and flags */ + 16 /* SystemID */ + 4 /* data length */ + wvCencHeader.length,\n    pssh = new Uint8Array(length),\n    i = 0;\n\n  // Set box length value (4 bytes)\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = length;\n\n  // Set type ('pssh'), version (0) and flags (0)\n  pssh.set([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00], i);\n  i += 8;\n\n  // Set SystemID ('edef8ba9-79d6-4ace-a3c8-27dcd51d21ed')\n  pssh.set([0xed, 0xef, 0x8b, 0xa9, 0x79, 0xd6, 0x4a, 0xce, 0xa3, 0xc8, 0x27, 0xdc, 0xd5, 0x1d, 0x21, 0xed], i);\n  i += 16;\n\n  // Set data length value\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = wvCencHeader.length;\n\n  // Copy Widevine CENC header\n  pssh.set(wvCencHeader, i);\n\n  // Convert to BASE64 string\n  pssh = BASE64.fromByteArray(pssh);\n  return pssh;\n}\nmodule.exports = {\n  createWidevinePsshFromString: createWidevinePsshFromString,\n  createWidevinePssh: createWidevinePssh\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUUvQjtFQUNBRSxJQUFJLENBQUNELEdBQUcsQ0FBQ0gsWUFBWSxFQUFFSyxDQUFDLENBQUM7O0VBRXpCO0VBQ0FELElBQUksR0FBR3hCLE1BQU0sQ0FBQzBCLGFBQWEsQ0FBQ0YsSUFBSSxDQUFDO0VBQ2pDLE9BQU9BLElBQUk7QUFDYjtBQUVBRyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmYiw0QkFBNEIsRUFBRUEsNEJBQTRCO0VBQzFERyxrQkFBa0IsRUFBRUE7QUFDdEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL3Bzc2guanM/ZTQ2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuY29uc3QgQkFTRTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcblxuZnVuY3Rpb24gZ3VpZFRvQnl0ZXMgKGd1aWQpIHtcbiAgICB2YXIgYnl0ZXMgPSBbXTtcbiAgICBndWlkLnNwbGl0KCctJykubWFwKChudW1iZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIHZhciBieXRlc0luQ2hhciA9IGluZGV4IDwgMyA/IG51bWJlci5tYXRjaCgvLnsxLDJ9L2cpLnJldmVyc2UoKSA6ICBudW1iZXIubWF0Y2goLy57MSwyfS9nKTtcbiAgICAgICAgYnl0ZXNJbkNoYXIubWFwKChieXRlKSA9PiB7XG4gICAgICAgICAgYnl0ZXMucHVzaChwYXJzZUludChieXRlLCAxNikpO1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiBieXRlcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlV2lkZXZpbmVQc3NoRnJvbVN0cmluZyAoc3RyKSB7XG5cbiAgbGV0IHV1aWQgPSBndWlkVG9CeXRlcyhzdHIpO1xuICByZXR1cm4gdGhpcy5jcmVhdGVXaWRldmluZVBzc2godXVpZCk7XG59XG5cblxuZnVuY3Rpb24gY3JlYXRlV2lkZXZpbmVQc3NoIChLSUQpIHtcbiAgLy8gQ3JlYXRlIFdpZGV2aW5lIENFTkMgaGVhZGVyIChQcm90b2NvbCBCdWZmZXIpIHdpdGggS0lEIHZhbHVlXG4gIHZhciB3dkNlbmNIZWFkZXIgPSBuZXcgVWludDhBcnJheSgyICsgS0lELmxlbmd0aCk7XG4gIHd2Q2VuY0hlYWRlclswXSA9IDB4MTI7XG4gIHd2Q2VuY0hlYWRlclsxXSA9IDB4MTA7XG4gIHd2Q2VuY0hlYWRlci5zZXQoS0lELCAyKTtcblxuICAvLyBDcmVhdGUgYSBwc3NoIGJveFxuICB2YXIgbGVuZ3RoID0gMTIgLyogYm94IGxlbmd0aCwgdHlwZSwgdmVyc2lvbiBhbmQgZmxhZ3MgKi8gKyAxNiAvKiBTeXN0ZW1JRCAqLyArIDQgLyogZGF0YSBsZW5ndGggKi8gKyB3dkNlbmNIZWFkZXIubGVuZ3RoLFxuICAgICAgcHNzaCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCksXG4gICAgICBpID0gMDtcblxuICAvLyBTZXQgYm94IGxlbmd0aCB2YWx1ZSAoNCBieXRlcylcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gbGVuZ3RoO1xuXG4gIC8vIFNldCB0eXBlICgncHNzaCcpLCB2ZXJzaW9uICgwKSBhbmQgZmxhZ3MgKDApXG4gIHBzc2guc2V0KFsweDcwLCAweDczLCAweDczLCAweDY4LCAweDAwLCAweDAwLCAweDAwLCAweDAwXSwgaSk7XG4gIGkgKz0gODtcblxuICAvLyBTZXQgU3lzdGVtSUQgKCdlZGVmOGJhOS03OWQ2LTRhY2UtYTNjOC0yN2RjZDUxZDIxZWQnKVxuICBwc3NoLnNldChbMHhlZCwgMHhlZiwgMHg4YiwgMHhhOSwgIDB4NzksIDB4ZDYsIDB4NGEsIDB4Y2UsIDB4YTMsIDB4YzgsIDB4MjcsIDB4ZGMsIDB4ZDUsIDB4MWQsIDB4MjEsIDB4ZWRdLCBpKTtcbiAgaSArPSAxNjtcblxuICAvLyBTZXQgZGF0YSBsZW5ndGggdmFsdWVcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gd3ZDZW5jSGVhZGVyLmxlbmd0aDtcblxuICAvLyBDb3B5IFdpZGV2aW5lIENFTkMgaGVhZGVyXG4gIHBzc2guc2V0KHd2Q2VuY0hlYWRlciwgaSk7XG5cbiAgLy8gQ29udmVydCB0byBCQVNFNjQgc3RyaW5nXG4gIHBzc2ggPSBCQVNFNjQuZnJvbUJ5dGVBcnJheShwc3NoKTtcbiAgcmV0dXJuIHBzc2g7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVXaWRldmluZVBzc2hGcm9tU3RyaW5nOiBjcmVhdGVXaWRldmluZVBzc2hGcm9tU3RyaW5nLFxuICBjcmVhdGVXaWRldmluZVBzc2g6IGNyZWF0ZVdpZGV2aW5lUHNzaFxufVxuIl0sIm5hbWVzIjpbIkJBU0U2NCIsInJlcXVpcmUiLCJndWlkVG9CeXRlcyIsImd1aWQiLCJieXRlcyIsInNwbGl0IiwibWFwIiwibnVtYmVyIiwiaW5kZXgiLCJieXRlc0luQ2hhciIsIm1hdGNoIiwicmV2ZXJzZSIsImJ5dGUiLCJwdXNoIiwicGFyc2VJbnQiLCJjcmVhdGVXaWRldmluZVBzc2hGcm9tU3RyaW5nIiwic3RyIiwidXVpZCIsImNyZWF0ZVdpZGV2aW5lUHNzaCIsIktJRCIsInd2Q2VuY0hlYWRlciIsIlVpbnQ4QXJyYXkiLCJsZW5ndGgiLCJzZXQiLCJwc3NoIiwiaSIsImZyb21CeXRlQXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2310\n")},3188:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ManifestNode_1 = __webpack_require__(2167);\nvar SegmentInformation_1 = __webpack_require__(4749);\nvar IsoDurationParser_1 = __webpack_require__(6052);\nvar RepresentationNode = function (_super) {\n  __extends(RepresentationNode, _super);\n  function RepresentationNode(node, xml) {\n    _super.call(this, node, xml);\n    this.markNodeForDownload(false);\n  }\n  RepresentationNode.prototype.createSegmentInformation = function () {\n    var presentationDuration = this.attributeList['durationInS'];\n    var segmentTimeline;\n    var timelineItemList;\n    var segmentUrlList;\n    var representationID = this.attributeList['id'];\n    if (this.segmentTemplate && this.segmentTemplate.hasChildNodes()) {\n      for (var i = 0; i < this.segmentTemplate.childNodes.length; i++) {\n        if (this.segmentTemplate.childNodes[i].nodeName == \"SegmentTimeline\") {\n          segmentTimeline = this.segmentTemplate.childNodes[i];\n        }\n      }\n    }\n    try {\n      timelineItemList = segmentTimeline.getElementsByTagName('S');\n    } catch (e) {}\n    try {\n      segmentUrlList = this.segmentList.getElementsByTagName('SegmentURL');\n    } catch (e) {}\n    this.bandwidth = this.attributeList['bandwidth'] ? parseInt(this.attributeList['bandwidth']) : -1;\n    this.segmentInformation = new SegmentInformation_1.SegmentInformation(presentationDuration, this.bandwidth, this.baseURL, representationID, this.attributeList['mimeType'], this.segmentBase, this.segmentTemplate, segmentTimeline, timelineItemList, this.segmentList, segmentUrlList);\n  };\n  RepresentationNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n    for (var i = 0; i < node.childNodes.length; i++) {\n      if (!this.baseURL && node.childNodes[i].nodeName == 'BaseURL') {\n        this.baseURL = node.childNodes[i].firstChild.nodeValue;\n      }\n      if (!this.segmentBase && node.childNodes[i].nodeName == 'SegmentBase') {\n        this.segmentBase = node.childNodes[i];\n      }\n      if (!this.segmentTemplate && node.childNodes[i].nodeName == 'SegmentTemplate') {\n        this.segmentTemplate = node.childNodes[i];\n      }\n      if (!this.segmentList && node.childNodes[i].nodeName == 'SegmentList') {\n        this.segmentList = node.childNodes[i];\n      }\n    }\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n    if (list['mediaPresentationDuration'] !== undefined) {\n      list['durationInS'] = IsoDurationParser_1.IsoDurationParser.getDurationAsS(this.attributeList['mediaPresentationDuration']);\n    }\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    } else {\n      if (!this.segmentInformation) {\n        this.createSegmentInformation();\n      }\n    }\n    _super.prototype.writeAttributesToList.call(this, node, list);\n  };\n  RepresentationNode.prototype.getMimeType = function () {\n    return this.attributeList['mimeType'] || this.attributeList['contentType'];\n  };\n  RepresentationNode.prototype.hasMimeType = function () {\n    return this.attributeList['mimeType'] || this.attributeList['contentType'] ? true : false;\n  };\n  RepresentationNode.prototype.getMediaUrlList = function () {\n    return this.segmentInformation.getMediaUrlList();\n  };\n  RepresentationNode.prototype.getRepresentationId = function () {\n    return this.id;\n  };\n  return RepresentationNode;\n}(ManifestNode_1.ManifestNode);\nexports.RepresentationNode = RepresentationNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3188\n")},4749:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar ZeroPadding_1 = __webpack_require__(9275);\nvar MediaUrl_1 = __webpack_require__(9786);\nvar CREATE_URL;\n(function (CREATE_URL) {\n  CREATE_URL[CREATE_URL["FROM_TEMPLATE"] = 0] = "FROM_TEMPLATE";\n  CREATE_URL[CREATE_URL["FROM_TIMELINE"] = 1] = "FROM_TIMELINE";\n  CREATE_URL[CREATE_URL["FROM_SEGMENTLIST"] = 2] = "FROM_SEGMENTLIST";\n  CREATE_URL[CREATE_URL["FROM_SEGMENT_BASE"] = 3] = "FROM_SEGMENT_BASE";\n})(CREATE_URL || (CREATE_URL = {}));\nvar SegmentInformation = function () {\n  function SegmentInformation(presentationDuration, bandwidth, baseUrl, representationID, mimeType, segmentBase, segmentTemplate, segmentTimeline, timelineItemList, segmentList, segmentUrlList) {\n    this.hasSegmentBase = false;\n    this.baseUrl = \'\';\n    this.presentationDuration = 0;\n    this.bandwidth = 0;\n    this.startNumber = 0;\n    this.mediaUrls = [];\n    this.whichUseCase = -1;\n    this.mimeType = \'\';\n    SegmentInformation.count += 1;\n    this.presentationDuration = presentationDuration;\n    this.mimeType = mimeType;\n    if (baseUrl) {\n      this.baseUrl = baseUrl;\n    }\n    if (bandwidth) {\n      this.bandwidth = bandwidth;\n    }\n    if (representationID) {\n      this.representationID = representationID;\n    }\n    if (segmentBase) {\n      this.segmentBase = segmentBase;\n      this.hasSegmentBase = true;\n      this.whichUseCase = CREATE_URL.FROM_SEGMENT_BASE;\n    }\n    if (segmentTemplate) {\n      this.segmentTemplate = segmentTemplate;\n      this.mediaTemplate = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n      this.mediaTemplate = this.replace$RepresentationID$(this.mediaTemplate, this.representationID);\n      this.mediaTemplate = this.replace$Bandwidth$(this.mediaTemplate, this.bandwidth);\n      this.startNumber = this.segmentTemplate.attributes.getNamedItem("startNumber") ? parseInt(this.segmentTemplate.attributes.getNamedItem("startNumber").nodeValue) : 0;\n      this.whichUseCase = CREATE_URL.FROM_TEMPLATE;\n    }\n    if (segmentTimeline) {\n      this.segmentTimeline = segmentTimeline;\n    }\n    if (timelineItemList) {\n      this.timelineItemList = timelineItemList;\n      this.whichUseCase = CREATE_URL.FROM_TIMELINE;\n    }\n    if (segmentList) {\n      this.segmentList = segmentList;\n    }\n    if (segmentUrlList) {\n      this.segmentUrlList = segmentUrlList;\n      this.whichUseCase = CREATE_URL.FROM_SEGMENTLIST;\n    }\n    var hasFileExtension = false;\n    var initSegment = \'\';\n    var initNode;\n    switch (this.whichUseCase) {\n      case CREATE_URL.FROM_SEGMENTLIST:\n        this.createFragmentFromUrlList(this.segmentUrlList);\n        initSegment = this.createInitSegment(this.segmentList.getElementsByTagName(\'Initialization\')[0].attributes.getNamedItem("sourceURL").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        if (SegmentInformation.count == 0) {\n          // console.log(\'CREATE_URL.FROM_SEGMENTLIST\', this.mediaUrls, this);\n        }\n        break;\n      case CREATE_URL.FROM_TIMELINE:\n        initNode = this.segmentTemplate.attributes.getNamedItem("initialization");\n        if (initNode) {\n          initSegment = this.createInitSegment(initNode.nodeValue);\n          this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        }\n        this.createFragmentUrlsFromTimeline(this.timelineItemList);\n        break;\n      case CREATE_URL.FROM_SEGMENT_BASE:\n        try {\n          hasFileExtension = this.baseUrl.indexOf(\'.\') !== -1 ? true : false;\n        } catch (e) {}\n        if (hasFileExtension) {\n          this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, this.baseUrl, this.mimeType));\n        }\n        if (SegmentInformation.count == 0) {\n          // console.log(\'CREATE_URL.FROM_SEGMENT_BASE\', this.mediaUrls, this);\n        }\n        break;\n      case CREATE_URL.FROM_TEMPLATE:\n        this.createFragmentsFromTemplate();\n        initNode = this.segmentTemplate.attributes.getNamedItem("initialization");\n        if (initNode) {\n          initSegment = this.createInitSegment(initNode.nodeValue);\n          this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        }\n        break;\n      default:\n        try {\n          hasFileExtension = this.baseUrl.indexOf(\'.\') !== -1 ? true : false;\n        } catch (e) {}\n        if (hasFileExtension) {\n          this.mediaUrls.push(new MediaUrl_1.MediaUrl("", this.baseUrl, this.mimeType));\n        }\n    }\n  }\n  SegmentInformation.prototype.createFragmentUrlsFromTimeline = function (segmentNodes) {\n    var segmentTimescale = this.segmentTemplate.attributes.getNamedItem("timescale") ? parseInt(this.segmentTemplate.attributes.getNamedItem("timescale").nodeValue) : 1;\n    var currentTime = this.segmentTemplate.attributes.getNamedItem("presentationTimeOffset");\n    if (currentTime) {\n      currentTime = parseInt(currentTime.nodeValue, 10);\n    } else {\n      currentTime = 0;\n    }\n    var hasCurrentTime = false;\n    var time = 0;\n    for (var i = 0; i < segmentNodes.length; i++) {\n      if (i > 0 && segmentNodes[i].attributes.getNamedItem("t") && segmentNodes[i].attributes.getNamedItem("t").nodeValue !== undefined) {\n        hasCurrentTime = true;\n        time = parseInt(segmentNodes[i].attributes.getNamedItem("t").nodeValue);\n      } else {\n        hasCurrentTime = false;\n      }\n      var duration = segmentNodes[i].attributes.getNamedItem("d") && segmentNodes[i].attributes.getNamedItem("d").nodeValue !== undefined ? parseInt(segmentNodes[i].attributes.getNamedItem("d").nodeValue) : 0;\n      var repeat = segmentNodes[i].attributes.getNamedItem("r") && segmentNodes[i].attributes.getNamedItem("r").nodeValue !== undefined ? parseInt(segmentNodes[i].attributes.getNamedItem("r").nodeValue) : 0;\n      for (var k = 1; k <= repeat; k++) {\n        // Ignore segments that start after manifest/period boundary\n        if (currentTime / segmentTimescale > this.presentationDuration) {\n          return;\n        }\n        var fragment_1 = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n        fragment_1 = this.replace$RepresentationID$(fragment_1, this.representationID);\n        fragment_1 = this.replace$Time$(fragment_1, currentTime);\n        fragment_1 = this.replace$Bandwidth$(fragment_1, this.bandwidth);\n        this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment_1, this.mimeType));\n        if (!hasCurrentTime) {\n          currentTime += duration;\n        } else {\n          currentTime = time;\n        }\n      }\n\n      // Ignore segments that start after manifest/period boundary\n      if (currentTime / segmentTimescale > this.presentationDuration) {\n        return;\n      }\n      var fragment = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n      fragment = this.replace$RepresentationID$(fragment, this.representationID);\n      fragment = this.replace$Time$(fragment, currentTime);\n      fragment = this.replace$Bandwidth$(fragment, this.bandwidth);\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n      if (!hasCurrentTime) {\n        currentTime += duration;\n      } else {\n        currentTime = time;\n      }\n    }\n  };\n  SegmentInformation.prototype.createFragmentFromUrlList = function (urlListNodes) {\n    for (var i = 0; i < urlListNodes.length; i++) {\n      var fragment = urlListNodes[i].attributes.getNamedItem("media").nodeValue;\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n  SegmentInformation.prototype.createFragmentsFromTemplate = function () {\n    var segmentDuration = parseInt(this.segmentTemplate.attributes.getNamedItem("duration").nodeValue);\n    var segmentTimescale = this.segmentTemplate.attributes.getNamedItem("timescale") ? parseInt(this.segmentTemplate.attributes.getNamedItem("timescale").nodeValue) : 1;\n    var numSegments = Math.ceil(this.presentationDuration / (segmentDuration / segmentTimescale) / 1000);\n    var mediaTemplateStringSegment = this.mediaTemplate.split(\'$\');\n    var templateReplaceableIndex;\n    var startNumber = this.startNumber || 0;\n    for (var k = 0; k < mediaTemplateStringSegment.length; k++) {\n      if (mediaTemplateStringSegment[k].indexOf(\'Number\') != -1) {\n        templateReplaceableIndex = \'$\' + mediaTemplateStringSegment[k] + \'$\';\n      }\n    }\n    var paddingAmount = ZeroPadding_1.ZeroPadding.getPaddingAmount(templateReplaceableIndex);\n    for (var i = startNumber; i < numSegments + startNumber; i++) {\n      var segmentIndex = ZeroPadding_1.ZeroPadding.addPadding(i, paddingAmount);\n      var fragment = void 0;\n      if (paddingAmount === 0) {\n        fragment = this.replace$Number$(this.mediaTemplate, i);\n      } else {\n        fragment = this.mediaTemplate.replace(templateReplaceableIndex, segmentIndex);\n      }\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n  SegmentInformation.prototype.replace$RepresentationID$ = function (fragment, id) {\n    return fragment.replace(new RegExp(\'\\\\$RepresentationID\\\\$\', \'g\'), id);\n  };\n  SegmentInformation.prototype.replace$Number$ = function (fragment, num) {\n    return fragment.replace(new RegExp(\'\\\\$Number\\\\$\', \'g\'), num.toString());\n  };\n  SegmentInformation.prototype.replace$Bandwidth$ = function (fragment, bandwidth) {\n    return fragment.replace(new RegExp(\'\\\\$Bandwidth\\\\$\', \'g\'), bandwidth.toString());\n  };\n  SegmentInformation.prototype.replace$Time$ = function (fragment, currentIndex) {\n    return fragment.replace(new RegExp(\'\\\\$Time\\\\$\', \'g\'), currentIndex.toString());\n  };\n  SegmentInformation.prototype.createInitSegment = function (fragment) {\n    fragment = this.replace$Bandwidth$(fragment, this.bandwidth);\n    fragment = this.replace$RepresentationID$(fragment, this.representationID);\n    return fragment;\n  };\n  SegmentInformation.prototype.getMediaUrlList = function () {\n    return this.mediaUrls;\n  };\n  SegmentInformation.count = -1;\n  return SegmentInformation;\n}();\nexports.SegmentInformation = SegmentInformation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4749\n')},9837:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"info\", \"log\"] }] */\n/*eslint no-sync: [\"off\"]*/\n\n\nvar isPortTaken = __webpack_require__(3721);\nvar path = __webpack_require__(1017);\nvar fs = __webpack_require__(7147);\nvar fork = (__webpack_require__(2081).fork);\nvar appSettings = __webpack_require__(9277);\nvar _require = __webpack_require__(7194),\n  app = _require.app;\nvar CHILD_SCRIPT_FILENAME = 'startServer.js';\n\n/**\n * Offline content server\n * @param {object} offlineController : offline controller\n * @param {object} downloadController : download controller\n * @param {string} maxOfflineContentPortRange - max range for offline port to on which content can be served\n * @param {string} offlineContentPort - on which port offline content should be served, default is 3010\n * @constructor\n */\nfunction OfflineContentServer(offlineController, downloadController, maxOfflineContentPortRange, offlineContentPort) {\n  this._offlineController = offlineController;\n  this._downloadController = downloadController;\n  this._maxOfflineContentPortRange = maxOfflineContentPortRange;\n  this._offlineContentPort = offlineContentPort;\n  this.childProcess = undefined;\n}\n\n/**\n * Start http server in a child_process\n * @param {object} port : on which port offline content should be served, default is 3010\n * @param {object} callback : a callback function to get listen port (if default is already taken)\n * @constructor\n */\nOfflineContentServer.prototype._startServer = function (port, callback) {\n  var self = this;\n\n  // NOTE: this is so ugly FIXME\n  var serverPath = path.join(app.getAppPath(), 'node_modules/downstream-electron');\n  if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n    serverPath = path.join(app.getAppPath(), 'node_modules/downstream-electron/api/server');\n    if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n      serverPath = app.getAppPath();\n      if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n        serverPath = __dirname;\n      }\n    }\n  }\n  console.log('Server Path:', serverPath);\n  var script = path.join(serverPath, CHILD_SCRIPT_FILENAME);\n  console.log('Script for server:', script);\n\n  //  FOR DEBUG PURPOSE self.childProcess = fork(script ,[],{execArgv:['--inspect=5860']});\n  self.childProcess = fork(script, []);\n  var routeName = appSettings.getSettings().downloadsName;\n\n  // send init data for http server\n  var data = {\n    cmd: 'init',\n    routeName: routeName,\n    port: port\n  };\n  self.childProcess.send(data);\n  self.childProcess.on('error', function (err) {\n    console.error(err);\n  });\n  // handles message from child process\n  self.childProcess.on('message', function (data) {\n    if (data.cmd === 'log') {\n      // http server wants to log some data\n      console.log(data.log);\n    }\n    if (data.cmd === 'listening_port') {\n      // http server is listening => notify application for listen port\n      callback(data.port);\n    }\n    if (data.cmd === 'get_info') {\n      var requestId = data.requestId;\n      // http server asks data folder for manifest id\n      var manifestId = data.args.manifest;\n      self._offlineController.getManifestInfo(manifestId, function (err, info) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: requestId\n          });\n        }\n        var downloadFolder = info.manifest.folder;\n        if (!downloadFolder) {\n          // try to serve from default download folder\n          downloadFolder = appSettings.getSettings().downloadsFolderPath;\n        }\n\n        // send response back\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: requestId,\n          result: {\n            folder: downloadFolder,\n            status: info.status\n          }\n        });\n      });\n    }\n    if (data.cmd === 'is_downloading') {\n      var _requestId = data.requestId;\n      var _manifestId = data.args.manifest;\n      var file = data.args.file;\n      var download = self._downloadController.getDownloading(_manifestId, file);\n      var downloadedCallback = function downloadedCallback(err) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: _requestId\n          });\n        }\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: _requestId\n        });\n      };\n      if (download) {\n        // file is created but being downloading => wait for download before sending result\n        self._downloadController.waitForDownload(download, downloadedCallback);\n      } else {\n        return downloadedCallback();\n      }\n    }\n    if (data.cmd === 'perform_seek') {\n      var _requestId2 = data.requestId;\n      var _manifestId2 = data.args.manifest;\n      var _file = data.args.file;\n      var _downloadedCallback = function _downloadedCallback(err) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: _requestId2\n          });\n        }\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: _requestId2\n        });\n      };\n      self._downloadController.performSeek(_manifestId2, _file, _downloadedCallback);\n    }\n  });\n  self.childProcess.on('close', function (code, signal) {\n    // child has closed\n    if (code == null) {\n      console.log('Child process closed with signal:', signal);\n    } else {\n      console.log('Child process closed with code:', code);\n    }\n  });\n};\n/**\n * @param {Function} callback - a callback function to get listen port (if default is taken)\n * @constructor\n */\nOfflineContentServer.prototype.serveOfflineContent = function (callback) {\n  var self = this;\n  function startOnPort(port) {\n    if (port > self._maxOfflineContentPortRange) {\n      return;\n    }\n    isPortTaken(port, function (err) {\n      if (err) {\n        port++;\n        startOnPort(port);\n      } else {\n        console.log('Port found:', port);\n        self._startServer(port, function () {\n          self._offlineContentPort = port;\n          callback(self._offlineContentPort);\n          console.info('Offline content served on port:', port);\n        });\n      }\n    });\n  }\n  startOnPort(this._offlineContentPort);\n};\n\n/*\n * Stop server process\n * @returns\n */\nOfflineContentServer.prototype.stop = function () {\n  this.childProcess.kill('SIGTERM');\n};\nmodule.exports = OfflineContentServer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9837\n")},2197:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _ = __webpack_require__(4952);\n\n/**\n * how much of progress should be connected with writing chunks to a hard drive (1 - 100%)\n * @type {number}\n */\nvar writeProgressUsage = 0.1;\n\n/**\n *\n * @param {DownloadsStorageController} storage - downloads storage controller\n * @constructor\n */\nfunction DownloadStats(storage) {\n  this._storage = storage;\n  this._stats = {};\n  this._statsPrevious = {};\n  this._STATS_TIME_GENERATION = 1000;\n  _.bindAll(this, "_generate");\n}\n\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision for kilobytes\n * @param {number=} precision2 - precision for megabytes\n * @param {number=} precision3 - precision for gigabytes\n * @returns {string} converted bytes to kb or mb or gb\n * @private\n */\nDownloadStats.prototype._convertToBytes = function (value, precision, precision2, precision3) {\n  precision2 = typeof precision2 !== "undefined" ? precision2 : precision;\n  precision3 = typeof precision3 !== "undefined" ? precision3 : precision;\n  if (value < 100000) {\n    return this._convertToKB(value, precision);\n  } else if (value < 1024 * 1024 * 1024) {\n    return this._convertToMB(value, precision2);\n  } else {\n    return this._convertToGB(value, precision3);\n  }\n};\n\n/**\n *\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} kilobytes\n * @private\n */\nDownloadStats.prototype._convertToKB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneKB = 1024;\n  return Math.round(value * a / oneKB) / a + "kB";\n};\n\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} - megabytes\n * @private\n */\nDownloadStats.prototype._convertToMB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneMB = 1024 * 1024;\n  return Math.round(value * a / oneMB) / a + "MB";\n};\n\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} gigabytes\n * @private\n */\nDownloadStats.prototype._convertToGB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneGB = 1024 * 1024 * 1024;\n  return Math.round(value * a / oneGB) / a + "GB";\n};\nDownloadStats.prototype._clearSpeed = function () {\n  var allManifestIds = Object.keys(this._stats) || [];\n  for (var i = 0, j = allManifestIds.length; i < j; i++) {\n    var manifestId = allManifestIds[i];\n    if (!this._storage.keyExists(manifestId) && this._stats[manifestId] && this._stats[manifestId].speed) {\n      this._stats[manifestId].speed = 0;\n      this._stats[manifestId].speedBytes = this._convertToBytes(this._stats[manifestId].speed, 3, 2);\n    }\n  }\n};\n\n/**\n * @param {boolean} refresh - decides if stats should be only calculated without setting previous stats\n * this is useful when downloads finishes and stats are being calculated one more time\n * @returns {void}\n * @private\n */\nDownloadStats.prototype._generate = function (refresh) {\n  var allStats = {};\n  var manifests = this._storage.getKeys();\n  this._clearSpeed();\n  function countParts(items) {\n    var parts = 0;\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = items[k];\n      parts += item.bandwidth || 1;\n    }\n    return parts;\n  }\n  function countPartsObj(items, withDownloadedOnly) {\n    var parts = 0;\n    for (var key in items) {\n      if (items.hasOwnProperty(key)) {\n        var item = items[key];\n        parts += (withDownloadedOnly ? item.stats.available / (item.stats.file_size || 1) : 1) * (item.bandwidth || 1);\n      }\n    }\n    return parts;\n  }\n  function toArray(obj) {\n    var arr = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var item = obj[key];\n        arr.push(item);\n      }\n    }\n    return arr;\n  }\n  var stats = {\n    downloading: 0,\n    downloaded: 0,\n    available: 0,\n    left: 0,\n    downloadingAvailableBytes: 0,\n    downloading_file_size: 0,\n    downloadingBytes: 0,\n    downloadedBytes: 0,\n    availableBytes: 0,\n    writeProgress: 0,\n    writeProgressDownloading: 0,\n    writeProgressDownloaded: 0,\n    errors: 0,\n    progress: 0,\n    speed: 0,\n    status: \'\'\n  };\n\n  //availableBytes - bates that has been already downloaded\n  //downloadedBytes - bytes used to calculate the current speed\n  //if for any reason the connection is broken or user stopped, then after resuming the available bytes are\n  //always bigger then the actual downloaded bytes.\n  //once the file is finished both values are equal and have the same value as file_size\n\n  var now = new Date().getTime();\n  if (!this._statsTime) {\n    this._statsTime = now;\n  }\n  for (var i = 0, j = manifests.length; i < j; i++) {\n    var manifestId = manifests[i];\n    allStats[manifestId] = _.clone(stats);\n    allStats[manifestId].left = this._storage.left.count(manifestId);\n    allStats[manifestId].leftI = this._storage.left.getItems(manifestId);\n    allStats[manifestId].errors = this._storage.errors.count(manifestId);\n    allStats[manifestId].errorsI = this._storage.errors.getItems(manifestId);\n    var items = this._storage.downloading.getKeys(manifestId);\n    allStats[manifestId].downloading = items.length;\n    allStats[manifestId].downloadingI = this._storage.downloading.getItems(manifestId);\n    var writeProgressDownloadingItemsLength = items.length;\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = this._storage.downloading.getItem(manifestId, items[k]);\n      allStats[manifestId].downloadingBytes += item.stats.downloaded;\n      allStats[manifestId].downloading_file_size += item.stats.file_size;\n      allStats[manifestId].downloadingAvailableBytes += item.stats.available;\n      allStats[manifestId].writeProgressDownloading += item.stats.writeProgress;\n    }\n    items = this._storage.downloaded.getItems(manifestId);\n    allStats[manifestId].downloaded = items.length;\n    allStats[manifestId].downloadedI = items;\n    var writeProgressItemsDownloadedLength = items.length;\n    for (var _k = 0, _l = items.length; _k < _l; _k++) {\n      var _item = items[_k];\n      allStats[manifestId].downloadedBytes += _item.stats.downloaded;\n      allStats[manifestId].writeProgressDownloaded += _item.stats.writeProgress;\n    }\n\n    //need to calculate what percentage of bytes that are going to be written to hard drive are according the the whole\n    // size for example 5 files are being downloaded, 4 smaller are 100mb and one large 1,9GB. When the large file is\n    // being saved the write progress is basically 1900/2000 = 95% of all written bytes.\n    allStats[manifestId].writeProgressDownloading = allStats[manifestId].writeProgressDownloading * (allStats[manifestId].downloadingAvailableBytes / (allStats[manifestId].downloadedBytes + allStats[manifestId].downloading_file_size) || 1);\n    allStats[manifestId].writeProgressDownloading = allStats[manifestId].writeProgressDownloading / (writeProgressDownloadingItemsLength || 1);\n    allStats[manifestId].writeProgressDownloaded = allStats[manifestId].writeProgressDownloaded * (allStats[manifestId].downloadedBytes / (allStats[manifestId].downloadedBytes + allStats[manifestId].downloading_file_size) || 1);\n    allStats[manifestId].writeProgressDownloaded = allStats[manifestId].writeProgressDownloaded / (writeProgressItemsDownloadedLength || 1);\n    allStats[manifestId].writeProgress = allStats[manifestId].writeProgressDownloading + allStats[manifestId].writeProgressDownloaded;\n    var speed = this._getDiff("downloadingBytes", manifestId, allStats, this._statsPrevious);\n    speed += this._getDiff("downloadedBytes", manifestId, allStats, this._statsPrevious);\n    speed = speed * 1000 / (now - this._statsTime || 1);\n    allStats[manifestId].speed = speed;\n    allStats[manifestId].status = this._storage.status.getItem(manifestId, "status");\n    allStats[manifestId].details = this._storage.status.getItem(manifestId, "details");\n    //progress for downloaded\n    var leftParts = countParts(allStats[manifestId].leftI);\n    var downloadedParts = countParts(allStats[manifestId].downloadedI);\n    var downloadingPartsSize = countPartsObj(allStats[manifestId].downloadingI);\n    var downloadingParts = countPartsObj(allStats[manifestId].downloadingI, true);\n    var errorParts = countPartsObj(allStats[manifestId].errorsI);\n    var allParts = leftParts + downloadedParts + downloadingPartsSize + errorParts;\n    allStats[manifestId].progress = (downloadedParts + downloadingParts) / (allParts || 1);\n    allStats[manifestId].progress = allStats[manifestId].progress * (1 - writeProgressUsage);\n    allStats[manifestId].progress += allStats[manifestId].writeProgress * writeProgressUsage;\n    allStats[manifestId].downloadedBytesTotal = Math.round(allStats[manifestId].progress * 10000) / 100;\n    allStats[manifestId].downloadedBytesTotal += "%";\n\n    // progress of each represention\n    var reduceFunc = function reduceFunc(map, obj) {\n      if (!map[obj.id]) {\n        map[obj.id] = [];\n      }\n      map[obj.id].push(obj);\n      return map;\n    };\n    var downloadedById = allStats[manifestId].downloadedI.reduce(reduceFunc, {});\n    var downloadingArray = toArray(allStats[manifestId].downloadingI);\n    var downloadingById = downloadingArray.reduce(reduceFunc, {});\n    var leftById = allStats[manifestId].leftI.reduce(reduceFunc, {});\n    var errorArray = toArray(allStats[manifestId].errorsI);\n    var errorsById = errorArray.reduce(reduceFunc, {});\n    var extend = function extend(obj, src) {\n      for (var key in src) {\n        if (src.hasOwnProperty(key)) {\n          if (!obj[key]) {\n            obj[key] = [];\n          }\n          obj[key] = obj[key].concat(src[key]);\n        }\n      }\n      return obj;\n    };\n    var allPartsById = {};\n    extend(allPartsById, downloadedById);\n    extend(allPartsById, downloadingById);\n    extend(allPartsById, leftById);\n    extend(allPartsById, errorsById);\n\n    // compute progres for each id\n    var progressById = {};\n    var key = void 0;\n    for (key in allPartsById) {\n      if (allPartsById.hasOwnProperty(key)) {\n        progressById[key] = countPartsObj(downloadedById[key]) / (countPartsObj(allPartsById[key]) || 1);\n      }\n    }\n    var progressByIdPercent = {};\n    for (key in progressById) {\n      if (progressById.hasOwnProperty(key)) {\n        progressByIdPercent[key] = Math.round(progressById[key] * 10000) / 100 + "%";\n      }\n    }\n    allStats[manifestId].progressById = progressById;\n    allStats[manifestId].progressByIdPercent = progressByIdPercent;\n  }\n  var showStats = {};\n  for (var _i = 0, _j = manifests.length; _i < _j; _i++) {\n    var _manifestId = manifests[_i];\n    showStats[_manifestId] = {};\n    var downloadedBytesTotal = allStats[_manifestId].downloadedBytes + allStats[_manifestId].downloadingAvailableBytes;\n    showStats[_manifestId].progress = allStats[_manifestId].progress;\n    showStats[_manifestId].progressPercentage = allStats[_manifestId].downloadedBytesTotal;\n    showStats[_manifestId].progressById = allStats[_manifestId].progressById;\n    showStats[_manifestId].progressByIdPercent = allStats[_manifestId].progressByIdPercent;\n    showStats[_manifestId].downloadedBytesTotal = this._convertToBytes(downloadedBytesTotal, 1, 2, 2);\n    showStats[_manifestId].downloaded = allStats[_manifestId].downloaded;\n    showStats[_manifestId].left = allStats[_manifestId].left;\n    showStats[_manifestId].errors = allStats[_manifestId].errors;\n    if (allStats[_manifestId].speed < 0) {\n      allStats[_manifestId].speed = 0;\n    }\n    showStats[_manifestId].speed = allStats[_manifestId].speed;\n    showStats[_manifestId].speedBytes = this._convertToBytes(allStats[_manifestId].speed, 3, 2);\n    showStats[_manifestId].status = allStats[_manifestId].status;\n    showStats[_manifestId].details = allStats[_manifestId].details;\n  }\n  for (var _key in showStats) {\n    if (showStats.hasOwnProperty(_key)) {\n      this._stats[_key] = showStats[_key];\n    }\n  }\n  if (!refresh) {\n    this._statsTime = now;\n    for (var _key2 in allStats) {\n      if (allStats.hasOwnProperty(_key2)) {\n        this._statsPrevious[_key2] = allStats[_key2];\n      }\n    }\n  }\n};\n\n/**\n * @param {string} key - key stats identifier\n * @param {string} manifestId - manifest identifier\n * @param {number} current - current value\n * @param {number} previous - previous value\n * @returns {number} - difference between current and previous value\n * @private\n */\nDownloadStats.prototype._getDiff = function (key, manifestId, current, previous) {\n  var currentValue = current[manifestId] && current[manifestId][key] || 0;\n  var previousValue = previous[manifestId] && previous[manifestId][key] || 0;\n  return currentValue - previousValue;\n};\n\n/**\n *\n * @param {string|array} manifestIds - manifest identifier or array of manifests identifier\n * @returns {*} stats for certain download or array of stats for downloads\n */\nDownloadStats.prototype.getStats = function (manifestIds) {\n  var stats;\n  if (this._stats) {\n    if (typeof manifestIds === \'string\') {\n      stats = this._stats[manifestIds];\n    } else {\n      stats = [];\n      for (var i = 0, j = manifestIds.length; i < j; i++) {\n        var stat = this._stats[manifestIds[i]];\n        if (stat) {\n          stats.push(stat);\n        }\n      }\n    }\n  }\n  return stats;\n};\nDownloadStats.prototype.refresh = function () {\n  this._generate(true);\n};\nDownloadStats.prototype.start = function () {\n  if (!this._interval) {\n    this._interval = setInterval(this._generate, this._STATS_TIME_GENERATION);\n    this._generate();\n  }\n};\nDownloadStats.prototype.stop = function () {\n  clearInterval(this._interval);\n  this._interval = null;\n  this._generate();\n  this._statsPrevious = {};\n};\nmodule.exports = DownloadStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2197\n')},7314:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar CODES = __webpack_require__(6999);\nvar translationErrors = {\n  downloads: {\n    _GENERAL: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Sorry we are unable to process your request - some internal error occurred"\n    },\n    ALREADY_FINISHED: {\n      code: CODES.ERRORS.FINISHED,\n      msg: "This download \'%manifestId%\' has been already finished."\n    },\n    ALREADY_REMOVED_ALL_UNFINISHED: {\n      code: CODES.ERRORS.REMOVED,\n      msg: "All unfinished downloads have been already removed, nothing left."\n    },\n    ALREADY_RESUMED: {\n      code: CODES.ERRORS.RESUMED,\n      msg: "This download \'%manifestId%\' has been already resumed."\n    },\n    ALREADY_STOPPED: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "This download \'%manifestId%\' has been already stopped or has been already downloaded."\n    },\n    ALREADY_STOPPED_ALL: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "There are no downloads to be stopped."\n    },\n    ALREADY_STARTED: {\n      code: CODES.ERRORS.STARTED,\n      msg: "This download \'%manifestId%\' has been already started."\n    },\n    BROKEN_CANNOT_BE_RESUMED: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "This download \'%manifestId%\' is broken and cannot be resumed."\n    },\n    INFO_FAILED: {\n      code: CODES.ERRORS.INFO,\n      msg: "Gettting info of download \'%manifestId%\' failed."\n    },\n    REMOVING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all downloads failed."\n    },\n    REMOVING_ALL_UNFINISHED_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all unfinished downloads failed."\n    },\n    REMOVING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of download \'%manifestId%\' failed."\n    },\n    RESUMING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Resuming of download \'%manifestId%\' failed."\n    },\n    UPDATE_DOWNLOAD_FOLDER_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Updating of download folder for \'%manifestId%\' failed."\n    },\n    STOPPING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping of download \'%manifestId%\' failed."\n    },\n    SAVING_PERSISTENT_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving persistent info for download \'%manifestId%\' failed."\n    },\n    SAVING_DATA_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving data for download \'%manifestId%\' failed."\n    },\n    STOPPING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping all downloads failed."\n    },\n    UNFINISHED: {\n      code: CODES.ERRORS.UNFINISHED,\n      msg: "This download is not ready yet."\n    }\n  },\n  manifests: {\n    NOT_FOUND: {\n      code: CODES.ERRORS.NOT_FOUND,\n      msg: "Manifest with id=\'%manifestId%\' not found."\n    },\n    LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load manifest from url \'%manifestUrl%\'."\n    },\n    LIST_LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load list of manifests."\n    },\n    FOLDER_ALREADY_EXISTS: {\n      code: CODES.ERRORS.EXISTS,\n      msg: "Folder for manifest with id =\'%manifestId%\' already exists."\n    },\n    INVALID_ID: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "Provided custom id for manifest is not valid: (\'%invalid%\')"\n    }\n  }\n};\nmodule.exports = translationErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7314\n')},9278:module=>{"use strict";eval('\n\nmodule.exports = {\n  test: "Hello world"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI3OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsSUFBSSxFQUFFO0FBQ1IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdHJhbnNsYXRpb24vX3RyYW5zbGF0aW9ucy5qcz82ZWIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGVzdDogXCJIZWxsbyB3b3JsZFwiXG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9278\n')},817:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nvar errors = __webpack_require__(7314);\nvar translations = __webpack_require__(9278);\nvar CODES = __webpack_require__(6999);\nvar REGEXP_KEYS = /%[A-Za-z0-9_-]+%/g;\n\n/**\n * @namespace <global>\n * @module util/translation\n * @property {translationErrors} e - {@link translationErrors}\n */\nvar translation = {};\n\n/**\n *\n * @param {object} key - translation object\n * @returns {*} key from translation object\n * @private\n */\nfunction _getCode(key) {\n  key = key || {};\n  var code = key.code;\n  if (!code) {\n    code = CODES.GENERAL;\n  }\n  return code;\n}\n\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} all key values\n * @private\n */\nfunction _getKeyValues(key, values) {\n  var translation = key;\n  var keyValues = [];\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n  if (translation) {\n    if (values instanceof Array) {\n      var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n      for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n        var keyValue = {};\n        keyValue[groups[i].replace(/%/g, "")] = values[i];\n        keyValues.push(keyValue);\n      }\n    } else if (_typeof(values) === "object") {\n      for (var _key in values) {\n        if (values.hasOwnProperty(_key)) {\n          var _keyValue = {};\n          _keyValue[_key] = values[_key];\n          keyValues.push(_keyValue);\n        }\n      }\n    } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n      var _groups = translation.match(REGEXP_KEYS) || [];\n      for (var _i = 0, _j = _groups.length; _i < _j; _i++) {\n        var _keyValue2 = {};\n        _keyValue2[_groups[_i].replace(/%/g, "")] = values;\n        keyValues.push(_keyValue2);\n      }\n    }\n  }\n  if (keyValues && !keyValues.length) {\n    keyValues = undefined;\n  }\n  return keyValues;\n}\n\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} translated message with attached values\n * @private\n */\nfunction _getTranslation(key, values) {\n  var translation = key;\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n  if (translation) {\n    translation = _parseValues(translation, values);\n  } else {\n    translation = "Internal Error";\n  }\n  return translation;\n}\n\n/**\n *\n * @param {array} args - arguments\n * @returns {array} array of all values except 1st one\n * @private\n */\nfunction _getValues(args) {\n  var values = [];\n  for (var i = 1, j = args.length; i < j; i++) {\n    values.push(args[i]);\n  }\n  if (values.length === 0) {\n    values = undefined;\n  } else if (values.length === 1) {\n    values = values[0];\n  }\n  return values;\n}\n\n/**\n *\n * @param {array} groups - matched groups\n * @returns {array} unique names\n * @private\n */\nfunction _getUniqueKeys(groups) {\n  var hashKey = {};\n  var uniqueNames = [];\n  groups = groups || [];\n  for (var i = 0, j = groups.length; i < j; i++) {\n    if (!hashKey[groups[i]]) {\n      hashKey[groups[i]] = true;\n      uniqueNames.push(groups[i]);\n    }\n  }\n  return uniqueNames;\n}\n\n/**\n *\n * @param {string} translation - text to be translated\n * @param {array|object|string|number|boolean} values - values to be parsed with translation\n * @returns {*} translation\n * @private\n */\nfunction _parseValues(translation, values) {\n  values = values || \'\';\n  if (values instanceof Array) {\n    var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n    for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n      translation = translation.replace(new RegExp(groups[i], "g"), values[i]);\n    }\n  } else if (_typeof(values) === "object") {\n    for (var key in values) {\n      if (values.hasOwnProperty(key)) {\n        translation = translation.replace(new RegExp("%" + key + "%", "g"), values[key]);\n      }\n    }\n    translation = translation.replace(REGEXP_KEYS, values);\n  } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n    translation = translation.replace(REGEXP_KEYS, values);\n  }\n  return translation;\n}\n\n/**\n * @alias module:util/translation.getError\n * @param {object} key - translation object\n * @returns {{code: *, msg: *, keys: *}} - error object with code, msg and keys\n */\nfunction getError(key) {\n  var values = _getValues(arguments);\n  var keyValues = _getKeyValues(key, values);\n  var msg = _getTranslation(key, values);\n  var code = _getCode(key);\n  return {\n    code: code,\n    msg: msg,\n    keys: keyValues\n  };\n}\n\n/**\n * @alias module:util/translation.getTranslation\n * @static\n * @param {object} key - translation object\n * @returns {*} - return translated string with correctly applied values\n */\nfunction getTranslation(key) {\n  var values = _getValues(arguments);\n  return _getTranslation(key, values);\n}\ntranslation.getError = getError;\ntranslation.getTranslation = getTranslation;\ntranslation.e = errors;\ntranslation.t = translations;\nmodule.exports = translation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///817\n')},6052:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar moment = __webpack_require__(1908);\nvar IsoDurationParser = function () {\n  function IsoDurationParser() {}\n  IsoDurationParser.getDuration = function (val) {\n    var dur = moment.duration(val);\n    return dur.asMilliseconds();\n  };\n  IsoDurationParser.getDurationAsS = function (val) {\n    var dur = moment.duration(val);\n    return dur.asSeconds();\n  };\n  IsoDurationParser.getMoment = function () {\n    return moment;\n  };\n  return IsoDurationParser;\n}();\nexports.IsoDurationParser = IsoDurationParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA1Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsSUFBZSxDQUFDO0FBQ3ZDLElBQU1DLGlCQUFpQixHQUFJLFlBQVk7RUFDckMsU0FBU0EsaUJBQWlCLEdBQUksQ0FDOUI7RUFFQUEsaUJBQWlCLENBQUNDLFdBQVcsR0FBRyxVQUFVQyxHQUFHLEVBQUU7SUFDN0MsSUFBTUMsR0FBRyxHQUFHTCxNQUFNLENBQUNNLFFBQVEsQ0FBQ0YsR0FBRyxDQUFDO0lBQ2hDLE9BQU9DLEdBQUcsQ0FBQ0UsY0FBYyxFQUFFO0VBQzdCLENBQUM7RUFDREwsaUJBQWlCLENBQUNNLGNBQWMsR0FBRyxVQUFVSixHQUFHLEVBQUU7SUFDaEQsSUFBTUMsR0FBRyxHQUFHTCxNQUFNLENBQUNNLFFBQVEsQ0FBQ0YsR0FBRyxDQUFDO0lBQ2hDLE9BQU9DLEdBQUcsQ0FBQ0ksU0FBUyxFQUFFO0VBQ3hCLENBQUM7RUFDRFAsaUJBQWlCLENBQUNRLFNBQVMsR0FBRyxZQUFZO0lBQ3hDLE9BQU9WLE1BQU07RUFDZixDQUFDO0VBQ0QsT0FBT0UsaUJBQWlCO0FBQzFCLENBQUMsRUFBRztBQUNKUyx5QkFBeUIsR0FBR1QsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL0lzby1kdXJhdGlvbi1wYXJzZXIuanM/Y2M4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IG1vbWVudCA9IHJlcXVpcmUoXCJtb21lbnQvbW9tZW50XCIpO1xuY29uc3QgSXNvRHVyYXRpb25QYXJzZXIgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBJc29EdXJhdGlvblBhcnNlciAoKSB7XG4gIH1cblxuICBJc29EdXJhdGlvblBhcnNlci5nZXREdXJhdGlvbiA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICBjb25zdCBkdXIgPSBtb21lbnQuZHVyYXRpb24odmFsKTtcbiAgICByZXR1cm4gZHVyLmFzTWlsbGlzZWNvbmRzKCk7XG4gIH07XG4gIElzb0R1cmF0aW9uUGFyc2VyLmdldER1cmF0aW9uQXNTID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIGNvbnN0IGR1ciA9IG1vbWVudC5kdXJhdGlvbih2YWwpO1xuICAgIHJldHVybiBkdXIuYXNTZWNvbmRzKCk7XG4gIH07XG4gIElzb0R1cmF0aW9uUGFyc2VyLmdldE1vbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9tZW50O1xuICB9O1xuICByZXR1cm4gSXNvRHVyYXRpb25QYXJzZXI7XG59KCkpO1xuZXhwb3J0cy5Jc29EdXJhdGlvblBhcnNlciA9IElzb0R1cmF0aW9uUGFyc2VyO1xuIl0sIm5hbWVzIjpbIm1vbWVudCIsInJlcXVpcmUiLCJJc29EdXJhdGlvblBhcnNlciIsImdldER1cmF0aW9uIiwidmFsIiwiZHVyIiwiZHVyYXRpb24iLCJhc01pbGxpc2Vjb25kcyIsImdldER1cmF0aW9uQXNTIiwiYXNTZWNvbmRzIiwiZ2V0TW9tZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6052\n")},8048:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar ArrayStorage = __webpack_require__(9567);\nvar createBridgeMethods = __webpack_require__(9921);\n\n/**\n * @param {DownloadsStorageController} parent - reference to parent object\n * @param {string} storageKey - storage key\n * @constructor\n */\nfunction ArrayStorageBridge(parent, storageKey) {\n  this._parent = parent;\n  this._storageKey = storageKey;\n  createBridgeMethods(this, ArrayStorage);\n}\nmodule.exports = ArrayStorageBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA0OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBaUIsQ0FBQztBQUMvQyxJQUFNQyxtQkFBbUIsR0FBR0QsbUJBQU8sQ0FBQyxJQUF5QixDQUFDOztBQUU5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Usa0JBQWtCLENBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFO0VBQy9DLElBQUksQ0FBQ0MsT0FBTyxHQUFHRixNQUFNO0VBQ3JCLElBQUksQ0FBQ0csV0FBVyxHQUFHRixVQUFVO0VBQzdCSCxtQkFBbUIsQ0FBQyxJQUFJLEVBQUVGLFlBQVksQ0FBQztBQUN6QztBQUVBUSxNQUFNLENBQUNDLE9BQU8sR0FBR04sa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL2FycmF5LXN0b3JhZ2UtYnJpZGdlLmpzP2M3MTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBBcnJheVN0b3JhZ2UgPSByZXF1aXJlKFwiLi9hcnJheS1zdG9yYWdlXCIpO1xuY29uc3QgY3JlYXRlQnJpZGdlTWV0aG9kcyA9IHJlcXVpcmUoXCIuL2NyZWF0ZS1icmlkZ2UtbWV0aG9kc1wiKTtcblxuLyoqXG4gKiBAcGFyYW0ge0Rvd25sb2Fkc1N0b3JhZ2VDb250cm9sbGVyfSBwYXJlbnQgLSByZWZlcmVuY2UgdG8gcGFyZW50IG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IHN0b3JhZ2VLZXkgLSBzdG9yYWdlIGtleVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEFycmF5U3RvcmFnZUJyaWRnZSAocGFyZW50LCBzdG9yYWdlS2V5KSB7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fc3RvcmFnZUtleSA9IHN0b3JhZ2VLZXk7XG4gIGNyZWF0ZUJyaWRnZU1ldGhvZHModGhpcywgQXJyYXlTdG9yYWdlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheVN0b3JhZ2VCcmlkZ2U7Il0sIm5hbWVzIjpbIkFycmF5U3RvcmFnZSIsInJlcXVpcmUiLCJjcmVhdGVCcmlkZ2VNZXRob2RzIiwiQXJyYXlTdG9yYWdlQnJpZGdlIiwicGFyZW50Iiwic3RvcmFnZUtleSIsIl9wYXJlbnQiLCJfc3RvcmFnZUtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8048\n")},9567:module=>{"use strict";eval("\n\n/**\n * @constructor\n */\nfunction ArrayStorage() {\n  this._items = [];\n}\n\n/**\n * @returns {void}\n */\nArrayStorage.prototype.clear = function () {\n  this._items = [];\n};\n\n/**\n *\n * @param {array} items - array items\n * @returns {void}\n */\nArrayStorage.prototype.concat = function (items) {\n  this._items = this._items.concat(items);\n};\n\n/**\n *\n * @returns {number} - number of items\n */\nArrayStorage.prototype.count = function () {\n  return this._items.length;\n};\n\n/**\n *\n * @returns {array} - items\n */\nArrayStorage.prototype.getItems = function () {\n  return this._items;\n};\n\n/**\n *\n * @param {object} item - new item\n * @returns {void}\n */\nArrayStorage.prototype.push = function (item) {\n  this._items.push(item);\n};\n\n/**\n * removes first element and returns it\n * @returns {*} - item\n */\nArrayStorage.prototype.shift = function () {\n  return this._items.shift();\n};\n\n/**\n * add elements to the beginning of array\n * @returns {*} - new length of an array\n */\nArrayStorage.prototype.unshift = function () {\n  return this._items.unshift.apply(this, arguments);\n};\nmodule.exports = ArrayStorage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU2Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxZQUFZLEdBQUk7RUFDdkIsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtBQUNsQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQUQsWUFBWSxDQUFDRSxTQUFTLENBQUNDLEtBQUssR0FBRyxZQUFZO0VBQ3pDLElBQUksQ0FBQ0YsTUFBTSxHQUFHLEVBQUU7QUFDbEIsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FELFlBQVksQ0FBQ0UsU0FBUyxDQUFDRSxNQUFNLEdBQUcsVUFBVUMsS0FBSyxFQUFFO0VBQy9DLElBQUksQ0FBQ0osTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTSxDQUFDRyxNQUFNLENBQUNDLEtBQUssQ0FBQztBQUN6QyxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0FMLFlBQVksQ0FBQ0UsU0FBUyxDQUFDSSxLQUFLLEdBQUcsWUFBWTtFQUN6QyxPQUFPLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxNQUFNO0FBQzNCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQVAsWUFBWSxDQUFDRSxTQUFTLENBQUNNLFFBQVEsR0FBRyxZQUFZO0VBQzVDLE9BQU8sSUFBSSxDQUFDUCxNQUFNO0FBQ3BCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRCxZQUFZLENBQUNFLFNBQVMsQ0FBQ08sSUFBSSxHQUFHLFVBQVVDLElBQUksRUFBRTtFQUM1QyxJQUFJLENBQUNULE1BQU0sQ0FBQ1EsSUFBSSxDQUFDQyxJQUFJLENBQUM7QUFDeEIsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBVixZQUFZLENBQUNFLFNBQVMsQ0FBQ1MsS0FBSyxHQUFHLFlBQVk7RUFDekMsT0FBTyxJQUFJLENBQUNWLE1BQU0sQ0FBQ1UsS0FBSyxFQUFFO0FBQzVCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQVgsWUFBWSxDQUFDRSxTQUFTLENBQUNVLE9BQU8sR0FBRyxZQUFZO0VBQzNDLE9BQU8sSUFBSSxDQUFDWCxNQUFNLENBQUNXLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLElBQUksRUFBRUMsU0FBUyxDQUFDO0FBQ25ELENBQUM7QUFFREMsTUFBTSxDQUFDQyxPQUFPLEdBQUdoQixZQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL2FycmF5LXN0b3JhZ2UuanM/NzU4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXJyYXlTdG9yYWdlICgpIHtcbiAgdGhpcy5faXRlbXMgPSBbXTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuQXJyYXlTdG9yYWdlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5faXRlbXMgPSBbXTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGl0ZW1zIC0gYXJyYXkgaXRlbXNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5BcnJheVN0b3JhZ2UucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIChpdGVtcykge1xuICB0aGlzLl9pdGVtcyA9IHRoaXMuX2l0ZW1zLmNvbmNhdChpdGVtcyk7XG59O1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIG51bWJlciBvZiBpdGVtc1xuICovXG5BcnJheVN0b3JhZ2UucHJvdG90eXBlLmNvdW50ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faXRlbXMubGVuZ3RoO1xufTtcblxuLyoqXG4gKlxuICogQHJldHVybnMge2FycmF5fSAtIGl0ZW1zXG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUuZ2V0SXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtcztcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtIC0gbmV3IGl0ZW1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5BcnJheVN0b3JhZ2UucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoaXRlbSkge1xuICB0aGlzLl9pdGVtcy5wdXNoKGl0ZW0pO1xufTtcblxuLyoqXG4gKiByZW1vdmVzIGZpcnN0IGVsZW1lbnQgYW5kIHJldHVybnMgaXRcbiAqIEByZXR1cm5zIHsqfSAtIGl0ZW1cbiAqL1xuQXJyYXlTdG9yYWdlLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2l0ZW1zLnNoaWZ0KCk7XG59O1xuXG4vKipcbiAqIGFkZCBlbGVtZW50cyB0byB0aGUgYmVnaW5uaW5nIG9mIGFycmF5XG4gKiBAcmV0dXJucyB7Kn0gLSBuZXcgbGVuZ3RoIG9mIGFuIGFycmF5XG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2l0ZW1zLnVuc2hpZnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXlTdG9yYWdlOyJdLCJuYW1lcyI6WyJBcnJheVN0b3JhZ2UiLCJfaXRlbXMiLCJwcm90b3R5cGUiLCJjbGVhciIsImNvbmNhdCIsIml0ZW1zIiwiY291bnQiLCJsZW5ndGgiLCJnZXRJdGVtcyIsInB1c2giLCJpdGVtIiwic2hpZnQiLCJ1bnNoaWZ0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9567\n")},5079:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\nvar appSettings = __webpack_require__(9277);\n\n/**\n *\n * @param {string} manifestId - manifest Id\n * @param {string} downloadFolder - donwload folder\n * @returns {Promise} promise\n */\nmodule.exports = function (manifestId, downloadFolder) {\n  var settingsPath = path.resolve(appSettings.getSettings().settingsFolder + "/" + manifestId + "/");\n  var moviePath = path.resolve(appSettings.getSettings().downloadsFolderPath + "/" + manifestId + "/");\n  if (downloadFolder) {\n    moviePath = path.resolve(downloadFolder + "/" + manifestId + "/");\n  }\n  function dirNotExists(dirToCheck) {\n    return new Promise(function (resolve /* , reject */) {\n      fs.stat(dirToCheck, function (er, stat) {\n        if (er) {\n          resolve();\n        } else {\n          if (stat.isDirectory()) {\n            resolve(\'Folder already exists\');\n          } else {\n            resolve();\n          }\n        }\n      });\n    });\n  }\n  return new Promise(function (resolve, reject) {\n    Promise.all([dirNotExists(settingsPath), dirNotExists(moviePath)]).then(function (results) {\n      results = results || [];\n      var errors = results.filter(function (result) {\n        return typeof result !== \'undefined\';\n      });\n      if (errors.length) {\n        reject(results);\n      } else {\n        resolve();\n      }\n    }, reject);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA3OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxJQUFNLENBQUM7QUFDNUIsSUFBTUUsV0FBVyxHQUFHRixtQkFBTyxDQUFDLElBQWlCLENBQUM7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRyxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxVQUFVLEVBQUVDLGNBQWMsRUFBRTtFQUNyRCxJQUFNQyxZQUFZLEdBQUdOLElBQUksQ0FBQ08sT0FBTyxDQUFDTixXQUFXLENBQUNPLFdBQVcsRUFBRSxDQUFDQyxjQUFjLEdBQUcsR0FBRyxHQUFHTCxVQUFVLEdBQUcsR0FBRyxDQUFDO0VBRXBHLElBQUlNLFNBQVMsR0FBR1YsSUFBSSxDQUFDTyxPQUFPLENBQUNOLFdBQVcsQ0FBQ08sV0FBVyxFQUFFLENBQUNHLG1CQUFtQixHQUFHLEdBQUcsR0FBR1AsVUFBVSxHQUFHLEdBQUcsQ0FBQztFQUNwRyxJQUFJQyxjQUFjLEVBQUU7SUFDbEJLLFNBQVMsR0FBR1YsSUFBSSxDQUFDTyxPQUFPLENBQUNGLGNBQWMsR0FBRyxHQUFHLEdBQUdELFVBQVUsR0FBRyxHQUFHLENBQUM7RUFDbkU7RUFFQSxTQUFTUSxZQUFZLENBQUVDLFVBQVUsRUFBRTtJQUNqQyxPQUFPLElBQUlDLE9BQU8sQ0FBQyxVQUFVUCxPQUFPLENBQUMsZ0JBQWdCO01BQ25EVCxFQUFFLENBQUNpQixJQUFJLENBQUNGLFVBQVUsRUFBRSxVQUFVRyxFQUFFLEVBQUVELElBQUksRUFBRTtRQUN0QyxJQUFJQyxFQUFFLEVBQUU7VUFDTlQsT0FBTyxFQUFFO1FBQ1gsQ0FBQyxNQUFNO1VBQ0wsSUFBSVEsSUFBSSxDQUFDRSxXQUFXLEVBQUUsRUFBRTtZQUN0QlYsT0FBTyxDQUFDLHVCQUF1QixDQUFDO1VBQ2xDLENBQUMsTUFBTTtZQUNMQSxPQUFPLEVBQUU7VUFDWDtRQUNGO01BQ0YsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0VBQ0o7RUFFQSxPQUFPLElBQUlPLE9BQU8sQ0FBQyxVQUFVUCxPQUFPLEVBQUVXLE1BQU0sRUFBRTtJQUM1Q0osT0FBTyxDQUFDSyxHQUFHLENBQUMsQ0FDVlAsWUFBWSxDQUFDTixZQUFZLENBQUMsRUFDMUJNLFlBQVksQ0FBQ0YsU0FBUyxDQUFDLENBQ3hCLENBQUMsQ0FBQ1UsSUFBSSxDQUFDLFVBQVVDLE9BQU8sRUFBRTtNQUN6QkEsT0FBTyxHQUFHQSxPQUFPLElBQUksRUFBRTtNQUN2QixJQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQ0UsTUFBTSxDQUFDLFVBQVVDLE1BQU0sRUFBRTtRQUM5QyxPQUFPLE9BQU9BLE1BQU0sS0FBSyxXQUFXO01BQ3RDLENBQUMsQ0FBQztNQUNGLElBQUlGLE1BQU0sQ0FBQ0csTUFBTSxFQUFFO1FBQ2pCUCxNQUFNLENBQUNHLE9BQU8sQ0FBQztNQUNqQixDQUFDLE1BQU07UUFDTGQsT0FBTyxFQUFFO01BQ1g7SUFDRixDQUFDLEVBQUVXLE1BQU0sQ0FBQztFQUNaLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvY2FuLWNyZWF0ZS1tYW5pZmVzdC5qcz9iNzZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoXCIuLi9hcHAtc2V0dGluZ3NcIik7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgSWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBkb3dubG9hZEZvbGRlciAtIGRvbndsb2FkIGZvbGRlclxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgZG93bmxvYWRGb2xkZXIpIHtcbiAgY29uc3Qgc2V0dGluZ3NQYXRoID0gcGF0aC5yZXNvbHZlKGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc2V0dGluZ3NGb2xkZXIgKyBcIi9cIiArIG1hbmlmZXN0SWQgKyBcIi9cIik7XG5cbiAgbGV0IG1vdmllUGF0aCA9IHBhdGgucmVzb2x2ZShhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLmRvd25sb2Fkc0ZvbGRlclBhdGggKyBcIi9cIiArIG1hbmlmZXN0SWQgKyBcIi9cIik7XG4gIGlmIChkb3dubG9hZEZvbGRlcikge1xuICAgIG1vdmllUGF0aCA9IHBhdGgucmVzb2x2ZShkb3dubG9hZEZvbGRlciArIFwiL1wiICsgbWFuaWZlc3RJZCArIFwiL1wiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpck5vdEV4aXN0cyAoZGlyVG9DaGVjaykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSAvKiAsIHJlamVjdCAqLykge1xuICAgICAgZnMuc3RhdChkaXJUb0NoZWNrLCBmdW5jdGlvbiAoZXIsIHN0YXQpIHtcbiAgICAgICAgaWYgKGVyKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIHJlc29sdmUoJ0ZvbGRlciBhbHJlYWR5IGV4aXN0cycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgUHJvbWlzZS5hbGwoW1xuICAgICAgZGlyTm90RXhpc3RzKHNldHRpbmdzUGF0aCksXG4gICAgICBkaXJOb3RFeGlzdHMobW92aWVQYXRoKVxuICAgIF0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuICAgICAgY29uc3QgZXJyb3JzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICB9KTtcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlamVjdChyZXN1bHRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9LCByZWplY3QpO1xuICB9KTtcbn07XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsImFwcFNldHRpbmdzIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1hbmlmZXN0SWQiLCJkb3dubG9hZEZvbGRlciIsInNldHRpbmdzUGF0aCIsInJlc29sdmUiLCJnZXRTZXR0aW5ncyIsInNldHRpbmdzRm9sZGVyIiwibW92aWVQYXRoIiwiZG93bmxvYWRzRm9sZGVyUGF0aCIsImRpck5vdEV4aXN0cyIsImRpclRvQ2hlY2siLCJQcm9taXNlIiwic3RhdCIsImVyIiwiaXNEaXJlY3RvcnkiLCJyZWplY3QiLCJhbGwiLCJ0aGVuIiwicmVzdWx0cyIsImVycm9ycyIsImZpbHRlciIsInJlc3VsdCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5079\n')},9921:module=>{"use strict";eval('\n\n/**\n * the idea is to copy the methods from storage so that they can be triggered from parent object and then propagated back\n * to the storage object.\n * for example:\n *    someController.storage.status.setItem(manifestId, someKey, someValue);\n *    someController.storage.downloads.setItem(manifestId, someKey, someValue);\n * @param {object} scope - parent object where the method "From" object will be bridged to\n * @param {object} From - object where the original method was declared\n * @returns {void}\n */\nfunction createBridgeMethods(scope, From) {\n  function action() {\n    var args = [],\n      i,\n      j;\n    for (i = 0, j = arguments.length; i < j; i++) {\n      args.push(arguments[i]);\n    }\n    args.unshift(this._storageKey);\n    return this._parent._itemAction.apply(this._parent, args);\n  }\n  for (var methodName in From.prototype) {\n    if (From.prototype.hasOwnProperty(methodName)) {\n      scope[methodName] = action.bind(scope, methodName);\n    }\n  }\n}\nmodule.exports = createBridgeMethods;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkyMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLG1CQUFtQixDQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRTtFQUN6QyxTQUFTQyxNQUFNLEdBQUk7SUFDakIsSUFBSUMsSUFBSSxHQUFHLEVBQUU7TUFBRUMsQ0FBQztNQUFFQyxDQUFDO0lBQ25CLEtBQUtELENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFNLEVBQUVILENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtNQUM1Q0QsSUFBSSxDQUFDSyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0YsQ0FBQyxDQUFDLENBQUM7SUFDekI7SUFDQUQsSUFBSSxDQUFDTSxPQUFPLENBQUMsSUFBSSxDQUFDQyxXQUFXLENBQUM7SUFDOUIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDRixPQUFPLEVBQUVSLElBQUksQ0FBQztFQUMzRDtFQUVBLEtBQUssSUFBSVcsVUFBVSxJQUFJYixJQUFJLENBQUNjLFNBQVMsRUFBRTtJQUNyQyxJQUFJZCxJQUFJLENBQUNjLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDRixVQUFVLENBQUMsRUFBRTtNQUM3Q2QsS0FBSyxDQUFDYyxVQUFVLENBQUMsR0FBR1osTUFBTSxDQUFDZSxJQUFJLENBQUNqQixLQUFLLEVBQUVjLFVBQVUsQ0FBQztJQUNwRDtFQUNGO0FBQ0Y7QUFFQUksTUFBTSxDQUFDQyxPQUFPLEdBQUdwQixtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvY3JlYXRlLWJyaWRnZS1tZXRob2RzLmpzPzk3MDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogdGhlIGlkZWEgaXMgdG8gY29weSB0aGUgbWV0aG9kcyBmcm9tIHN0b3JhZ2Ugc28gdGhhdCB0aGV5IGNhbiBiZSB0cmlnZ2VyZWQgZnJvbSBwYXJlbnQgb2JqZWN0IGFuZCB0aGVuIHByb3BhZ2F0ZWQgYmFja1xuICogdG8gdGhlIHN0b3JhZ2Ugb2JqZWN0LlxuICogZm9yIGV4YW1wbGU6XG4gKiAgICBzb21lQ29udHJvbGxlci5zdG9yYWdlLnN0YXR1cy5zZXRJdGVtKG1hbmlmZXN0SWQsIHNvbWVLZXksIHNvbWVWYWx1ZSk7XG4gKiAgICBzb21lQ29udHJvbGxlci5zdG9yYWdlLmRvd25sb2Fkcy5zZXRJdGVtKG1hbmlmZXN0SWQsIHNvbWVLZXksIHNvbWVWYWx1ZSk7XG4gKiBAcGFyYW0ge29iamVjdH0gc2NvcGUgLSBwYXJlbnQgb2JqZWN0IHdoZXJlIHRoZSBtZXRob2QgXCJGcm9tXCIgb2JqZWN0IHdpbGwgYmUgYnJpZGdlZCB0b1xuICogQHBhcmFtIHtvYmplY3R9IEZyb20gLSBvYmplY3Qgd2hlcmUgdGhlIG9yaWdpbmFsIG1ldGhvZCB3YXMgZGVjbGFyZWRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBjcmVhdGVCcmlkZ2VNZXRob2RzIChzY29wZSwgRnJvbSkge1xuICBmdW5jdGlvbiBhY3Rpb24gKCkge1xuICAgIGxldCBhcmdzID0gW10sIGksIGo7XG4gICAgZm9yIChpID0gMCwgaiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnVuc2hpZnQodGhpcy5fc3RvcmFnZUtleSk7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudC5faXRlbUFjdGlvbi5hcHBseSh0aGlzLl9wYXJlbnQsIGFyZ3MpO1xuICB9XG5cbiAgZm9yIChsZXQgbWV0aG9kTmFtZSBpbiBGcm9tLnByb3RvdHlwZSkge1xuICAgIGlmIChGcm9tLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShtZXRob2ROYW1lKSkge1xuICAgICAgc2NvcGVbbWV0aG9kTmFtZV0gPSBhY3Rpb24uYmluZChzY29wZSwgbWV0aG9kTmFtZSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQnJpZGdlTWV0aG9kczsiXSwibmFtZXMiOlsiY3JlYXRlQnJpZGdlTWV0aG9kcyIsInNjb3BlIiwiRnJvbSIsImFjdGlvbiIsImFyZ3MiLCJpIiwiaiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInB1c2giLCJ1bnNoaWZ0IiwiX3N0b3JhZ2VLZXkiLCJfcGFyZW50IiwiX2l0ZW1BY3Rpb24iLCJhcHBseSIsIm1ldGhvZE5hbWUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImJpbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9921\n')},8494:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\n/**\n * @param {string} dir - folder path\n * @param {string} itemName - folder or file name\n * @param {boolean} includeFolders - if folders should be included\n * @param {boolean} includeFiles - if files should be included\n * @returns {Promise} promise\n */\nfunction filterDirItem(dir, itemName, includeFolders, includeFiles) {\n  var folderPath = path.resolve(dir + "/" + itemName);\n  return new Promise(function (resolve, reject) {\n    fs.stat(folderPath, function (err, stat) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      if (stat.isDirectory()) {\n        if (!includeFolders) {\n          itemName = undefined;\n        }\n        resolve(itemName);\n      } else {\n        if (!includeFiles) {\n          itemName = undefined;\n        }\n        resolve(itemName);\n      }\n    });\n  });\n}\n\n/**\n * @param {string} dir - folder path\n * @param {boolean} includeFolders - if folders should be included\n * @param {boolean} includeFiles - if files should be included\n * @returns {Promise} promise\n */\nfunction dirList(dir, includeFolders, includeFiles) {\n  if (typeof includeFolders === "undefined") {\n    includeFolders = true;\n  }\n  if (typeof includeFiles === "undefined") {\n    includeFiles = true;\n  }\n  return new Promise(function (resolve, reject) {\n    fs.readdir(dir, function (err, folders) {\n      if (err) {\n        //not found return empty list, there was another error ENOTDIR but it seems like this is not a valid case anyway\n        if (err.code === "ENOENT" || err.code === "ENOTDIR") {\n          resolve([]);\n        } else {\n          reject(err.message);\n        }\n      } else {\n        var foldersPromises = [];\n        for (var i = 0, j = folders.length; i < j; i++) {\n          foldersPromises.push(filterDirItem(dir, folders[i], includeFolders, includeFiles));\n        }\n        Promise.all(foldersPromises).then(function (results) {\n          resolve(results.filter(function (folderName) {\n            return typeof folderName !== "undefined";\n          }));\n        }, function (err) {\n          reject(err);\n        });\n      }\n    });\n  });\n}\nmodule.exports = dirList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKO0FBRUFrQixNQUFNLENBQUNDLE9BQU8sR0FBR2hCLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvZGlyLWxpc3QuanM/MmYxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlyIC0gZm9sZGVyIHBhdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSBpdGVtTmFtZSAtIGZvbGRlciBvciBmaWxlIG5hbWVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUZvbGRlcnMgLSBpZiBmb2xkZXJzIHNob3VsZCBiZSBpbmNsdWRlZFxuICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlRmlsZXMgLSBpZiBmaWxlcyBzaG91bGQgYmUgaW5jbHVkZWRcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGZpbHRlckRpckl0ZW0gKGRpciwgaXRlbU5hbWUsIGluY2x1ZGVGb2xkZXJzLCBpbmNsdWRlRmlsZXMpIHtcbiAgY29uc3QgZm9sZGVyUGF0aCA9IHBhdGgucmVzb2x2ZShkaXIgKyBcIi9cIiArIGl0ZW1OYW1lKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmcy5zdGF0KGZvbGRlclBhdGgsIGZ1bmN0aW9uIChlcnIsIHN0YXQpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgaWYgKCFpbmNsdWRlRm9sZGVycykge1xuICAgICAgICAgIGl0ZW1OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoaXRlbU5hbWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWluY2x1ZGVGaWxlcykge1xuICAgICAgICAgIGl0ZW1OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoaXRlbU5hbWUpXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXIgLSBmb2xkZXIgcGF0aFxuICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlRm9sZGVycyAtIGlmIGZvbGRlcnMgc2hvdWxkIGJlIGluY2x1ZGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVGaWxlcyAtIGlmIGZpbGVzIHNob3VsZCBiZSBpbmNsdWRlZFxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xuZnVuY3Rpb24gZGlyTGlzdCAoZGlyLCBpbmNsdWRlRm9sZGVycywgaW5jbHVkZUZpbGVzKSB7XG4gIGlmICh0eXBlb2YgaW5jbHVkZUZvbGRlcnMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBpbmNsdWRlRm9sZGVycyA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbmNsdWRlRmlsZXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBpbmNsdWRlRmlsZXMgPSB0cnVlO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnMucmVhZGRpcihkaXIsIGZ1bmN0aW9uIChlcnIsIGZvbGRlcnMpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgLy9ub3QgZm91bmQgcmV0dXJuIGVtcHR5IGxpc3QsIHRoZXJlIHdhcyBhbm90aGVyIGVycm9yIEVOT1RESVIgYnV0IGl0IHNlZW1zIGxpa2UgdGhpcyBpcyBub3QgYSB2YWxpZCBjYXNlIGFueXdheVxuICAgICAgICBpZiAoZXJyLmNvZGUgPT09IFwiRU5PRU5UXCIgfHwgZXJyLmNvZGUgPT09IFwiRU5PVERJUlwiKSB7XG4gICAgICAgICAgcmVzb2x2ZShbXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KGVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGZvbGRlcnNQcm9taXNlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaiA9IGZvbGRlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgZm9sZGVyc1Byb21pc2VzLnB1c2goZmlsdGVyRGlySXRlbShkaXIsIGZvbGRlcnNbaV0sIGluY2x1ZGVGb2xkZXJzLCBpbmNsdWRlRmlsZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBQcm9taXNlLmFsbChmb2xkZXJzUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uIChmb2xkZXJOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGZvbGRlck5hbWUgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRpckxpc3Q7XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsImZpbHRlckRpckl0ZW0iLCJkaXIiLCJpdGVtTmFtZSIsImluY2x1ZGVGb2xkZXJzIiwiaW5jbHVkZUZpbGVzIiwiZm9sZGVyUGF0aCIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdCIsImVyciIsImlzRGlyZWN0b3J5IiwidW5kZWZpbmVkIiwiZGlyTGlzdCIsInJlYWRkaXIiLCJmb2xkZXJzIiwiY29kZSIsIm1lc3NhZ2UiLCJmb2xkZXJzUHJvbWlzZXMiLCJpIiwiaiIsImxlbmd0aCIsInB1c2giLCJhbGwiLCJ0aGVuIiwicmVzdWx0cyIsImZpbHRlciIsImZvbGRlck5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8494\n')},957:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar constants = __webpack_require__(6953);\nvar utilUrl = __webpack_require__(8279);\n\n/**\n * @module\n * @namespace downloadUtil\n */\nvar downloadUtil = {};\n\n/**\n * @typedef {Link} Link\n * @property {string} id - identifier\n * @property {number} bandwidth - bandwidth\n * @property {string} contentType - content type [video, audio, text]\n * @property {string} remoteUrl - remote url\n * @property {string} localUrl - local url\n */\n\n/**\n * @typedef {Link} Link\n * @property {string} id - identifier\n * @property {number} bandwidth - bandwidth\n * @property {string} contentType - content type [video, audio, text]\n * @property {string} remoteUrl - remote url\n * @property {string} localUrl - local url\n */\n\n/**\n * @param {string} manifestId - manifest identifier\n * @param {string} localPath - local path\n * @param {string} remotePath - remote path\n * @param {Array} userRepresentations - representations chosen by a user\n * @param {Array} manifestRepresentations - all manifest representations\n * @param {object} downloadedHash - download unique identifier\n * @returns {Link[]} array of {@link Link}\n */\ndownloadUtil.getAllLinks = function getAllLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations) {\n  return downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations);\n};\n\n/**\n * @param {string} manifestId - manifest identifier\n * @param {string} localPath - local path\n * @param {string} remotePath - remote path\n * @param {Array} userRepresentations - representations chosen by a user\n * @param {Array} manifestRepresentations - all manifest representations\n * @param {object} downloadedHash - download unique identifier\n * @returns {Link[]} array of {@link Link}\n */\ndownloadUtil.getDownloadLinks = function getDownloadLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations, downloadedHash) {\n  var chosenRepresentations = downloadUtil.getChosenRepresentations(userRepresentations, manifestRepresentations);\n  var bandwidth, contentType, localUrl, i, id, j, k, l, links;\n  var mediaFile, mediaBaseUrl, mediaUrls, remoteUrl, segmentInformation;\n  links = [];\n  downloadedHash = downloadedHash || {};\n  for (i = 0, j = chosenRepresentations.length; i < j; i++) {\n    contentType = chosenRepresentations[i].attributeList.mimeType;\n    bandwidth = +chosenRepresentations[i].attributeList.bandwidth;\n    if (contentType.indexOf("video") === 0) {\n      contentType = "video";\n    } else if (contentType.indexOf("audio") === 0) {\n      contentType = "audio";\n    } else {\n      contentType = "text";\n    }\n    segmentInformation = chosenRepresentations[i].segmentInformation;\n    mediaUrls = segmentInformation.mediaUrls;\n    id = segmentInformation.representationID;\n    for (k = 0, l = mediaUrls.length; k < l; k++) {\n      mediaFile = mediaUrls[k].mediaFile;\n      mediaBaseUrl = mediaUrls[k].baseURL;\n      mediaBaseUrl = mediaBaseUrl.replace(/\\.\\.\\//g, "");\n      mediaBaseUrl = mediaBaseUrl.replace(/\\.\\./g, "");\n      if (mediaFile === mediaBaseUrl || remotePath === mediaBaseUrl) {\n        mediaBaseUrl = "";\n      }\n      // remove http and https from mediaBaseUrl, this way it will create a correct folder structure\n      if (mediaBaseUrl.match(constants.regexpProtocolRemove)) {\n        remoteUrl = utilUrl.joinPathWithFile(mediaBaseUrl, mediaFile);\n        localUrl = utilUrl.joinPathWithFile(localPath, mediaBaseUrl.replace(constants.regexpProtocolRemove, ""), mediaFile);\n      } else {\n        remoteUrl = utilUrl.joinPathWithFile(remotePath, mediaBaseUrl, mediaFile);\n        localUrl = utilUrl.joinPathWithFile(localPath, mediaBaseUrl, mediaFile);\n      }\n\n      // filter query string from localUrl\n      var index = localUrl.lastIndexOf(\'?\');\n      if (index > -1) {\n        localUrl = localUrl.substr(0, index);\n      }\n      var fileParts = localUrl.split(\'/\');\n      fileParts = fileParts.map(function (part) {\n        return decodeURIComponent(part);\n      });\n      localUrl = fileParts.join(\'/\');\n      if (!downloadedHash[localUrl] || !downloadedHash[localUrl] && downloadedHash[localUrl].remoteUrl !== remoteUrl) {\n        links.push({\n          id: id,\n          bandwidth: bandwidth,\n          contentType: contentType,\n          remoteUrl: remoteUrl,\n          localUrl: localUrl,\n          index: k\n        });\n      }\n    }\n  }\n  // sort links in order to allow playback before all links are downloaded (for ex: to switch from audio tracks)\n  links.sort(function (a, b) {\n    return a.index - b.index;\n  });\n  return links;\n};\n\n/**\n *\n * @param {array} userChosenRepr - array of chosen representations ids by user\n * @param {array} manifestRepr - array of all manifest representations\n * @returns {array} chosen representations from manifest\n */\ndownloadUtil.getChosenRepresentations = function getChosenRepresentations(userChosenRepr, manifestRepr) {\n  var chosenRepresentations = [];\n  var userChosenReprObj = {};\n  userChosenRepr = userChosenRepr || [];\n  manifestRepr = manifestRepr || [];\n  for (var i = 0, j = userChosenRepr.length; i < j; i++) {\n    userChosenReprObj[String(userChosenRepr[i])] = true;\n  }\n  for (var _i = 0, _j = manifestRepr.length; _i < _j; _i++) {\n    var items = manifestRepr[_i].representationColl;\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = items[k];\n      if (userChosenReprObj[String(item.attributeList.id)]) {\n        chosenRepresentations.push(item);\n      }\n    }\n  }\n  return chosenRepresentations;\n};\nmodule.exports = downloadUtil;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixDQUFDQyxNQUFNLENBQUNILGNBQWMsQ0FBQ2xDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJO0VBQ3JEO0VBQ0EsS0FBSyxJQUFJQSxFQUFDLEdBQUcsQ0FBQyxFQUFFRSxFQUFDLEdBQUdpQyxZQUFZLENBQUN4QixNQUFNLEVBQUVYLEVBQUMsR0FBR0UsRUFBQyxFQUFFRixFQUFDLEVBQUUsRUFBRTtJQUNuRCxJQUFNc0MsS0FBSyxHQUFHSCxZQUFZLENBQUNuQyxFQUFDLENBQUMsQ0FBQ3VDLGtCQUFrQjtJQUNoRCxLQUFLLElBQUlwQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxDQUFDLEdBQUdrQyxLQUFLLENBQUMzQixNQUFNLEVBQUVSLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtNQUM1QyxJQUFNcUMsSUFBSSxHQUFHRixLQUFLLENBQUNuQyxDQUFDLENBQUM7TUFDckIsSUFBSWlDLGlCQUFpQixDQUFDQyxNQUFNLENBQUNHLElBQUksQ0FBQzVCLGFBQWEsQ0FBQ1gsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNwRE4scUJBQXFCLENBQUNtQyxJQUFJLENBQUNVLElBQUksQ0FBQztNQUNsQztJQUNGO0VBQ0Y7RUFDQSxPQUFPN0MscUJBQXFCO0FBQzlCLENBQUM7QUFFRDhDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHeEQsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9kb3dubG9hZHMuanM/ZTM3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IHV0aWxVcmwgPSByZXF1aXJlKFwiLi91cmxcIik7XG5cbi8qKlxuICogQG1vZHVsZVxuICogQG5hbWVzcGFjZSBkb3dubG9hZFV0aWxcbiAqL1xubGV0IGRvd25sb2FkVXRpbCA9IHt9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtMaW5rfSBMaW5rXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaWQgLSBpZGVudGlmaWVyXG4gKiBAcHJvcGVydHkge251bWJlcn0gYmFuZHdpZHRoIC0gYmFuZHdpZHRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGVudFR5cGUgLSBjb250ZW50IHR5cGUgW3ZpZGVvLCBhdWRpbywgdGV4dF1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByZW1vdGVVcmwgLSByZW1vdGUgdXJsXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbG9jYWxVcmwgLSBsb2NhbCB1cmxcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtMaW5rfSBMaW5rXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaWQgLSBpZGVudGlmaWVyXG4gKiBAcHJvcGVydHkge251bWJlcn0gYmFuZHdpZHRoIC0gYmFuZHdpZHRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGVudFR5cGUgLSBjb250ZW50IHR5cGUgW3ZpZGVvLCBhdWRpbywgdGV4dF1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByZW1vdGVVcmwgLSByZW1vdGUgdXJsXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbG9jYWxVcmwgLSBsb2NhbCB1cmxcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsUGF0aCAtIGxvY2FsIHBhdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdGVQYXRoIC0gcmVtb3RlIHBhdGhcbiAqIEBwYXJhbSB7QXJyYXl9IHVzZXJSZXByZXNlbnRhdGlvbnMgLSByZXByZXNlbnRhdGlvbnMgY2hvc2VuIGJ5IGEgdXNlclxuICogQHBhcmFtIHtBcnJheX0gbWFuaWZlc3RSZXByZXNlbnRhdGlvbnMgLSBhbGwgbWFuaWZlc3QgcmVwcmVzZW50YXRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gZG93bmxvYWRlZEhhc2ggLSBkb3dubG9hZCB1bmlxdWUgaWRlbnRpZmllclxuICogQHJldHVybnMge0xpbmtbXX0gYXJyYXkgb2Yge0BsaW5rIExpbmt9XG4gKi9cbmRvd25sb2FkVXRpbC5nZXRBbGxMaW5rcyA9IGZ1bmN0aW9uIGdldEFsbExpbmtzIChtYW5pZmVzdElkLCBsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIHVzZXJSZXByZXNlbnRhdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5pZmVzdFJlcHJlc2VudGF0aW9ucykge1xuICByZXR1cm4gZG93bmxvYWRVdGlsLmdldERvd25sb2FkTGlua3MobWFuaWZlc3RJZCwgbG9jYWxQYXRoLCByZW1vdGVQYXRoLCB1c2VyUmVwcmVzZW50YXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmlmZXN0UmVwcmVzZW50YXRpb25zKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxQYXRoIC0gbG9jYWwgcGF0aFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZVBhdGggLSByZW1vdGUgcGF0aFxuICogQHBhcmFtIHtBcnJheX0gdXNlclJlcHJlc2VudGF0aW9ucyAtIHJlcHJlc2VudGF0aW9ucyBjaG9zZW4gYnkgYSB1c2VyXG4gKiBAcGFyYW0ge0FycmF5fSBtYW5pZmVzdFJlcHJlc2VudGF0aW9ucyAtIGFsbCBtYW5pZmVzdCByZXByZXNlbnRhdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBkb3dubG9hZGVkSGFzaCAtIGRvd25sb2FkIHVuaXF1ZSBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7TGlua1tdfSBhcnJheSBvZiB7QGxpbmsgTGlua31cbiAqL1xuZG93bmxvYWRVdGlsLmdldERvd25sb2FkTGlua3MgPSBmdW5jdGlvbiBnZXREb3dubG9hZExpbmtzIChtYW5pZmVzdElkLCBsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIHVzZXJSZXByZXNlbnRhdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmlmZXN0UmVwcmVzZW50YXRpb25zLCBkb3dubG9hZGVkSGFzaFxuKSB7XG4gIGxldCBjaG9zZW5SZXByZXNlbnRhdGlvbnMgPSBkb3dubG9hZFV0aWwuZ2V0Q2hvc2VuUmVwcmVzZW50YXRpb25zKHVzZXJSZXByZXNlbnRhdGlvbnMsIG1hbmlmZXN0UmVwcmVzZW50YXRpb25zKTtcbiAgbGV0IGJhbmR3aWR0aCwgY29udGVudFR5cGUsIGxvY2FsVXJsLCBpLCBpZCwgaiwgaywgbCwgbGlua3M7XG4gIGxldCBtZWRpYUZpbGUsIG1lZGlhQmFzZVVybCwgbWVkaWFVcmxzLCByZW1vdGVVcmwsIHNlZ21lbnRJbmZvcm1hdGlvbjtcblxuICBsaW5rcyA9IFtdO1xuICBkb3dubG9hZGVkSGFzaCA9IGRvd25sb2FkZWRIYXNoIHx8IHt9O1xuICBmb3IgKGkgPSAwLCBqID0gY2hvc2VuUmVwcmVzZW50YXRpb25zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGNvbnRlbnRUeXBlID0gY2hvc2VuUmVwcmVzZW50YXRpb25zW2ldLmF0dHJpYnV0ZUxpc3QubWltZVR5cGU7XG4gICAgYmFuZHdpZHRoID0gK2Nob3NlblJlcHJlc2VudGF0aW9uc1tpXS5hdHRyaWJ1dGVMaXN0LmJhbmR3aWR0aDtcbiAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZihcInZpZGVvXCIpID09PSAwKSB7XG4gICAgICBjb250ZW50VHlwZSA9IFwidmlkZW9cIjtcbiAgICB9IGVsc2UgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoXCJhdWRpb1wiKSA9PT0gMCkge1xuICAgICAgY29udGVudFR5cGUgPSBcImF1ZGlvXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnRUeXBlID0gXCJ0ZXh0XCI7XG4gICAgfVxuICAgIHNlZ21lbnRJbmZvcm1hdGlvbiA9IGNob3NlblJlcHJlc2VudGF0aW9uc1tpXS5zZWdtZW50SW5mb3JtYXRpb247XG4gICAgbWVkaWFVcmxzID0gc2VnbWVudEluZm9ybWF0aW9uLm1lZGlhVXJscztcbiAgICBpZCA9IHNlZ21lbnRJbmZvcm1hdGlvbi5yZXByZXNlbnRhdGlvbklEO1xuICAgIGZvciAoayA9IDAsIGwgPSBtZWRpYVVybHMubGVuZ3RoOyBrIDwgbDsgaysrKSB7XG4gICAgICBtZWRpYUZpbGUgPSBtZWRpYVVybHNba10ubWVkaWFGaWxlO1xuICAgICAgbWVkaWFCYXNlVXJsID0gbWVkaWFVcmxzW2tdLmJhc2VVUkw7XG4gICAgICBtZWRpYUJhc2VVcmwgPSBtZWRpYUJhc2VVcmwucmVwbGFjZSgvXFwuXFwuXFwvL2csIFwiXCIpO1xuICAgICAgbWVkaWFCYXNlVXJsID0gbWVkaWFCYXNlVXJsLnJlcGxhY2UoL1xcLlxcLi9nLCBcIlwiKTtcbiAgICAgIGlmIChtZWRpYUZpbGUgPT09IG1lZGlhQmFzZVVybCB8fCByZW1vdGVQYXRoID09PSBtZWRpYUJhc2VVcmwpIHtcbiAgICAgICAgbWVkaWFCYXNlVXJsID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSBodHRwIGFuZCBodHRwcyBmcm9tIG1lZGlhQmFzZVVybCwgdGhpcyB3YXkgaXQgd2lsbCBjcmVhdGUgYSBjb3JyZWN0IGZvbGRlciBzdHJ1Y3R1cmVcbiAgICAgIGlmIChtZWRpYUJhc2VVcmwubWF0Y2goY29uc3RhbnRzLnJlZ2V4cFByb3RvY29sUmVtb3ZlKSkge1xuICAgICAgICByZW1vdGVVcmwgPSB1dGlsVXJsLmpvaW5QYXRoV2l0aEZpbGUobWVkaWFCYXNlVXJsLCBtZWRpYUZpbGUpO1xuICAgICAgICBsb2NhbFVybCA9IHV0aWxVcmwuam9pblBhdGhXaXRoRmlsZShsb2NhbFBhdGgsIG1lZGlhQmFzZVVybC5yZXBsYWNlKGNvbnN0YW50cy5yZWdleHBQcm90b2NvbFJlbW92ZSwgXCJcIiksXG4gICAgICAgICAgbWVkaWFGaWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbW90ZVVybCA9IHV0aWxVcmwuam9pblBhdGhXaXRoRmlsZShyZW1vdGVQYXRoLCBtZWRpYUJhc2VVcmwsIG1lZGlhRmlsZSk7XG4gICAgICAgIGxvY2FsVXJsID0gdXRpbFVybC5qb2luUGF0aFdpdGhGaWxlKGxvY2FsUGF0aCwgbWVkaWFCYXNlVXJsLCBtZWRpYUZpbGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBmaWx0ZXIgcXVlcnkgc3RyaW5nIGZyb20gbG9jYWxVcmxcbiAgICAgIGxldCBpbmRleCA9IGxvY2FsVXJsLmxhc3RJbmRleE9mKCc/JylcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGxvY2FsVXJsID0gbG9jYWxVcmwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICAgIH1cblxuICAgICAgbGV0IGZpbGVQYXJ0cyA9IGxvY2FsVXJsLnNwbGl0KCcvJyk7XG4gICAgICBmaWxlUGFydHMgPSBmaWxlUGFydHMubWFwKChwYXJ0KSA9PiBkZWNvZGVVUklDb21wb25lbnQocGFydCkpO1xuICAgICAgbG9jYWxVcmwgPSBmaWxlUGFydHMuam9pbignLycpO1xuXG4gICAgICBpZiAoKCFkb3dubG9hZGVkSGFzaFtsb2NhbFVybF0pIHx8ICghZG93bmxvYWRlZEhhc2hbbG9jYWxVcmxdICYmIGRvd25sb2FkZWRIYXNoW2xvY2FsVXJsXS5yZW1vdGVVcmwgIT09IHJlbW90ZVVybCkpIHtcbiAgICAgICAgbGlua3MucHVzaCh7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIGJhbmR3aWR0aDogYmFuZHdpZHRoLFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiBjb250ZW50VHlwZSxcbiAgICAgICAgICByZW1vdGVVcmw6IHJlbW90ZVVybCxcbiAgICAgICAgICBsb2NhbFVybDogbG9jYWxVcmwsXG4gICAgICAgICAgaW5kZXg6IGtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIHNvcnQgbGlua3MgaW4gb3JkZXIgdG8gYWxsb3cgcGxheWJhY2sgYmVmb3JlIGFsbCBsaW5rcyBhcmUgZG93bmxvYWRlZCAoZm9yIGV4OiB0byBzd2l0Y2ggZnJvbSBhdWRpbyB0cmFja3MpXG4gIGxpbmtzLnNvcnQoKGEsIGIpID0+IGEuaW5kZXggLSBiLmluZGV4KTtcbiAgcmV0dXJuIGxpbmtzO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHthcnJheX0gdXNlckNob3NlblJlcHIgLSBhcnJheSBvZiBjaG9zZW4gcmVwcmVzZW50YXRpb25zIGlkcyBieSB1c2VyXG4gKiBAcGFyYW0ge2FycmF5fSBtYW5pZmVzdFJlcHIgLSBhcnJheSBvZiBhbGwgbWFuaWZlc3QgcmVwcmVzZW50YXRpb25zXG4gKiBAcmV0dXJucyB7YXJyYXl9IGNob3NlbiByZXByZXNlbnRhdGlvbnMgZnJvbSBtYW5pZmVzdFxuICovXG5kb3dubG9hZFV0aWwuZ2V0Q2hvc2VuUmVwcmVzZW50YXRpb25zID0gZnVuY3Rpb24gZ2V0Q2hvc2VuUmVwcmVzZW50YXRpb25zICh1c2VyQ2hvc2VuUmVwciwgbWFuaWZlc3RSZXByKSB7XG4gIGxldCBjaG9zZW5SZXByZXNlbnRhdGlvbnMgPSBbXTtcbiAgbGV0IHVzZXJDaG9zZW5SZXByT2JqID0ge307XG4gIHVzZXJDaG9zZW5SZXByID0gdXNlckNob3NlblJlcHIgfHwgW107XG4gIG1hbmlmZXN0UmVwciA9IG1hbmlmZXN0UmVwciB8fCBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSB1c2VyQ2hvc2VuUmVwci5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICB1c2VyQ2hvc2VuUmVwck9ialtTdHJpbmcodXNlckNob3NlblJlcHJbaV0pXSA9IHRydWU7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGogPSBtYW5pZmVzdFJlcHIubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgY29uc3QgaXRlbXMgPSBtYW5pZmVzdFJlcHJbaV0ucmVwcmVzZW50YXRpb25Db2xsO1xuICAgIGZvciAobGV0IGsgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBrIDwgbDsgaysrKSB7XG4gICAgICBjb25zdCBpdGVtID0gaXRlbXNba107XG4gICAgICBpZiAodXNlckNob3NlblJlcHJPYmpbU3RyaW5nKGl0ZW0uYXR0cmlidXRlTGlzdC5pZCldKSB7XG4gICAgICAgIGNob3NlblJlcHJlc2VudGF0aW9ucy5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hvc2VuUmVwcmVzZW50YXRpb25zO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBkb3dubG9hZFV0aWw7XG4iXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVxdWlyZSIsInV0aWxVcmwiLCJkb3dubG9hZFV0aWwiLCJnZXRBbGxMaW5rcyIsIm1hbmlmZXN0SWQiLCJsb2NhbFBhdGgiLCJyZW1vdGVQYXRoIiwidXNlclJlcHJlc2VudGF0aW9ucyIsIm1hbmlmZXN0UmVwcmVzZW50YXRpb25zIiwiZ2V0RG93bmxvYWRMaW5rcyIsImRvd25sb2FkZWRIYXNoIiwiY2hvc2VuUmVwcmVzZW50YXRpb25zIiwiZ2V0Q2hvc2VuUmVwcmVzZW50YXRpb25zIiwiYmFuZHdpZHRoIiwiY29udGVudFR5cGUiLCJsb2NhbFVybCIsImkiLCJpZCIsImoiLCJrIiwibCIsImxpbmtzIiwibWVkaWFGaWxlIiwibWVkaWFCYXNlVXJsIiwibWVkaWFVcmxzIiwicmVtb3RlVXJsIiwic2VnbWVudEluZm9ybWF0aW9uIiwibGVuZ3RoIiwiYXR0cmlidXRlTGlzdCIsIm1pbWVUeXBlIiwiaW5kZXhPZiIsInJlcHJlc2VudGF0aW9uSUQiLCJiYXNlVVJMIiwicmVwbGFjZSIsIm1hdGNoIiwicmVnZXhwUHJvdG9jb2xSZW1vdmUiLCJqb2luUGF0aFdpdGhGaWxlIiwiaW5kZXgiLCJsYXN0SW5kZXhPZiIsInN1YnN0ciIsImZpbGVQYXJ0cyIsInNwbGl0IiwibWFwIiwicGFydCIsImRlY29kZVVSSUNvbXBvbmVudCIsImpvaW4iLCJwdXNoIiwic29ydCIsImEiLCJiIiwidXNlckNob3NlblJlcHIiLCJtYW5pZmVzdFJlcHIiLCJ1c2VyQ2hvc2VuUmVwck9iaiIsIlN0cmluZyIsIml0ZW1zIiwicmVwcmVzZW50YXRpb25Db2xsIiwiaXRlbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///957\n')},5169:module=>{"use strict";eval("\n\nfunction isUTF16(data) {\n  var i = 0;\n  var len = data && data.length;\n  var pos = null;\n  var b1, b2, next, prev;\n  if (len < 2) {\n    if (data[0] > 0xFF) {\n      return false;\n    }\n  } else {\n    b1 = data[0];\n    b2 = data[1];\n    if (b1 === 0xFF &&\n    // BOM (little-endian)\n    b2 === 0xFE) {\n      return true;\n    }\n    if (b1 === 0xFE &&\n    // BOM (big-endian)\n    b2 === 0xFF) {\n      return true;\n    }\n    for (; i < len; i++) {\n      if (data[i] === 0x00) {\n        pos = i;\n        break;\n      } else if (data[i] > 0xFF) {\n        return false;\n      }\n    }\n    if (pos === null) {\n      return false; // Non ASCII\n    }\n\n    next = data[pos + 1]; // BE\n    if (next !== void 0 && next > 0x00 && next < 0x80) {\n      return true;\n    }\n    prev = data[pos - 1]; // LE\n    if (prev !== void 0 && prev > 0x00 && prev < 0x80) {\n      return true;\n    }\n  }\n  return false;\n}\nmodule.exports = {\n  isUTF16: isUTF16\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE2OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxPQUFPLENBQUVDLElBQUksRUFBRTtFQUN0QixJQUFJQyxDQUFDLEdBQUcsQ0FBQztFQUNULElBQUlDLEdBQUcsR0FBR0YsSUFBSSxJQUFJQSxJQUFJLENBQUNHLE1BQU07RUFDN0IsSUFBSUMsR0FBRyxHQUFHLElBQUk7RUFDZCxJQUFJQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsSUFBSSxFQUFFQyxJQUFJO0VBRXRCLElBQUlOLEdBQUcsR0FBRyxDQUFDLEVBQUU7SUFDVCxJQUFJRixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFO01BQ2hCLE9BQU8sS0FBSztJQUNoQjtFQUNKLENBQUMsTUFBTTtJQUNISyxFQUFFLEdBQUdMLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDWk0sRUFBRSxHQUFHTixJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSUssRUFBRSxLQUFLLElBQUk7SUFBSTtJQUNmQyxFQUFFLEtBQUssSUFBSSxFQUFFO01BQ2IsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxJQUFJRCxFQUFFLEtBQUssSUFBSTtJQUFJO0lBQ2ZDLEVBQUUsS0FBSyxJQUFJLEVBQUU7TUFDYixPQUFPLElBQUk7SUFDZjtJQUVBLE9BQU9MLENBQUMsR0FBR0MsR0FBRyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtNQUNqQixJQUFJRCxJQUFJLENBQUNDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQkcsR0FBRyxHQUFHSCxDQUFDO1FBQ1A7TUFDSixDQUFDLE1BQU0sSUFBSUQsSUFBSSxDQUFDQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUU7UUFDdkIsT0FBTyxLQUFLO01BQ2hCO0lBQ0o7SUFFQSxJQUFJRyxHQUFHLEtBQUssSUFBSSxFQUFFO01BQ2QsT0FBTyxLQUFLLENBQUMsQ0FBQztJQUNsQjs7SUFFQUcsSUFBSSxHQUFHUCxJQUFJLENBQUNJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLElBQUlHLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSUEsSUFBSSxHQUFHLElBQUksSUFBSUEsSUFBSSxHQUFHLElBQUksRUFBRTtNQUMvQyxPQUFPLElBQUk7SUFDZjtJQUVBQyxJQUFJLEdBQUdSLElBQUksQ0FBQ0ksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsSUFBSUksSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJQSxJQUFJLEdBQUcsSUFBSSxJQUFJQSxJQUFJLEdBQUcsSUFBSSxFQUFFO01BQy9DLE9BQU8sSUFBSTtJQUNmO0VBQ0o7RUFFQSxPQUFPLEtBQUs7QUFDZDtBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmWCxPQUFPLEVBQUVBO0FBQ1gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9lbmNvZGluZy5qcz84ODFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBpc1VURjE2IChkYXRhKSB7XG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGRhdGEgJiYgZGF0YS5sZW5ndGg7XG4gIHZhciBwb3MgPSBudWxsO1xuICB2YXIgYjEsIGIyLCBuZXh0LCBwcmV2O1xuXG4gIGlmIChsZW4gPCAyKSB7XG4gICAgICBpZiAoZGF0YVswXSA+IDB4RkYpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gIH0gZWxzZSB7XG4gICAgICBiMSA9IGRhdGFbMF07XG4gICAgICBiMiA9IGRhdGFbMV07XG4gICAgICBpZiAoYjEgPT09IDB4RkYgJiYgLy8gQk9NIChsaXR0bGUtZW5kaWFuKVxuICAgICAgICAgIGIyID09PSAweEZFKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYjEgPT09IDB4RkUgJiYgLy8gQk9NIChiaWctZW5kaWFuKVxuICAgICAgICAgIGIyID09PSAweEZGKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpZiAoZGF0YVtpXSA9PT0gMHgwMCkge1xuICAgICAgICAgICAgICBwb3MgPSBpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFbaV0gPiAweEZGKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3MgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE5vbiBBU0NJSVxuICAgICAgfVxuXG4gICAgICBuZXh0ID0gZGF0YVtwb3MgKyAxXTsgLy8gQkVcbiAgICAgIGlmIChuZXh0ICE9PSB2b2lkIDAgJiYgbmV4dCA+IDB4MDAgJiYgbmV4dCA8IDB4ODApIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcHJldiA9IGRhdGFbcG9zIC0gMV07IC8vIExFXG4gICAgICBpZiAocHJldiAhPT0gdm9pZCAwICYmIHByZXYgPiAweDAwICYmIHByZXYgPCAweDgwKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1VURjE2OiBpc1VURjE2XG59Il0sIm5hbWVzIjpbImlzVVRGMTYiLCJkYXRhIiwiaSIsImxlbiIsImxlbmd0aCIsInBvcyIsImIxIiwiYjIiLCJuZXh0IiwicHJldiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5169\n")},9241:module=>{"use strict";eval('\n\nmodule.exports = function fieldsPicker(obj, fields, attr) {\n  if (typeof attr === "undefined") {\n    return;\n  }\n  for (var i = 0, j = fields.length; i < j; i++) {\n    var field = fields[i];\n    var defaultValue = field.defaultValue;\n    var name = field.name || field;\n    obj[name] = typeof attr[name] !== "undefined" ? attr[name] : defaultValue;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI0MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsWUFBWSxDQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFO0VBQ3pELElBQUksT0FBT0EsSUFBSSxLQUFLLFdBQVcsRUFBRTtJQUMvQjtFQUNGO0VBQ0EsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxDQUFDLEdBQUdILE1BQU0sQ0FBQ0ksTUFBTSxFQUFFRixDQUFDLEdBQUdDLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDN0MsSUFBTUcsS0FBSyxHQUFHTCxNQUFNLENBQUNFLENBQUMsQ0FBQztJQUN2QixJQUFNSSxZQUFZLEdBQUdELEtBQUssQ0FBQ0MsWUFBWTtJQUN2QyxJQUFNQyxJQUFJLEdBQUdGLEtBQUssQ0FBQ0UsSUFBSSxJQUFJRixLQUFLO0lBQ2hDTixHQUFHLENBQUNRLElBQUksQ0FBQyxHQUFHLE9BQU9OLElBQUksQ0FBQ00sSUFBSSxDQUFDLEtBQUssV0FBVyxHQUFHTixJQUFJLENBQUNNLElBQUksQ0FBQyxHQUFHRCxZQUFZO0VBQzNFO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9maWVsZHMtcGlja2VyLmpzPzA2M2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmllbGRzUGlja2VyIChvYmosIGZpZWxkcywgYXR0cikge1xuICBpZiAodHlwZW9mIGF0dHIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGogPSBmaWVsZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgY29uc3QgZmllbGQgPSBmaWVsZHNbaV07XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gZmllbGQuZGVmYXVsdFZhbHVlO1xuICAgIGNvbnN0IG5hbWUgPSBmaWVsZC5uYW1lIHx8IGZpZWxkO1xuICAgIG9ialtuYW1lXSA9IHR5cGVvZiBhdHRyW25hbWVdICE9PSBcInVuZGVmaW5lZFwiID8gYXR0cltuYW1lXSA6IGRlZmF1bHRWYWx1ZTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZmllbGRzUGlja2VyIiwib2JqIiwiZmllbGRzIiwiYXR0ciIsImkiLCJqIiwibGVuZ3RoIiwiZmllbGQiLCJkZWZhdWx0VmFsdWUiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9241\n')},7815:module=>{"use strict";eval('\n\nfunction removeCharacter(text, pos) {\n  var newText;\n  newText = text.substr(0, pos - 1);\n  if (text.length > pos) {\n    newText += text.substr(pos, text.length);\n  }\n  return newText;\n}\nfunction getInvalidDiff(text, regex, openingTag, closingTag) {\n  var value = String(text);\n  var check = true;\n  var i = 1;\n  while (check) {\n    var valueToCheck = value.substr(0, i);\n    if (!valueToCheck.match(regex)) {\n      value = removeCharacter(value, i);\n    } else {\n      i++;\n    }\n    if (i > value.length) {\n      check = false;\n    }\n  }\n  var arrValue = value.split("");\n  for (var _i = 0, j = text.length; _i < j; _i++) {\n    if (_i >= arrValue.length || text[_i] !== arrValue[_i]) {\n      arrValue.splice(_i, 0, openingTag + text[_i] + closingTag);\n    }\n  }\n  return arrValue.join("");\n}\nmodule.exports = getInvalidDiff;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzgxNS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxlQUFlLENBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFO0VBQ25DLElBQUlDLE9BQU87RUFDWEEsT0FBTyxHQUFHRixJQUFJLENBQUNHLE1BQU0sQ0FBQyxDQUFDLEVBQUVGLEdBQUcsR0FBRyxDQUFDLENBQUM7RUFDakMsSUFBSUQsSUFBSSxDQUFDSSxNQUFNLEdBQUdILEdBQUcsRUFBRTtJQUNyQkMsT0FBTyxJQUFJRixJQUFJLENBQUNHLE1BQU0sQ0FBQ0YsR0FBRyxFQUFFRCxJQUFJLENBQUNJLE1BQU0sQ0FBQztFQUMxQztFQUNBLE9BQU9GLE9BQU87QUFDaEI7QUFFQSxTQUFTRyxjQUFjLENBQUVMLElBQUksRUFBRU0sS0FBSyxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRTtFQUM1RCxJQUFJQyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ1YsSUFBSSxDQUFDO0VBQ3hCLElBQUlXLEtBQUssR0FBRyxJQUFJO0VBQ2hCLElBQUlDLENBQUMsR0FBRyxDQUFDO0VBQ1QsT0FBT0QsS0FBSyxFQUFFO0lBQ1osSUFBSUUsWUFBWSxHQUFHSixLQUFLLENBQUNOLE1BQU0sQ0FBQyxDQUFDLEVBQUVTLENBQUMsQ0FBQztJQUVyQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsS0FBSyxDQUFDUixLQUFLLENBQUMsRUFBRTtNQUM5QkcsS0FBSyxHQUFHVixlQUFlLENBQUNVLEtBQUssRUFBRUcsQ0FBQyxDQUFDO0lBQ25DLENBQUMsTUFBTTtNQUNMQSxDQUFDLEVBQUU7SUFDTDtJQUNBLElBQUlBLENBQUMsR0FBR0gsS0FBSyxDQUFDTCxNQUFNLEVBQUU7TUFDcEJPLEtBQUssR0FBRyxLQUFLO0lBQ2Y7RUFDRjtFQUNBLElBQUlJLFFBQVEsR0FBR04sS0FBSyxDQUFDTyxLQUFLLENBQUMsRUFBRSxDQUFDO0VBQzlCLEtBQUssSUFBSUosRUFBQyxHQUFHLENBQUMsRUFBRUssQ0FBQyxHQUFHakIsSUFBSSxDQUFDSSxNQUFNLEVBQUVRLEVBQUMsR0FBR0ssQ0FBQyxFQUFFTCxFQUFDLEVBQUUsRUFBRTtJQUMzQyxJQUFJQSxFQUFDLElBQUlHLFFBQVEsQ0FBQ1gsTUFBTSxJQUFJSixJQUFJLENBQUNZLEVBQUMsQ0FBQyxLQUFLRyxRQUFRLENBQUNILEVBQUMsQ0FBQyxFQUFFO01BQ25ERyxRQUFRLENBQUNHLE1BQU0sQ0FBQ04sRUFBQyxFQUFFLENBQUMsRUFBRUwsVUFBVSxHQUFHUCxJQUFJLENBQUNZLEVBQUMsQ0FBQyxHQUFHSixVQUFVLENBQUM7SUFDMUQ7RUFDRjtFQUNBLE9BQU9PLFFBQVEsQ0FBQ0ksSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUMxQjtBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBR2hCLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvZ2V0LWludmFsaWQtZGlmZi5qcz9iYTFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiByZW1vdmVDaGFyYWN0ZXIgKHRleHQsIHBvcykge1xuICBsZXQgbmV3VGV4dDtcbiAgbmV3VGV4dCA9IHRleHQuc3Vic3RyKDAsIHBvcyAtIDEpO1xuICBpZiAodGV4dC5sZW5ndGggPiBwb3MpIHtcbiAgICBuZXdUZXh0ICs9IHRleHQuc3Vic3RyKHBvcywgdGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBuZXdUZXh0O1xufVxuXG5mdW5jdGlvbiBnZXRJbnZhbGlkRGlmZiAodGV4dCwgcmVnZXgsIG9wZW5pbmdUYWcsIGNsb3NpbmdUYWcpIHtcbiAgbGV0IHZhbHVlID0gU3RyaW5nKHRleHQpO1xuICBsZXQgY2hlY2sgPSB0cnVlO1xuICBsZXQgaSA9IDE7XG4gIHdoaWxlIChjaGVjaykge1xuICAgIGxldCB2YWx1ZVRvQ2hlY2sgPSB2YWx1ZS5zdWJzdHIoMCwgaSk7XG5cbiAgICBpZiAoIXZhbHVlVG9DaGVjay5tYXRjaChyZWdleCkpIHtcbiAgICAgIHZhbHVlID0gcmVtb3ZlQ2hhcmFjdGVyKHZhbHVlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaSsrO1xuICAgIH1cbiAgICBpZiAoaSA+IHZhbHVlLmxlbmd0aCkge1xuICAgICAgY2hlY2sgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgbGV0IGFyclZhbHVlID0gdmFsdWUuc3BsaXQoXCJcIik7XG4gIGZvciAobGV0IGkgPSAwLCBqID0gdGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBpZiAoaSA+PSBhcnJWYWx1ZS5sZW5ndGggfHwgdGV4dFtpXSAhPT0gYXJyVmFsdWVbaV0pIHtcbiAgICAgIGFyclZhbHVlLnNwbGljZShpLCAwLCBvcGVuaW5nVGFnICsgdGV4dFtpXSArIGNsb3NpbmdUYWcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyVmFsdWUuam9pbihcIlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJbnZhbGlkRGlmZjsiXSwibmFtZXMiOlsicmVtb3ZlQ2hhcmFjdGVyIiwidGV4dCIsInBvcyIsIm5ld1RleHQiLCJzdWJzdHIiLCJsZW5ndGgiLCJnZXRJbnZhbGlkRGlmZiIsInJlZ2V4Iiwib3BlbmluZ1RhZyIsImNsb3NpbmdUYWciLCJ2YWx1ZSIsIlN0cmluZyIsImNoZWNrIiwiaSIsInZhbHVlVG9DaGVjayIsIm1hdGNoIiwiYXJyVmFsdWUiLCJzcGxpdCIsImoiLCJzcGxpY2UiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7815\n')},3721:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar net = __webpack_require__(1808);\nmodule.exports = function (port, fn) {\n  var tester = net.createServer().once('error', function (err) {\n    if (err) {\n      return fn(err);\n    }\n    fn(null, true);\n  }).once('listening', function () {\n    tester.once('close', function () {\n      fn(null, false);\n    }).close();\n  }).listen(port);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcyMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxHQUFHLEdBQUdDLG1CQUFPLENBQUMsSUFBSyxDQUFDO0FBRTFCQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxJQUFJLEVBQUVDLEVBQUUsRUFBRTtFQUNuQyxJQUFNQyxNQUFNLEdBQUdOLEdBQUcsQ0FBQ08sWUFBWSxFQUFFLENBQUNDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVUMsR0FBRyxFQUFFO0lBQzdELElBQUlBLEdBQUcsRUFBRTtNQUNQLE9BQU9KLEVBQUUsQ0FBQ0ksR0FBRyxDQUFDO0lBQ2hCO0lBQ0FKLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0VBQ2hCLENBQUMsQ0FBQyxDQUFDRyxJQUFJLENBQUMsV0FBVyxFQUFFLFlBQVk7SUFDL0JGLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZO01BQy9CSCxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUNqQixDQUFDLENBQUMsQ0FBQ0ssS0FBSyxFQUFFO0VBQ1osQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQ1AsSUFBSSxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvaXMtcG9ydC10YWtlbi5qcz9jZGM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBuZXQgPSByZXF1aXJlKCduZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocG9ydCwgZm4pIHtcbiAgY29uc3QgdGVzdGVyID0gbmV0LmNyZWF0ZVNlcnZlcigpLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJldHVybiBmbihlcnIpO1xuICAgIH1cbiAgICBmbihudWxsLCB0cnVlKTtcbiAgfSkub25jZSgnbGlzdGVuaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHRlc3Rlci5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZuKG51bGwsIGZhbHNlKTtcbiAgICB9KS5jbG9zZSgpO1xuICB9KS5saXN0ZW4ocG9ydCk7XG59O1xuIl0sIm5hbWVzIjpbIm5ldCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicG9ydCIsImZuIiwidGVzdGVyIiwiY3JlYXRlU2VydmVyIiwib25jZSIsImVyciIsImNsb3NlIiwibGlzdGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3721\n")},5380:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar mkdirp = __webpack_require__(9526);\n\n/**\n *\n * @param {string} localPath - local path\n * @returns {Promise} promise\n */\nmodule.exports = function (localPath) {\n  return new Promise(function (resolve, reject) {\n    mkdirp(localPath, function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM4MC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsSUFBUSxDQUFDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQVVDLFNBQVMsRUFBRTtFQUNwQyxPQUFPLElBQUlDLE9BQU8sQ0FBQyxVQUFVQyxPQUFPLEVBQUVDLE1BQU0sRUFBRTtJQUM1Q1AsTUFBTSxDQUFDSSxTQUFTLEVBQUUsVUFBVUksR0FBRyxFQUFFO01BQy9CLElBQUlBLEdBQUcsRUFBRTtRQUNQRCxNQUFNLENBQUNDLEdBQUcsQ0FBQztNQUNiLENBQUMsTUFBTTtRQUNMRixPQUFPLEVBQUU7TUFDWDtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvbWtkaXJwLXByb21pc2UuanM/N2VlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IG1rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxQYXRoIC0gbG9jYWwgcGF0aFxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobG9jYWxQYXRoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbWtkaXJwKGxvY2FsUGF0aCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoKVxuICAgICAgfVxuICAgIH0pO1xuICB9KVxufTtcbiJdLCJuYW1lcyI6WyJta2RpcnAiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImxvY2FsUGF0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5380\n")},4803:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar constants = __webpack_require__(6953);\nvar Manifest = (__webpack_require__(1269)/* .Manifest */ .G);\nvar XMLSerializer = (__webpack_require__(678).XMLSerializer);\nfunction getMimeType(value) {\n  if (value.indexOf("video") !== -1) {\n    return "video";\n  } else if (value.indexOf("audio") !== -1) {\n    return "audio";\n  } else {\n    return "text";\n  }\n}\nfunction parseManifestWithChoosenRepresentations(manifest, representations) {\n  var manifestId = manifest.id;\n  var xmlSerializer = new XMLSerializer();\n  var manifestUrl = manifest.getManifestUrl();\n  var manifestString = xmlSerializer.serializeToString(manifest.getManifestXML());\n  manifest = new Manifest(manifestId);\n  manifest.loadFromStr(manifestString, manifestUrl);\n  var video = representations.video;\n  var audio = representations.audio;\n  var text = representations.text;\n  var chosenRepresentations = {};\n  chosenRepresentations["video"] = {};\n  for (var i = 0, j = video.length; i < j; i++) {\n    chosenRepresentations["video"][video[i]] = true;\n  }\n  chosenRepresentations["audio"] = {};\n  for (var _i = 0, _j = audio.length; _i < _j; _i++) {\n    chosenRepresentations["audio"][audio[_i]] = true;\n  }\n  chosenRepresentations["text"] = {};\n  for (var _i2 = 0, _j2 = text.length; _i2 < _j2; _i2++) {\n    chosenRepresentations["text"][text[_i2]] = true;\n  }\n  function markNodeForDownload(repr) {\n    for (var _i3 = 0, _j3 = repr.length; _i3 < _j3; _i3++) {\n      for (var k = 0, l = repr[_i3].representationColl.length; k < l; k++) {\n        var id = repr[_i3].representationColl[k].attributeList.id;\n        var mimeType = getMimeType(repr[_i3].representationColl[k].attributeList.mimeType);\n        if (chosenRepresentations[mimeType][id]) {\n          repr[_i3].representationColl[k].markNodeForDownload(true);\n        }\n      }\n    }\n  }\n\n  // fix the baseURL by removing http and https the same is done when saving a file\n  // see api/util/downloads.js -> getDownloadLinks\n  function fixBaseURL(repr) {\n    for (var _i4 = 0, _j4 = repr.length; _i4 < _j4; _i4++) {\n      var baseURL = repr[_i4].currentNode.getElementsByTagName("BaseURL")[0];\n      if (baseURL && baseURL.textContent.match(constants.regexpProtocolRemove)) {\n        baseURL.textContent = baseURL.textContent.replace(constants.regexpProtocolRemove, "");\n      }\n    }\n  }\n  markNodeForDownload(manifest.getVideoRepresentations());\n  markNodeForDownload(manifest.getAudioRepresentations());\n  markNodeForDownload(manifest.getTextRepresentations());\n  fixBaseURL(manifest.getVideoRepresentations());\n  fixBaseURL(manifest.getAudioRepresentations());\n  fixBaseURL(manifest.getTextRepresentations());\n  manifest.removeNode();\n  return xmlSerializer.serializeToString(manifest.getManifestXML());\n}\nmodule.exports = parseManifestWithChoosenRepresentations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4803\n')},6951:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\nvar downloadFileUtil = __webpack_require__(2777);\nfunction removeDir(dir, cb, ENOTEMPTY_attempts) {\n  ENOTEMPTY_attempts = ENOTEMPTY_attempts || 0;\n  var ENOTEMPTY_maxAttempts = 10;\n  var ENOTEMPTY_TIMEOUT = 500;\n  if (typeof dir !== \'string\') {\n    throw new Error(\'directory path required\');\n  }\n  if (cb !== undefined && typeof cb !== \'function\') {\n    throw new Error(\'callback must be function\');\n  }\n  var self = this;\n  var called, results;\n  downloadFileUtil.checkForLocalFile(dir, function existsCallback(exists) {\n    if (!exists) {\n      return removeDirCallback(null);\n    }\n    fs.stat(dir, function statCallback(err, stat) {\n      if (err) {\n        return removeDirCallback(err);\n      }\n      if (!stat.isDirectory()) {\n        return fs.unlink(dir, removeDirCallback);\n      }\n      fs.readdir(dir, readdirCallback);\n    });\n    function readdirCallback(err, files) {\n      if (err) {\n        return removeDirCallback(err);\n      }\n      var n = files.length;\n      if (n === 0) {\n        return fs.rmdir(dir, removeDirCallback);\n      }\n      files.forEach(function (name) {\n        removeDir(path.resolve(dir, name), function (err) {\n          if (err) {\n            return removeDirCallback(err);\n          }\n          if (--n === 0) {\n            return fs.rmdir(dir, removeDirCallback);\n          }\n        });\n      });\n    }\n  });\n  function removeDirCallback(err) {\n    if (err && err.code === "ENOTEMPTY") {\n      if (ENOTEMPTY_attempts < ENOTEMPTY_maxAttempts) {\n        ENOTEMPTY_attempts++;\n        console.error("ERROR ENOTEMPTY", dir, ENOTEMPTY_attempts);\n        setTimeout(function () {\n          removeDir(dir, cb, ENOTEMPTY_attempts);\n        }, ENOTEMPTY_TIMEOUT);\n        return;\n      }\n    }\n    if (err && err.code === \'ENOENT\') {\n      arguments[0] = null;\n    }\n    if (!results) {\n      results = arguments;\n    }\n    if (!cb || called) {\n      return;\n    }\n    called = true;\n    cb.apply(self, results);\n  }\n}\nmodule.exports = removeDir;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUcsRUFBRUUsa0JBQWtCLENBQUM7UUFDekQ2QixVQUFVLENBQUMsWUFBWTtVQUNyQmhDLFNBQVMsQ0FBQ0MsR0FBRyxFQUFFQyxFQUFFLEVBQUVDLGtCQUFrQixDQUFDO1FBQ3hDLENBQUMsRUFBRUUsaUJBQWlCLENBQUM7UUFDckI7TUFDRjtJQUNGO0lBQ0EsSUFBSVksR0FBRyxJQUFJQSxHQUFHLENBQUNZLElBQUksS0FBSyxRQUFRLEVBQUU7TUFDaENJLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJO0lBQ3JCO0lBRUEsSUFBSSxDQUFDdkIsT0FBTyxFQUFFO01BQ1pBLE9BQU8sR0FBR3VCLFNBQVM7SUFDckI7SUFDQSxJQUFJLENBQUMvQixFQUFFLElBQUlPLE1BQU0sRUFBRTtNQUNqQjtJQUNGO0lBQ0FBLE1BQU0sR0FBRyxJQUFJO0lBQ2JQLEVBQUUsQ0FBQ2dDLEtBQUssQ0FBQzFCLElBQUksRUFBRUUsT0FBTyxDQUFDO0VBQ3pCO0FBQ0Y7QUFFQXlCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcEMsU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9yZW1vdmUtZGlyLmpzP2YyOTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyplc2xpbnQgbm8tY29uc29sZTogW1wiZXJyb3JcIiwgeyBhbGxvdzogW1wid2FyblwiLCBcImVycm9yXCIsIFwiaW5mb1wiXSB9XSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZG93bmxvYWRGaWxlVXRpbCA9IHJlcXVpcmUoXCIuLi9kb3dubG9hZHMvZG93bmxvYWQtZmlsZS11dGlsXCIpO1xuXG5mdW5jdGlvbiByZW1vdmVEaXIgKGRpciwgY2IsIEVOT1RFTVBUWV9hdHRlbXB0cykge1xuICBFTk9URU1QVFlfYXR0ZW1wdHMgPSBFTk9URU1QVFlfYXR0ZW1wdHMgfHwgMDtcbiAgY29uc3QgRU5PVEVNUFRZX21heEF0dGVtcHRzID0gMTA7XG4gIGNvbnN0IEVOT1RFTVBUWV9USU1FT1VUID0gNTAwO1xuXG4gIGlmICh0eXBlb2YgZGlyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGlyZWN0b3J5IHBhdGggcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGlmIChjYiAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgbXVzdCBiZSBmdW5jdGlvbicpO1xuICB9XG5cbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgbGV0IGNhbGxlZCwgcmVzdWx0cztcblxuICBkb3dubG9hZEZpbGVVdGlsLmNoZWNrRm9yTG9jYWxGaWxlKGRpciwgZnVuY3Rpb24gZXhpc3RzQ2FsbGJhY2sgKGV4aXN0cykge1xuICAgIGlmICghZXhpc3RzKSB7XG4gICAgICByZXR1cm4gcmVtb3ZlRGlyQ2FsbGJhY2sobnVsbCk7XG4gICAgfVxuICAgIGZzLnN0YXQoZGlyLCBmdW5jdGlvbiBzdGF0Q2FsbGJhY2sgKGVyciwgc3RhdCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVtb3ZlRGlyQ2FsbGJhY2soZXJyKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIHJldHVybiBmcy51bmxpbmsoZGlyLCByZW1vdmVEaXJDYWxsYmFjayk7XG4gICAgICB9XG4gICAgICBmcy5yZWFkZGlyKGRpciwgcmVhZGRpckNhbGxiYWNrKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHJlYWRkaXJDYWxsYmFjayAoZXJyLCBmaWxlcykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVtb3ZlRGlyQ2FsbGJhY2soZXJyKTtcbiAgICAgIH1cblxuICAgICAgbGV0IG4gPSBmaWxlcy5sZW5ndGg7XG4gICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZnMucm1kaXIoZGlyLCByZW1vdmVEaXJDYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmVtb3ZlRGlyKHBhdGgucmVzb2x2ZShkaXIsIG5hbWUpLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZURpckNhbGxiYWNrKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgtLW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmcy5ybWRpcihkaXIsIHJlbW92ZURpckNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiByZW1vdmVEaXJDYWxsYmFjayAoZXJyKSB7XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gXCJFTk9URU1QVFlcIikge1xuICAgICAgaWYgKEVOT1RFTVBUWV9hdHRlbXB0cyA8IEVOT1RFTVBUWV9tYXhBdHRlbXB0cykge1xuICAgICAgICBFTk9URU1QVFlfYXR0ZW1wdHMrKztcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVSUk9SIEVOT1RFTVBUWVwiLCBkaXIsIEVOT1RFTVBUWV9hdHRlbXB0cyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlbW92ZURpcihkaXIsIGNiLCBFTk9URU1QVFlfYXR0ZW1wdHMpO1xuICAgICAgICB9LCBFTk9URU1QVFlfVElNRU9VVCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgIGFyZ3VtZW50c1swXSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFyZXN1bHRzKSB7XG4gICAgICByZXN1bHRzID0gYXJndW1lbnRzO1xuICAgIH1cbiAgICBpZiAoIWNiIHx8IGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGNiLmFwcGx5KHNlbGYsIHJlc3VsdHMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVtb3ZlRGlyO1xuIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJkb3dubG9hZEZpbGVVdGlsIiwicmVtb3ZlRGlyIiwiZGlyIiwiY2IiLCJFTk9URU1QVFlfYXR0ZW1wdHMiLCJFTk9URU1QVFlfbWF4QXR0ZW1wdHMiLCJFTk9URU1QVFlfVElNRU9VVCIsIkVycm9yIiwidW5kZWZpbmVkIiwic2VsZiIsImNhbGxlZCIsInJlc3VsdHMiLCJjaGVja0ZvckxvY2FsRmlsZSIsImV4aXN0c0NhbGxiYWNrIiwiZXhpc3RzIiwicmVtb3ZlRGlyQ2FsbGJhY2siLCJzdGF0Iiwic3RhdENhbGxiYWNrIiwiZXJyIiwiaXNEaXJlY3RvcnkiLCJ1bmxpbmsiLCJyZWFkZGlyIiwicmVhZGRpckNhbGxiYWNrIiwiZmlsZXMiLCJuIiwibGVuZ3RoIiwicm1kaXIiLCJmb3JFYWNoIiwibmFtZSIsInJlc29sdmUiLCJjb2RlIiwiY29uc29sZSIsImVycm9yIiwic2V0VGltZW91dCIsImFyZ3VtZW50cyIsImFwcGx5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6951\n')},1349:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar mkdirp = __webpack_require__(9526);\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\nfunction saveFile(filePath, fileName, value, callback) {\n  mkdirp(filePath, function (err) {\n    if (err) {\n      callback(err);\n    } else {\n      var fileUrl = path.resolve(filePath + "/" + fileName);\n      fs.writeFile(fileUrl, value, "utf-8", callback);\n    }\n  });\n}\nmodule.exports = saveFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM0OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsSUFBUSxDQUFDO0FBQ2hDLElBQU1DLEVBQUUsR0FBR0QsbUJBQU8sQ0FBQyxJQUFJLENBQUM7QUFDeEIsSUFBTUUsSUFBSSxHQUFHRixtQkFBTyxDQUFDLElBQU0sQ0FBQztBQUU1QixTQUFTRyxRQUFRLENBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtFQUN0RFIsTUFBTSxDQUFDSyxRQUFRLEVBQUUsVUFBVUksR0FBRyxFQUFFO0lBQzlCLElBQUlBLEdBQUcsRUFBRTtNQUNQRCxRQUFRLENBQUNDLEdBQUcsQ0FBQztJQUNmLENBQUMsTUFBTTtNQUNMLElBQU1DLE9BQU8sR0FBR1AsSUFBSSxDQUFDUSxPQUFPLENBQUNOLFFBQVEsR0FBRyxHQUFHLEdBQUdDLFFBQVEsQ0FBQztNQUN2REosRUFBRSxDQUFDVSxTQUFTLENBQUNGLE9BQU8sRUFBRUgsS0FBSyxFQUFFLE9BQU8sRUFBRUMsUUFBUSxDQUFDO0lBQ2pEO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQUssTUFBTSxDQUFDQyxPQUFPLEdBQUdWLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvc2F2ZS1maWxlLmpzP2M5NWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBta2RpcnAgPSByZXF1aXJlKFwibWtkaXJwXCIpO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbmZ1bmN0aW9uIHNhdmVGaWxlIChmaWxlUGF0aCwgZmlsZU5hbWUsIHZhbHVlLCBjYWxsYmFjaykge1xuICBta2RpcnAoZmlsZVBhdGgsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmaWxlVXJsID0gcGF0aC5yZXNvbHZlKGZpbGVQYXRoICsgXCIvXCIgKyBmaWxlTmFtZSk7XG4gICAgICBmcy53cml0ZUZpbGUoZmlsZVVybCwgdmFsdWUsIFwidXRmLThcIiwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2F2ZUZpbGU7XG4iXSwibmFtZXMiOlsibWtkaXJwIiwicmVxdWlyZSIsImZzIiwicGF0aCIsInNhdmVGaWxlIiwiZmlsZVBhdGgiLCJmaWxlTmFtZSIsInZhbHVlIiwiY2FsbGJhY2siLCJlcnIiLCJmaWxlVXJsIiwicmVzb2x2ZSIsIndyaXRlRmlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1349\n')},9499:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar FlakeIdGen = __webpack_require__(1759);\nvar intFormat = __webpack_require__(1637);\nvar generator = new FlakeIdGen();\nvar SnowflakeId = function () {\n  function SnowflakeId() {}\n  SnowflakeId.getUUID = function () {\n    var id1 = generator.next();\n    var id3 = intFormat(id1, 'dec');\n    return id3;\n  };\n  return SnowflakeId;\n}();\nexports.SnowflakeId = SnowflakeId;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ5OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsSUFBYSxDQUFDO0FBQ3pDLElBQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQyxJQUFnQixDQUFDO0FBQzNDLElBQU1FLFNBQVMsR0FBRyxJQUFJSCxVQUFVO0FBQ2hDLElBQU1JLFdBQVcsR0FBSSxZQUFZO0VBQy9CLFNBQVNBLFdBQVcsR0FBSSxDQUN4QjtFQUVBQSxXQUFXLENBQUNDLE9BQU8sR0FBRyxZQUFZO0lBQ2hDLElBQU1DLEdBQUcsR0FBR0gsU0FBUyxDQUFDSSxJQUFJLEVBQUU7SUFDNUIsSUFBTUMsR0FBRyxHQUFHTixTQUFTLENBQUNJLEdBQUcsRUFBRSxLQUFLLENBQUM7SUFDakMsT0FBT0UsR0FBRztFQUNaLENBQUM7RUFDRCxPQUFPSixXQUFXO0FBQ3BCLENBQUMsRUFBRztBQUNKSyxtQkFBbUIsR0FBR0wsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9zbm93Zmxha2UtaWQuanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEZsYWtlSWRHZW4gPSByZXF1aXJlKCdmbGFrZS1pZGdlbicpO1xuY29uc3QgaW50Rm9ybWF0ID0gcmVxdWlyZSgnYmlndWludC1mb3JtYXQnKTtcbmNvbnN0IGdlbmVyYXRvciA9IG5ldyBGbGFrZUlkR2VuO1xuY29uc3QgU25vd2ZsYWtlSWQgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTbm93Zmxha2VJZCAoKSB7XG4gIH1cblxuICBTbm93Zmxha2VJZC5nZXRVVUlEID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGlkMSA9IGdlbmVyYXRvci5uZXh0KCk7XG4gICAgY29uc3QgaWQzID0gaW50Rm9ybWF0KGlkMSwgJ2RlYycpO1xuICAgIHJldHVybiBpZDM7XG4gIH07XG4gIHJldHVybiBTbm93Zmxha2VJZDtcbn0oKSk7XG5leHBvcnRzLlNub3dmbGFrZUlkID0gU25vd2ZsYWtlSWQ7XG4iXSwibmFtZXMiOlsiRmxha2VJZEdlbiIsInJlcXVpcmUiLCJpbnRGb3JtYXQiLCJnZW5lcmF0b3IiLCJTbm93Zmxha2VJZCIsImdldFVVSUQiLCJpZDEiLCJuZXh0IiwiaWQzIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9499\n")},3890:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar Storage = __webpack_require__(1396);\nvar createBridgeMethods = __webpack_require__(9921);\n\n/**\n * @param {DownloadsStorageController} parent - reference to parent object\n * @param {string} storageKey - storage key\n * @constructor\n */\nfunction StorageBridge(parent, storageKey) {\n  this._parent = parent;\n  this._storageKey = storageKey;\n  createBridgeMethods(this, Storage);\n}\nmodule.exports = StorageBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5MC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxPQUFPLEdBQUdDLG1CQUFPLENBQUMsSUFBVyxDQUFDO0FBQ3BDLElBQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLElBQXlCLENBQUM7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxhQUFhLENBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFO0VBQzFDLElBQUksQ0FBQ0MsT0FBTyxHQUFHRixNQUFNO0VBQ3JCLElBQUksQ0FBQ0csV0FBVyxHQUFHRixVQUFVO0VBQzdCSCxtQkFBbUIsQ0FBQyxJQUFJLEVBQUVGLE9BQU8sQ0FBQztBQUNwQztBQUVBUSxNQUFNLENBQUNDLE9BQU8sR0FBR04sYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9zdG9yYWdlLWJyaWRnZS5qcz81YTFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgU3RvcmFnZSA9IHJlcXVpcmUoXCIuL3N0b3JhZ2VcIik7XG5jb25zdCBjcmVhdGVCcmlkZ2VNZXRob2RzID0gcmVxdWlyZShcIi4vY3JlYXRlLWJyaWRnZS1tZXRob2RzXCIpO1xuXG4vKipcbiAqIEBwYXJhbSB7RG93bmxvYWRzU3RvcmFnZUNvbnRyb2xsZXJ9IHBhcmVudCAtIHJlZmVyZW5jZSB0byBwYXJlbnQgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gc3RvcmFnZUtleSAtIHN0b3JhZ2Uga2V5XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3RvcmFnZUJyaWRnZSAocGFyZW50LCBzdG9yYWdlS2V5KSB7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fc3RvcmFnZUtleSA9IHN0b3JhZ2VLZXk7XG4gIGNyZWF0ZUJyaWRnZU1ldGhvZHModGhpcywgU3RvcmFnZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmFnZUJyaWRnZTsiXSwibmFtZXMiOlsiU3RvcmFnZSIsInJlcXVpcmUiLCJjcmVhdGVCcmlkZ2VNZXRob2RzIiwiU3RvcmFnZUJyaWRnZSIsInBhcmVudCIsInN0b3JhZ2VLZXkiLCJfcGFyZW50IiwiX3N0b3JhZ2VLZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3890\n")},1396:module=>{"use strict";eval('\n\n/**\n *\n * @constructor\n */\nfunction Storage() {\n  this._items = {};\n}\n\n/**\n * @returns {void}\n */\nStorage.prototype.clear = function () {\n  this._items = {};\n};\n\n/**\n * @returns {number} number of items\n */\nStorage.prototype.count = function () {\n  return this.getKeys().length;\n};\n\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\nStorage.prototype.decrease = function (id) {\n  if (typeof this._items[id] !== "number") {\n    this._items[id] = 0;\n  }\n  this._items[id]--;\n};\n\n/**\n * @param {string} id - item identifier\n * @returns {object} item\n */\nStorage.prototype.getItem = function (id) {\n  return this._items[id];\n};\n\n/**\n * @returns {object} items\n */\nStorage.prototype.getItems = function () {\n  return this._items;\n};\n\n/**\n * @returns {string[]} keys of all items\n */\nStorage.prototype.getKeys = function () {\n  return Object.keys(this._items);\n};\n\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\nStorage.prototype.increase = function (id) {\n  if (typeof this._items[id] !== "number") {\n    this._items[id] = 0;\n  }\n  this._items[id]++;\n};\n\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\nStorage.prototype.removeItem = function (id) {\n  delete this._items[id];\n};\n\n/**\n *\n * @param {string} id - item identifier\n * @param {object} item - item to be saved\n * @returns {void}\n */\nStorage.prototype.setItem = function (id, item) {\n  this._items[id] = item;\n};\n\n/**\n *\n * @param {object} items - items to be saved\n * @returns {void}\n */\nStorage.prototype.setItems = function (items) {\n  for (var key in items) {\n    if (items.hasOwnProperty(key)) {\n      this.setItem(key, items[key]);\n    }\n  }\n};\nmodule.exports = Storage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bGVjdHJvbi8uL2FwaS91dGlsL3N0b3JhZ2UuanM/NGJhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN0b3JhZ2UgKCkge1xuICB0aGlzLl9pdGVtcyA9IHt9O1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5faXRlbXMgPSB7fTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn0gbnVtYmVyIG9mIGl0ZW1zXG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmNvdW50ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZXRLZXlzKCkubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpdGVtIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5kZWNyZWFzZSA9IGZ1bmN0aW9uIChpZCkge1xuICBpZiAodHlwZW9mIHRoaXMuX2l0ZW1zW2lkXSAhPT0gXCJudW1iZXJcIikge1xuICAgIHRoaXMuX2l0ZW1zW2lkXSA9IDA7XG4gIH1cbiAgdGhpcy5faXRlbXNbaWRdLS07XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGl0ZW0gaWRlbnRpZmllclxuICogQHJldHVybnMge29iamVjdH0gaXRlbVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5nZXRJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtc1tpZF07XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtvYmplY3R9IGl0ZW1zXG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faXRlbXM7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX0ga2V5cyBvZiBhbGwgaXRlbXNcbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuZ2V0S2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2l0ZW1zKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gaXRlbSBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuaW5jcmVhc2UgPSBmdW5jdGlvbiAoaWQpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLl9pdGVtc1tpZF0gIT09IFwibnVtYmVyXCIpIHtcbiAgICB0aGlzLl9pdGVtc1tpZF0gPSAwO1xuICB9XG4gIHRoaXMuX2l0ZW1zW2lkXSsrO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpdGVtIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gIGRlbGV0ZSB0aGlzLl9pdGVtc1tpZF07XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpdGVtIGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtIC0gaXRlbSB0byBiZSBzYXZlZFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLnNldEl0ZW0gPSBmdW5jdGlvbiAoaWQsIGl0ZW0pIHtcbiAgdGhpcy5faXRlbXNbaWRdID0gaXRlbTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtcyAtIGl0ZW1zIHRvIGJlIHNhdmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuc2V0SXRlbXMgPSBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgZm9yIChsZXQga2V5IGluIGl0ZW1zKSB7XG4gICAgaWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHRoaXMuc2V0SXRlbShrZXksIGl0ZW1zW2tleV0pXG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3JhZ2U7Il0sIm5hbWVzIjpbIlN0b3JhZ2UiLCJfaXRlbXMiLCJwcm90b3R5cGUiLCJjbGVhciIsImNvdW50IiwiZ2V0S2V5cyIsImxlbmd0aCIsImRlY3JlYXNlIiwiaWQiLCJnZXRJdGVtIiwiZ2V0SXRlbXMiLCJPYmplY3QiLCJrZXlzIiwiaW5jcmVhc2UiLCJyZW1vdmVJdGVtIiwic2V0SXRlbSIsIml0ZW0iLCJzZXRJdGVtcyIsIml0ZW1zIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1396\n')},6137:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar Snowflake = __webpack_require__(9499);\nvar _ = __webpack_require__(4952);\n\n/**\n *\n * @param {function} process - function to get the result from\n * @param {function} callback - callback to be invoked when "process" function returns anything\n * @param {number} target - window target id\n * @param {string} manifestId - manifest identifier\n * @param {number} time - time in miliseconds how often the callback should be invoked\n * @param {boolean} onceOnly - if set to true the callback will be invoked once only and subsriber will be removed\n * @constructor\n */\nfunction Subscriber(process, callback, target, manifestId, time, onceOnly) {\n  this._process = process;\n  this._callback = callback;\n  this._manifestId = manifestId;\n  this._id = String(Snowflake.SnowflakeId.getUUID());\n  this._onceOnly = onceOnly;\n  this._target = target;\n  this.onInterval = function () {\n    var result = this._process();\n    var self = this;\n    if (result) {\n      if (this._onceOnly) {\n        this.remove();\n        if (typeof this._callbackOnFinish === "function") {\n          this._callbackOnFinish(function (err, result) {\n            self._callback(self._id, err, result, self._target, true);\n          });\n        } else {\n          this._callback(this._id, null, result, self._target);\n        }\n      } else {\n        this._callback(this._id, null, result, self._target);\n      }\n    }\n  };\n  _.bindAll(this, "onInterval");\n  this._intervalTimer = setInterval(this.onInterval, time);\n}\n\n/**\n *\n * @returns {string} - subscriber identifier\n */\nSubscriber.prototype.getId = function () {\n  return this._id;\n};\n\n/**\n *\n * @returns {string} - manifest identifier\n */\nSubscriber.prototype.getManifestId = function () {\n  return this._manifestId;\n};\n\n/**\n * @param {function} callback - function to be invoked when "process" function returns anything\n * and when "onceOnly" is set to true\n * @returns {void}\n */\nSubscriber.prototype.onFinish = function (callback) {\n  this._callbackOnFinish = callback;\n};\n\n/**\n * @returns {void}\n */\nSubscriber.prototype.remove = function () {\n  clearInterval(this._intervalTimer);\n};\nmodule.exports = Subscriber;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bGVjdHJvbi8uL2FwaS91dGlsL3N1YnNjcmliZXIuanM/MjUzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFNub3dmbGFrZSA9IHJlcXVpcmUoXCIuL3Nub3dmbGFrZS1pZFwiKTtcbmNvbnN0IF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvY2VzcyAtIGZ1bmN0aW9uIHRvIGdldCB0aGUgcmVzdWx0IGZyb21cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIFwicHJvY2Vzc1wiIGZ1bmN0aW9uIHJldHVybnMgYW55dGhpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXQgLSB3aW5kb3cgdGFyZ2V0IGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gdGltZSBpbiBtaWxpc2Vjb25kcyBob3cgb2Z0ZW4gdGhlIGNhbGxiYWNrIHNob3VsZCBiZSBpbnZva2VkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9uY2VPbmx5IC0gaWYgc2V0IHRvIHRydWUgdGhlIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCBvbmNlIG9ubHkgYW5kIHN1YnNyaWJlciB3aWxsIGJlIHJlbW92ZWRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdWJzY3JpYmVyIChwcm9jZXNzLCBjYWxsYmFjaywgdGFyZ2V0LCBtYW5pZmVzdElkLCB0aW1lLCBvbmNlT25seSkge1xuICB0aGlzLl9wcm9jZXNzID0gcHJvY2VzcztcbiAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgdGhpcy5fbWFuaWZlc3RJZCA9IG1hbmlmZXN0SWQ7XG4gIHRoaXMuX2lkID0gU3RyaW5nKFNub3dmbGFrZS5Tbm93Zmxha2VJZC5nZXRVVUlEKCkpO1xuICB0aGlzLl9vbmNlT25seSA9IG9uY2VPbmx5O1xuICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMub25JbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wcm9jZXNzKCk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgaWYgKHRoaXMuX29uY2VPbmx5KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY2FsbGJhY2tPbkZpbmlzaCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5fY2FsbGJhY2tPbkZpbmlzaChmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlbGYuX2NhbGxiYWNrKHNlbGYuX2lkLCBlcnIsIHJlc3VsdCwgc2VsZi5fdGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9jYWxsYmFjayh0aGlzLl9pZCwgbnVsbCwgcmVzdWx0LCBzZWxmLl90YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jYWxsYmFjayh0aGlzLl9pZCwgbnVsbCwgcmVzdWx0LCBzZWxmLl90YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXy5iaW5kQWxsKHRoaXMsIFwib25JbnRlcnZhbFwiKTtcbiAgdGhpcy5faW50ZXJ2YWxUaW1lciA9IHNldEludGVydmFsKHRoaXMub25JbnRlcnZhbCwgdGltZSk7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gc3Vic2NyaWJlciBpZGVudGlmaWVyXG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLmdldElkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faWQ7XG59O1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqL1xuU3Vic2NyaWJlci5wcm90b3R5cGUuZ2V0TWFuaWZlc3RJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX21hbmlmZXN0SWQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB3aGVuIFwicHJvY2Vzc1wiIGZ1bmN0aW9uIHJldHVybnMgYW55dGhpbmdcbiAqIGFuZCB3aGVuIFwib25jZU9ubHlcIiBpcyBzZXQgdG8gdHJ1ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLm9uRmluaXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMuX2NhbGxiYWNrT25GaW5pc2ggPSBjYWxsYmFjaztcbn07XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbFRpbWVyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vic2NyaWJlcjsiXSwibmFtZXMiOlsiU25vd2ZsYWtlIiwicmVxdWlyZSIsIl8iLCJTdWJzY3JpYmVyIiwicHJvY2VzcyIsImNhbGxiYWNrIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsInRpbWUiLCJvbmNlT25seSIsIl9wcm9jZXNzIiwiX2NhbGxiYWNrIiwiX21hbmlmZXN0SWQiLCJfaWQiLCJTdHJpbmciLCJTbm93Zmxha2VJZCIsImdldFVVSUQiLCJfb25jZU9ubHkiLCJfdGFyZ2V0Iiwib25JbnRlcnZhbCIsInJlc3VsdCIsInNlbGYiLCJyZW1vdmUiLCJfY2FsbGJhY2tPbkZpbmlzaCIsImVyciIsImJpbmRBbGwiLCJfaW50ZXJ2YWxUaW1lciIsInNldEludGVydmFsIiwicHJvdG90eXBlIiwiZ2V0SWQiLCJnZXRNYW5pZmVzdElkIiwib25GaW5pc2giLCJjbGVhckludGVydmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6137\n')},8279:module=>{"use strict";eval('\n\nfunction join() {\n  var pathString = "",\n    arg;\n  for (var i = 0, j = arguments.length; i < j; i++) {\n    arg = arguments[i].replace(/^\\.\\//g, "/");\n    // don\'t add to the last one\n    pathString += arg;\n    if (i < j - 1) {\n      pathString += "/";\n    }\n  }\n  pathString = pathString.replace(/\\/{2,}/g, "/");\n  pathString = pathString.replace("https:/", "https://");\n  pathString = pathString.replace("http:/", "http://");\n  pathString = pathString.replace("file:/", "file://");\n  return pathString;\n}\nfunction joinPath() {\n  return join.apply(null, arguments) + "/";\n}\nfunction joinPathWithFile() {\n  return join.apply(null, arguments);\n}\nmodule.exports = {\n  joinPath: joinPath,\n  joinPathWithFile: joinPathWithFile\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI3OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxJQUFJLEdBQUk7RUFDZixJQUFJQyxVQUFVLEdBQUcsRUFBRTtJQUFFQyxHQUFHO0VBQ3hCLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUMsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQU0sRUFBRUgsQ0FBQyxHQUFHQyxDQUFDLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ2hERCxHQUFHLEdBQUdHLFNBQVMsQ0FBQ0YsQ0FBQyxDQUFDLENBQUNJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO0lBQ3pDO0lBQ0FOLFVBQVUsSUFBSUMsR0FBRztJQUNqQixJQUFJQyxDQUFDLEdBQUdDLENBQUMsR0FBRyxDQUFDLEVBQUU7TUFDYkgsVUFBVSxJQUFJLEdBQUc7SUFDbkI7RUFDRjtFQUNBQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ00sT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUM7RUFDL0NOLFVBQVUsR0FBR0EsVUFBVSxDQUFDTSxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQztFQUN0RE4sVUFBVSxHQUFHQSxVQUFVLENBQUNNLE9BQU8sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDO0VBQ3BETixVQUFVLEdBQUdBLFVBQVUsQ0FBQ00sT0FBTyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7RUFDcEQsT0FBT04sVUFBVTtBQUNuQjtBQUVBLFNBQVNPLFFBQVEsR0FBSTtFQUNuQixPQUFPUixJQUFJLENBQUNTLEtBQUssQ0FBQyxJQUFJLEVBQUVKLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDMUM7QUFFQSxTQUFTSyxnQkFBZ0IsR0FBSTtFQUMzQixPQUFPVixJQUFJLENBQUNTLEtBQUssQ0FBQyxJQUFJLEVBQUVKLFNBQVMsQ0FBQztBQUNwQztBQUVBTSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmSixRQUFRLEVBQUVBLFFBQVE7RUFDbEJFLGdCQUFnQixFQUFFQTtBQUNwQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL3VybC5qcz81YWQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBqb2luICgpIHtcbiAgbGV0IHBhdGhTdHJpbmcgPSBcIlwiLCBhcmc7XG4gIGZvciAobGV0IGkgPSAwLCBqID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGFyZyA9IGFyZ3VtZW50c1tpXS5yZXBsYWNlKC9eXFwuXFwvL2csIFwiL1wiKTtcbiAgICAvLyBkb24ndCBhZGQgdG8gdGhlIGxhc3Qgb25lXG4gICAgcGF0aFN0cmluZyArPSBhcmc7XG4gICAgaWYgKGkgPCBqIC0gMSkge1xuICAgICAgcGF0aFN0cmluZyArPSBcIi9cIjtcbiAgICB9XG4gIH1cbiAgcGF0aFN0cmluZyA9IHBhdGhTdHJpbmcucmVwbGFjZSgvXFwvezIsfS9nLCBcIi9cIik7XG4gIHBhdGhTdHJpbmcgPSBwYXRoU3RyaW5nLnJlcGxhY2UoXCJodHRwczovXCIsIFwiaHR0cHM6Ly9cIik7XG4gIHBhdGhTdHJpbmcgPSBwYXRoU3RyaW5nLnJlcGxhY2UoXCJodHRwOi9cIiwgXCJodHRwOi8vXCIpO1xuICBwYXRoU3RyaW5nID0gcGF0aFN0cmluZy5yZXBsYWNlKFwiZmlsZTovXCIsIFwiZmlsZTovL1wiKTtcbiAgcmV0dXJuIHBhdGhTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGpvaW5QYXRoICgpIHtcbiAgcmV0dXJuIGpvaW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSArIFwiL1wiO1xufVxuXG5mdW5jdGlvbiBqb2luUGF0aFdpdGhGaWxlICgpIHtcbiAgcmV0dXJuIGpvaW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGpvaW5QYXRoOiBqb2luUGF0aCxcbiAgam9pblBhdGhXaXRoRmlsZTogam9pblBhdGhXaXRoRmlsZVxufTtcbiJdLCJuYW1lcyI6WyJqb2luIiwicGF0aFN0cmluZyIsImFyZyIsImkiLCJqIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVwbGFjZSIsImpvaW5QYXRoIiwiYXBwbHkiLCJqb2luUGF0aFdpdGhGaWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8279\n')},9275:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nvar ZeroPadding = function () {\n  function ZeroPadding() {}\n  ZeroPadding.addPadding = function (num, howManyZeros) {\n    var result;\n    var numArr = num.toString().split('');\n    while (numArr.length < howManyZeros) {\n      numArr.unshift('0');\n    }\n    result = numArr.join('');\n    return result;\n  };\n  ZeroPadding.getPaddingAmount = function (inputStr) {\n    var startIndex = inputStr.indexOf('%');\n    var endIndex = inputStr.lastIndexOf('$');\n    var numPadding = parseInt(inputStr.substring(startIndex + 1, endIndex - 1));\n    numPadding = isNaN(numPadding) ? 0 : numPadding;\n    return numPadding;\n  };\n  return ZeroPadding;\n}();\nexports.ZeroPadding = ZeroPadding;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI3NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUksWUFBWTtFQUMvQixTQUFTQSxXQUFXLEdBQUksQ0FDeEI7RUFFQUEsV0FBVyxDQUFDQyxVQUFVLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxZQUFZLEVBQUU7SUFDcEQsSUFBSUMsTUFBTTtJQUNWLElBQU1DLE1BQU0sR0FBR0gsR0FBRyxDQUFDSSxRQUFRLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUN2QyxPQUFPRixNQUFNLENBQUNHLE1BQU0sR0FBR0wsWUFBWSxFQUFFO01BQ25DRSxNQUFNLENBQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDckI7SUFDQUwsTUFBTSxHQUFHQyxNQUFNLENBQUNLLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDeEIsT0FBT04sTUFBTTtFQUNmLENBQUM7RUFDREosV0FBVyxDQUFDVyxnQkFBZ0IsR0FBRyxVQUFVQyxRQUFRLEVBQUU7SUFDakQsSUFBTUMsVUFBVSxHQUFHRCxRQUFRLENBQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDeEMsSUFBTUMsUUFBUSxHQUFHSCxRQUFRLENBQUNJLFdBQVcsQ0FBQyxHQUFHLENBQUM7SUFDMUMsSUFBSUMsVUFBVSxHQUFHQyxRQUFRLENBQUNOLFFBQVEsQ0FBQ08sU0FBUyxDQUFDTixVQUFVLEdBQUcsQ0FBQyxFQUFFRSxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0VFLFVBQVUsR0FBSUcsS0FBSyxDQUFDSCxVQUFVLENBQUMsR0FBSSxDQUFDLEdBQUdBLFVBQVU7SUFDakQsT0FBT0EsVUFBVTtFQUNuQixDQUFDO0VBQ0QsT0FBT2pCLFdBQVc7QUFDcEIsQ0FBQyxFQUFHO0FBQ0pxQixtQkFBbUIsR0FBR3JCLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvemVyby1wYWRkaW5nLmpzP2QyOTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBaZXJvUGFkZGluZyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFplcm9QYWRkaW5nICgpIHtcbiAgfVxuXG4gIFplcm9QYWRkaW5nLmFkZFBhZGRpbmcgPSBmdW5jdGlvbiAobnVtLCBob3dNYW55WmVyb3MpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGNvbnN0IG51bUFyciA9IG51bS50b1N0cmluZygpLnNwbGl0KCcnKTtcbiAgICB3aGlsZSAobnVtQXJyLmxlbmd0aCA8IGhvd01hbnlaZXJvcykge1xuICAgICAgbnVtQXJyLnVuc2hpZnQoJzAnKTtcbiAgICB9XG4gICAgcmVzdWx0ID0gbnVtQXJyLmpvaW4oJycpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIFplcm9QYWRkaW5nLmdldFBhZGRpbmdBbW91bnQgPSBmdW5jdGlvbiAoaW5wdXRTdHIpIHtcbiAgICBjb25zdCBzdGFydEluZGV4ID0gaW5wdXRTdHIuaW5kZXhPZignJScpO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gaW5wdXRTdHIubGFzdEluZGV4T2YoJyQnKTtcbiAgICBsZXQgbnVtUGFkZGluZyA9IHBhcnNlSW50KGlucHV0U3RyLnN1YnN0cmluZyhzdGFydEluZGV4ICsgMSwgZW5kSW5kZXggLSAxKSk7XG4gICAgbnVtUGFkZGluZyA9IChpc05hTihudW1QYWRkaW5nKSkgPyAwIDogbnVtUGFkZGluZztcbiAgICByZXR1cm4gbnVtUGFkZGluZztcbiAgfTtcbiAgcmV0dXJuIFplcm9QYWRkaW5nO1xufSgpKTtcbmV4cG9ydHMuWmVyb1BhZGRpbmcgPSBaZXJvUGFkZGluZztcbiJdLCJuYW1lcyI6WyJaZXJvUGFkZGluZyIsImFkZFBhZGRpbmciLCJudW0iLCJob3dNYW55WmVyb3MiLCJyZXN1bHQiLCJudW1BcnIiLCJ0b1N0cmluZyIsInNwbGl0IiwibGVuZ3RoIiwidW5zaGlmdCIsImpvaW4iLCJnZXRQYWRkaW5nQW1vdW50IiwiaW5wdXRTdHIiLCJzdGFydEluZGV4IiwiaW5kZXhPZiIsImVuZEluZGV4IiwibGFzdEluZGV4T2YiLCJudW1QYWRkaW5nIiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJpc05hTiIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9275\n")},2081:Q=>{"use strict";Q.exports=require("child_process")},3639:Q=>{"use strict";Q.exports=require("domain")},2361:Q=>{"use strict";Q.exports=require("events")},7147:Q=>{"use strict";Q.exports=require("fs")},1808:Q=>{"use strict";Q.exports=require("net")},1017:Q=>{"use strict";Q.exports=require("path")},3837:Q=>{"use strict";Q.exports=require("util")},7911:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__7911__},7769:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__7769__},1637:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__1637__},7194:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__7194__},1759:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__1759__},6838:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__6838__},3480:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__3480__},9526:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__9526__},1908:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__1908__},4952:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__4952__},3720:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__3720__},678:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__678__}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}var __webpack_exports__=__webpack_require__(588);return __webpack_exports__})()));