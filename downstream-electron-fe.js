/*! For license information please see downstream-electron-fe.js.LICENSE.txt */
!function(Q,U){if("object"==typeof exports&&"object"==typeof module)module.exports=U(require("@electron/remote"),require("electron"));else if("function"==typeof define&&define.amd)define(["@electron/remote","electron"],U);else{var F="object"==typeof exports?U(require("@electron/remote"),require("electron")):U(Q["@electron/remote"],Q.electron);for(var B in F)("object"==typeof exports?exports:Q)[B]=F[B]}}(global,((__WEBPACK_EXTERNAL_MODULE__7911__,__WEBPACK_EXTERNAL_MODULE__7194__)=>(()=>{"use strict";var __webpack_modules__={6999:module=>{eval("\n\nvar codes = {\n  GENERAL: -1,\n  ERRORS: {\n    INTERNAL_ERROR: 1,\n    BROKEN: 11,\n    FINISHED: 12,\n    UNFINISHED: 13,\n    STOPPED: 14,\n    CREATED: 15,\n    MISSING: 16,\n    RESUMED: 17,\n    STARTED: 18,\n    LOADING: 19,\n    REMOVED: 20,\n    INFO: 21,\n    EXISTS: 22,\n    NOT_FOUND: 100\n  }\n};\nmodule.exports = codes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk5OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxLQUFLLEdBQUc7RUFDWkMsT0FBTyxFQUFFLENBQUMsQ0FBQztFQUNYQyxNQUFNLEVBQUU7SUFDTkMsY0FBYyxFQUFFLENBQUM7SUFDakJDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRSxFQUFFO0lBQ2RDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLElBQUksRUFBRSxFQUFFO0lBQ1JDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFNBQVMsRUFBRTtFQUNiO0FBQ0YsQ0FBQztBQUNEQyxNQUFNLENBQUNDLE9BQU8sR0FBR2xCLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2Rvd25sb2Fkcy9jb2Rlcy5qcz84ZWMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgY29kZXMgPSB7XG4gIEdFTkVSQUw6IC0xLFxuICBFUlJPUlM6IHtcbiAgICBJTlRFUk5BTF9FUlJPUjogMSxcbiAgICBCUk9LRU46IDExLFxuICAgIEZJTklTSEVEOiAxMixcbiAgICBVTkZJTklTSEVEOiAxMyxcbiAgICBTVE9QUEVEOiAxNCxcbiAgICBDUkVBVEVEOiAxNSxcbiAgICBNSVNTSU5HOiAxNixcbiAgICBSRVNVTUVEOiAxNyxcbiAgICBTVEFSVEVEOiAxOCxcbiAgICBMT0FESU5HOiAxOSxcbiAgICBSRU1PVkVEOiAyMCxcbiAgICBJTkZPOiAyMSxcbiAgICBFWElTVFM6IDIyLFxuICAgIE5PVF9GT1VORDogMTAwLFxuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlcztcblxuIl0sIm5hbWVzIjpbImNvZGVzIiwiR0VORVJBTCIsIkVSUk9SUyIsIklOVEVSTkFMX0VSUk9SIiwiQlJPS0VOIiwiRklOSVNIRUQiLCJVTkZJTklTSEVEIiwiU1RPUFBFRCIsIkNSRUFURUQiLCJNSVNTSU5HIiwiUkVTVU1FRCIsIlNUQVJURUQiLCJMT0FESU5HIiwiUkVNT1ZFRCIsIklORk8iLCJFWElTVFMiLCJOT1RfRk9VTkQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6999\n")},2195:(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"info\"] }] */\n\n\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nvar _require = __webpack_require__(7911),\n  getCurrentWindow = _require.getCurrentWindow;\nvar ipcRenderer = (__webpack_require__(7194).ipcRenderer);\nvar translation = __webpack_require__(817);\nvar downstreamElectronFE;\nfunction serialize(obj) {\n  return JSON.stringify(obj);\n}\nfunction getWidevinePSSH(info) {\n  var manifestProtections = info.manifestInfo.protections;\n  var videoRepresentation = manifestProtections.video[0] || {};\n  if (manifestProtections.video && info.manifest.video) {\n    videoRepresentation = manifestProtections.video.filter(function (manifestProtection) {\n      return info.manifest.video.indexOf(manifestProtection.id) >= 0;\n    });\n    videoRepresentation = videoRepresentation[0] || {};\n  }\n  var protections = videoRepresentation.protections || [];\n  var widevinePSSH;\n  for (var i = 0, j = protections.length; i < j; i++) {\n    if (protections[i].schemeIdUri === WIDEVINE_SCHEME_ID_URI) {\n      widevinePSSH = protections[i].cencPSSH;\n      break;\n    }\n  }\n  return widevinePSSH;\n}\nfunction bind(scope, f) {\n  return function bindF() {\n    f.apply(scope, arguments);\n  };\n}\nfunction bindAll(scope) {\n  for (var i = 1, j = arguments.length; i < j; i++) {\n    var fName = arguments[i];\n    scope[fName] = bind(scope, scope[fName]);\n  }\n}\nfunction clonePersistentConfig(config) {\n  // deep clone the config\n  var clonedConfig = JSON.parse(JSON.stringify(config));\n  if (typeof config.serverCertificate !== 'undefined') {\n    clonedConfig.serverCertificate = config.serverCertificate;\n  }\n  if (typeof config.licenseRequest === 'function') {\n    clonedConfig.licenseRequest = config.licenseRequest;\n  }\n  if (typeof config.licenseResponse === 'function') {\n    clonedConfig.licenseResponse = config.licenseResponse;\n  }\n  return clonedConfig;\n}\n\n/**\n * @constructor\n * @namespace DownstreamElectronFE\n * @param {object} window - window object from renderer window\n * @param {Persistent} persistent - persistent helper class for creating and removing persistent session\n * @property {DownstreamElectronFE.downloads} downloads - api for downloads\n * @description\n * this a bridge class for [DownstreamElectronBE]{@link DownstreamElectronBE}\n * all methods described in ({@link DownstreamElectronFE.downloads})\n */\nfunction DownstreamElectronFE(window, persistent) {\n  var currentWindow = getCurrentWindow();\n  if (currentWindow) {\n    this._windowId = currentWindow.id;\n  }\n  this._promisesObj = {};\n  this._subscribersId = {};\n  this._promiseCounter = 0;\n  this._window = window;\n  this._persistent = persistent;\n  bindAll(this, '_processApi', '_beforeUnload');\n  this._createApiMethods('downloads', ['create', 'createPersistent', 'getFolderInfo', 'getList', 'getListWithInfo', 'getOfflineLink', 'info', 'remove', 'removeAll', 'removeAllUnfinished', 'removePersistent', 'resume', 'saveData', 'savePersistent', 'start', 'stop', 'stopAll', 'subscribe', 'unsubscribe', 'updateDownloadFolder']);\n  this._attachEvents();\n}\nDownstreamElectronFE.prototype.downloads = {};\n\n/**\n * Creates a persistent session in renderer process using external plugin defined as {@link Persistent}\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @returns {void}\n */\nDownstreamElectronFE.prototype.downloads.createPersistent = function (args, resolve, reject) {\n  var manifestId = args[0];\n  var config = clonePersistentConfig(args[1]);\n  var forced = args[2];\n  var scope = this;\n  if (this._persistent) {\n    this.downloads.info(manifestId).then(function (info) {\n      if (!info) {\n        reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n        return;\n      }\n      var existingPersistentSessionId = info.persistent;\n      if (existingPersistentSessionId && !forced) {\n        reject('persistent session already exists:' + JSON.stringify(existingPersistentSessionId));\n      } else {\n        if (!config.pssh) {\n          config.pssh = getWidevinePSSH(info);\n        }\n        scope._persistent.createPersistentSession(config).then(function (persistentSessionId) {\n          scope.downloads.savePersistent(manifestId, persistentSessionId).then(function () {\n            if (existingPersistentSessionId) {\n              scope._persistent.removePersistentSession(existingPersistentSessionId).then(function () {\n                resolve(persistentSessionId);\n              })[\"catch\"](function () {\n                resolve(persistentSessionId);\n              });\n            } else {\n              resolve(persistentSessionId);\n            }\n          }, reject);\n        }, reject);\n      }\n    }, reject);\n  } else {\n    reject('No persistent plugin initialized');\n  }\n};\n\n/**\n * Removes a persistent session in renderer process using external plugin defined as {@link Persistent}\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @param {object} manifest - full information about manifest\n * @returns {void}\n */\nDownstreamElectronFE.prototype.downloads.removePersistent = function (args, resolve, reject, manifest) {\n  if (this._persistent) {\n    if (manifest && manifest.persistent) {\n      this._persistent.removePersistentSession(manifest.persistent).then(resolve, reject);\n    } else {\n      resolve();\n    }\n  } else {\n    reject('No persistent plugin initialized');\n  }\n};\n\n/**\n * Removes a manifest - this is needed on renderer process to check for existence of persistent session\n * and then remove it if necessary\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @param {object} manifest - full information about manifest\n * @returns {void}\n */\nDownstreamElectronFE.prototype.downloads.remove = function (args, resolve, reject, manifest) {\n  var scope = this;\n  if (this._persistent && manifest && manifest.persistent) {\n    scope._persistent.removePersistentSession(manifest.persistent).then(resolve, reject);\n  } else {\n    resolve();\n  }\n};\n\n/**\n * Removes all manifests - this is needed on renderer process to check for existence of persistent sessions\n * and then remove them if necessary\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @param {object} manifests - full information about all manifests\n * @returns {void}\n */\nDownstreamElectronFE.prototype.downloads.removeAll = function (args, resolve, reject, manifests) {\n  var scope = this;\n  manifests = manifests || [];\n  var filtered = manifests.filter(function (manifest) {\n    return !!manifest.persistent;\n  });\n  var persistentArr = filtered.map(function (manifest) {\n    return manifest.persistent;\n  });\n  if (this._persistent && persistentArr.length > 0) {\n    var promises = [];\n    for (var i = 0, j = persistentArr.length; i < j; i++) {\n      promises.push(scope._persistent.removePersistentSession(persistentArr[i]));\n    }\n    Promise.all(promises).then(resolve, reject);\n  } else {\n    resolve();\n  }\n};\n\n/**\n * @param {string} method - method name\n * @param {object} args - arguments\n * @param {function} originalMethod - method to ba called on renderer when main process finishes\n * @private\n * @returns {Promise} - promise\n */\nDownstreamElectronFE.prototype._apiCall = function (method, args, originalMethod) {\n  var self = this;\n  var promiseId = this._generatePromiseId();\n  var promise = new Promise(function (resolve, reject) {\n    self._promisesObj[promiseId] = {\n      resolve: resolve,\n      reject: reject,\n      method: method,\n      args: args,\n      originalMethod: originalMethod\n    };\n  });\n  var request = {};\n  request.promiseId = promiseId;\n  request.method = method;\n  request.windowId = this._windowId;\n  request.args = serialize(args);\n  this._send(request);\n  return promise;\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._attachEvents = function () {\n  var ipcRenderer = (__webpack_require__(7194).ipcRenderer);\n  ipcRenderer.on('downstreamElectronFE', this._processApi);\n  this._window.addEventListener('beforeunload', this._beforeUnload);\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._beforeUnload = function () {\n  this._removeSubscribers();\n};\n\n/**\n *\n * @private\n * @param {string} namespace - namespace\n * @param {array} methods - methods name array\n * @returns {\n * void}\n */\nDownstreamElectronFE.prototype._createApiMethods = function (namespace, methods) {\n  function apiFunction(scope, name, originalMethod) {\n    return function () {\n      return scope._apiCall(name, arguments, originalMethod);\n    };\n  }\n  this[namespace] = this[namespace] || {};\n  function createApiMethod(scope, namespace, name) {\n    var originalMethod;\n    if (typeof scope[namespace][name] === 'function') {\n      originalMethod = scope[namespace][name];\n    }\n    scope[namespace][name] = apiFunction(scope, namespace + '.' + name, originalMethod);\n  }\n  for (var i = 0, j = methods.length; i < j; i++) {\n    createApiMethod(this, namespace, methods[i]);\n  }\n};\n\n/**\n * @private\n * @param {string} subscriberId - subscriber identifier\n * @param {object} err - error\n * @param {object} result - result\n * @param {boolean} subscriberFinished - information if the subscriber is the last one which helps to remove subscribers\n * for finished downloads\n * @returns {void}\n */\nDownstreamElectronFE.prototype._executeSubscriber = function (subscriberId, err, result, subscriberFinished) {\n  var subscriber = this._subscribersId[subscriberId];\n  if (subscriber) {\n    subscriber.callback(err, result);\n  } else {\n    //ignore wrong window\n  }\n  if (subscriberFinished && subscriber) {\n    this._removeLocalSubscribers(subscriber.manifestId);\n  }\n};\n\n/**\n *\n * @private\n * @returns {string} - promise identifier\n */\nDownstreamElectronFE.prototype._generatePromiseId = function () {\n  var ts = new Date().getTime();\n  var promiseId;\n  this._promiseCounter++;\n  promiseId = this._promiseCounter + '-' + ts;\n  return promiseId;\n};\n\n/**\n * @private\n * @param {object} obj - object to be processed\n * @param {object} evt - event\n * @returns {void}\n */\nDownstreamElectronFE.prototype._processApi = function (obj, evt) {\n  var promiseId = evt.promiseId;\n  var error = evt.error;\n  var result = evt.result;\n  var promiseObj = this._promisesObj[promiseId + ''];\n  function resolve(result) {\n    promiseObj.resolve(result);\n    this._removeLocalSubscribersForDefinedMethods(promiseObj.method, promiseObj.args[0] || result);\n  }\n  if (promiseObj) {\n    if (evt.status === 'OK') {\n      if (typeof promiseObj.originalMethod === 'function') {\n        promiseObj.originalMethod.call(this, promiseObj.args, resolve.bind(this), promiseObj.reject.bind(this), result);\n      } else {\n        resolve.call(this, result);\n      }\n    } else {\n      promiseObj.reject(error);\n    }\n    if (evt.subscribersId) {\n      this._saveSubscribersId(promiseObj, evt.subscribersId);\n    }\n    delete this._promisesObj[promiseId];\n  } else if (evt.subscriberId) {\n    this._executeSubscriber(evt.subscriberId, evt.err, result, evt.subscriberFinished);\n  } else {\n    //ignore different window\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._removeSubscribers = function () {\n  var request = {};\n  var subscribersId;\n  subscribersId = [];\n  for (var key in this._subscribersId) {\n    if (this._subscribersId.hasOwnProperty(key)) {\n      subscribersId.push(key);\n    }\n  }\n  request.method = 'removeSubscribers';\n  request.args = serialize([subscribersId]);\n  this._send(request);\n};\n\n/**\n * @param {string|array} manifestId - manifest identifier or array of manifests identifier\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._removeLocalSubscribers = function (manifestId) {\n  var self = this;\n  if (typeof manifestId === 'string') {\n    manifestId = [manifestId];\n  } else if (manifestId instanceof Array) {\n    manifestId = manifestId.map(function (item) {\n      if (typeof item === 'string') {\n        return item;\n      } else {\n        return item.manifestInfo && item.manifestInfo.id;\n      }\n    });\n  }\n  function removeSubscribers(subscriberKey) {\n    for (var i = 0, j = manifestId.length; i < j; i++) {\n      if (typeof self._subscribersId[subscriberKey].manifestId === 'string') {\n        if (self._subscribersId[subscriberKey].manifestId === manifestId[i]) {\n          delete self._subscribersId[subscriberKey];\n          break;\n        }\n      } else {\n        var pos = self._subscribersId[subscriberKey].manifestId.indexOf(manifestId[i]);\n        if (pos >= 0) {\n          self._subscribersId[subscriberKey].manifestId.splice(pos, 1);\n        }\n        if (!self._subscribersId[subscriberKey].manifestId.length) {\n          delete self._subscribersId[subscriberKey];\n          break;\n        }\n      }\n    }\n  }\n  if (manifestId) {\n    for (var key in this._subscribersId) {\n      if (this._subscribersId.hasOwnProperty(key)) {\n        removeSubscribers(key);\n      }\n    }\n  } else {\n    this._subscribersId = {};\n  }\n};\n\n/**\n *\n * @param {string} method - method name\n * @param {string|array} manifestId - manifest identifier or array of manifests identifier\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._removeLocalSubscribersForDefinedMethods = function (method, manifestId) {\n  var methods = ['downloads.stop', 'downloads.stopAll', 'downloads.remove', 'downloads.removeAll', 'downloads.removeAllUnfinished', 'downloads.unsubscribe'];\n  // remove all subscribers when user removes or stop all\n  if (method === 'downloads.removeAll' || method === 'downloads.stopAll') {\n    manifestId = undefined;\n  }\n  for (var i = 0, j = methods.length; i < j; i++) {\n    if (method === methods[i]) {\n      this._removeLocalSubscribers(manifestId);\n      break;\n    }\n  }\n};\n/**\n * @param {Promise} promise - promise\n * @param {string} subscribersId - subscriber identifier\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._saveSubscribersId = function (promise, subscribersId) {\n  var i, j;\n  if (typeof subscribersId === 'string' || typeof subscribersId === 'number') {\n    subscribersId = [String(subscribersId)];\n  }\n  for (i = 0, j = subscribersId.length; i < j; i++) {\n    this._subscribersId[subscribersId[i]] = {\n      manifestId: promise.args[0],\n      callback: promise.args[2 + i]\n    };\n  }\n};\n\n/**\n * @param {object} request - request\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._send = function (request) {\n  try {\n    ipcRenderer.send('downstreamElectronBE', request);\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n//---------------------------\nmodule.exports = {\n  /**\n   * @function\n   * @name DownstreamElectronFE#init\n   * @param {object} window - window object from renderer window\n   * @param {Persistent} persistent - persistent helper class for creating and removing persistent session\n   * @description\n   * initialize the api in render process\n   * @returns {DownstreamElectronFE} DownstreamElectronFE\n   * @example\n   * // somewhere in the renderer process\n   * // this is example based on persistent plugin from {@link https://castlabs.com/products/prestoplay-desktop/|PRESTOplay for Desktops},\n   * // you can create its own too, for details click on >> {@link Persistent} <<\n   * const persistent = require('./clpp_persistent.plugin.min');\n   * const downstreamElectron = require(\"downstream-electron\").init(window, persistent);\n   */\n  init: function init(window, persistent) {\n    if (!downstreamElectronFE) {\n      downstreamElectronFE = new DownstreamElectronFE(window, persistent);\n    }\n    return downstreamElectronFE;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2195\n")},7314:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\nvar CODES = __webpack_require__(6999);\nvar translationErrors = {\n  downloads: {\n    _GENERAL: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Sorry we are unable to process your request - some internal error occurred"\n    },\n    ALREADY_FINISHED: {\n      code: CODES.ERRORS.FINISHED,\n      msg: "This download \'%manifestId%\' has been already finished."\n    },\n    ALREADY_REMOVED_ALL_UNFINISHED: {\n      code: CODES.ERRORS.REMOVED,\n      msg: "All unfinished downloads have been already removed, nothing left."\n    },\n    ALREADY_RESUMED: {\n      code: CODES.ERRORS.RESUMED,\n      msg: "This download \'%manifestId%\' has been already resumed."\n    },\n    ALREADY_STOPPED: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "This download \'%manifestId%\' has been already stopped or has been already downloaded."\n    },\n    ALREADY_STOPPED_ALL: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "There are no downloads to be stopped."\n    },\n    ALREADY_STARTED: {\n      code: CODES.ERRORS.STARTED,\n      msg: "This download \'%manifestId%\' has been already started."\n    },\n    BROKEN_CANNOT_BE_RESUMED: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "This download \'%manifestId%\' is broken and cannot be resumed."\n    },\n    INFO_FAILED: {\n      code: CODES.ERRORS.INFO,\n      msg: "Gettting info of download \'%manifestId%\' failed."\n    },\n    REMOVING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all downloads failed."\n    },\n    REMOVING_ALL_UNFINISHED_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all unfinished downloads failed."\n    },\n    REMOVING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of download \'%manifestId%\' failed."\n    },\n    RESUMING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Resuming of download \'%manifestId%\' failed."\n    },\n    UPDATE_DOWNLOAD_FOLDER_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Updating of download folder for \'%manifestId%\' failed."\n    },\n    STOPPING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping of download \'%manifestId%\' failed."\n    },\n    SAVING_PERSISTENT_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving persistent info for download \'%manifestId%\' failed."\n    },\n    SAVING_DATA_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving data for download \'%manifestId%\' failed."\n    },\n    STOPPING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping all downloads failed."\n    },\n    UNFINISHED: {\n      code: CODES.ERRORS.UNFINISHED,\n      msg: "This download is not ready yet."\n    }\n  },\n  manifests: {\n    NOT_FOUND: {\n      code: CODES.ERRORS.NOT_FOUND,\n      msg: "Manifest with id=\'%manifestId%\' not found."\n    },\n    LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load manifest from url \'%manifestUrl%\'."\n    },\n    LIST_LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load list of manifests."\n    },\n    FOLDER_ALREADY_EXISTS: {\n      code: CODES.ERRORS.EXISTS,\n      msg: "Folder for manifest with id =\'%manifestId%\' already exists."\n    },\n    INVALID_ID: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "Provided custom id for manifest is not valid: (\'%invalid%\')"\n    }\n  }\n};\nmodule.exports = translationErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7314\n')},9278:module=>{eval('\n\nmodule.exports = {\n  test: "Hello world"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI3OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsSUFBSSxFQUFFO0FBQ1IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdHJhbnNsYXRpb24vX3RyYW5zbGF0aW9ucy5qcz82ZWIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGVzdDogXCJIZWxsbyB3b3JsZFwiXG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9278\n')},817:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nvar errors = __webpack_require__(7314);\nvar translations = __webpack_require__(9278);\nvar CODES = __webpack_require__(6999);\nvar REGEXP_KEYS = /%[A-Za-z0-9_-]+%/g;\n\n/**\n * @namespace <global>\n * @module util/translation\n * @property {translationErrors} e - {@link translationErrors}\n */\nvar translation = {};\n\n/**\n *\n * @param {object} key - translation object\n * @returns {*} key from translation object\n * @private\n */\nfunction _getCode(key) {\n  key = key || {};\n  var code = key.code;\n  if (!code) {\n    code = CODES.GENERAL;\n  }\n  return code;\n}\n\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} all key values\n * @private\n */\nfunction _getKeyValues(key, values) {\n  var translation = key;\n  var keyValues = [];\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n  if (translation) {\n    if (values instanceof Array) {\n      var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n      for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n        var keyValue = {};\n        keyValue[groups[i].replace(/%/g, "")] = values[i];\n        keyValues.push(keyValue);\n      }\n    } else if (_typeof(values) === "object") {\n      for (var _key in values) {\n        if (values.hasOwnProperty(_key)) {\n          var _keyValue = {};\n          _keyValue[_key] = values[_key];\n          keyValues.push(_keyValue);\n        }\n      }\n    } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n      var _groups = translation.match(REGEXP_KEYS) || [];\n      for (var _i = 0, _j = _groups.length; _i < _j; _i++) {\n        var _keyValue2 = {};\n        _keyValue2[_groups[_i].replace(/%/g, "")] = values;\n        keyValues.push(_keyValue2);\n      }\n    }\n  }\n  if (keyValues && !keyValues.length) {\n    keyValues = undefined;\n  }\n  return keyValues;\n}\n\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} translated message with attached values\n * @private\n */\nfunction _getTranslation(key, values) {\n  var translation = key;\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n  if (translation) {\n    translation = _parseValues(translation, values);\n  } else {\n    translation = "Internal Error";\n  }\n  return translation;\n}\n\n/**\n *\n * @param {array} args - arguments\n * @returns {array} array of all values except 1st one\n * @private\n */\nfunction _getValues(args) {\n  var values = [];\n  for (var i = 1, j = args.length; i < j; i++) {\n    values.push(args[i]);\n  }\n  if (values.length === 0) {\n    values = undefined;\n  } else if (values.length === 1) {\n    values = values[0];\n  }\n  return values;\n}\n\n/**\n *\n * @param {array} groups - matched groups\n * @returns {array} unique names\n * @private\n */\nfunction _getUniqueKeys(groups) {\n  var hashKey = {};\n  var uniqueNames = [];\n  groups = groups || [];\n  for (var i = 0, j = groups.length; i < j; i++) {\n    if (!hashKey[groups[i]]) {\n      hashKey[groups[i]] = true;\n      uniqueNames.push(groups[i]);\n    }\n  }\n  return uniqueNames;\n}\n\n/**\n *\n * @param {string} translation - text to be translated\n * @param {array|object|string|number|boolean} values - values to be parsed with translation\n * @returns {*} translation\n * @private\n */\nfunction _parseValues(translation, values) {\n  values = values || \'\';\n  if (values instanceof Array) {\n    var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n    for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n      translation = translation.replace(new RegExp(groups[i], "g"), values[i]);\n    }\n  } else if (_typeof(values) === "object") {\n    for (var key in values) {\n      if (values.hasOwnProperty(key)) {\n        translation = translation.replace(new RegExp("%" + key + "%", "g"), values[key]);\n      }\n    }\n    translation = translation.replace(REGEXP_KEYS, values);\n  } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n    translation = translation.replace(REGEXP_KEYS, values);\n  }\n  return translation;\n}\n\n/**\n * @alias module:util/translation.getError\n * @param {object} key - translation object\n * @returns {{code: *, msg: *, keys: *}} - error object with code, msg and keys\n */\nfunction getError(key) {\n  var values = _getValues(arguments);\n  var keyValues = _getKeyValues(key, values);\n  var msg = _getTranslation(key, values);\n  var code = _getCode(key);\n  return {\n    code: code,\n    msg: msg,\n    keys: keyValues\n  };\n}\n\n/**\n * @alias module:util/translation.getTranslation\n * @static\n * @param {object} key - translation object\n * @returns {*} - return translated string with correctly applied values\n */\nfunction getTranslation(key) {\n  var values = _getValues(arguments);\n  return _getTranslation(key, values);\n}\ntranslation.getError = getError;\ntranslation.getTranslation = getTranslation;\ntranslation.e = errors;\ntranslation.t = translations;\nmodule.exports = translation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///817\n')},7911:Q=>{Q.exports=__WEBPACK_EXTERNAL_MODULE__7911__},7194:Q=>{Q.exports=__WEBPACK_EXTERNAL_MODULE__7194__}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}var __webpack_exports__=__webpack_require__(2195);return __webpack_exports__})()));